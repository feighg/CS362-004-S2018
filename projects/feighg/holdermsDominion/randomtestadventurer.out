TESTING adventurerfun():
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 1 and 10 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 2, Expected: 2
test passed
Testing with player 1 and 10 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 2, Expected: 2
test passed
Testing with player 1 and 10 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 2, Expected: 2
test passed
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 1 and 10 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 2, Expected: 2
test passed
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 1 and 10 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 2, Expected: 2
test passed
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 1 and 10 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 2, Expected: 2
test passed
Testing with player 1 and 10 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 2, Expected: 2
test passed
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 1 and 10 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 2, Expected: 2
test passed
Testing with player 1 and 10 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 2, Expected: 2
test passed
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 1 and 10 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 2, Expected: 2
test passed
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 1 and 10 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 2, Expected: 2
test passed
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 1 and 10 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 2, Expected: 2
test passed
Testing with player 1 and 10 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 2, Expected: 2
test passed
Testing with player 1 and 10 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 2, Expected: 2
test passed
Testing with player 1 and 10 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 2, Expected: 2
test passed
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 1 and 10 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 2, Expected: 2
test passed
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 1 and 10 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 2, Expected: 2
test passed
Testing with player 1 and 10 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 2, Expected: 2
test passed
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 1 and 10 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 2, Expected: 2
test passed
Testing with player 1 and 10 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 2, Expected: 2
test passed
Testing with player 1 and 10 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 2, Expected: 2
test passed
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 1 and 10 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 2, Expected: 2
test passed
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 1 and 10 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 2, Expected: 2
test passed
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 1 and 10 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 2, Expected: 2
test passed
Testing with player 1 and 10 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 2, Expected: 2
test passed
Testing with player 1 and 10 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 2, Expected: 2
test passed
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 1 and 10 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 2, Expected: 2
test passed
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 1 and 10 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 2, Expected: 2
test passed
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 1 and 10 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 2, Expected: 2
test passed
Testing with player 1 and 10 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 2, Expected: 2
test passed
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 1 and 10 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 2, Expected: 2
test passed
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 1 and 10 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 2, Expected: 2
test passed
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 1 and 10 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 2, Expected: 2
test passed
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 1 and 10 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 2, Expected: 2
test passed
Testing with player 1 and 10 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 2, Expected: 2
test passed
Testing with player 1 and 10 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 2, Expected: 2
test passed
Testing with player 1 and 10 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 2, Expected: 2
test passed
Testing with player 1 and 10 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 2, Expected: 2
test passed
Testing with player 1 and 10 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 2, Expected: 2
test passed
Testing with player 1 and 10 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 2, Expected: 2
test passed
Testing with player 1 and 10 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 2, Expected: 2
test passed
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 1 and 10 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 2, Expected: 2
test passed
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 1 and 10 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 2, Expected: 2
test passed
Testing with player 1 and 10 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 2, Expected: 2
test passed
Testing with player 0 and 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 7, Expected: 7
test passed
Testing with player 1 and 10 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 2, Expected: 2
test passed
Testing with player 1 and 10 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 2, Expected: 2
test passed
All tests passed!
Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

Function 'newGame'
Lines executed:0.00% of 2
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 12
No branches
No calls

Function 'initializeGame'
Lines executed:85.90% of 78
Branches executed:95.65% of 46
Taken at least once:80.43% of 46
No calls

Function 'shuffle'
Lines executed:100.00% of 18
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'numHandCards'
Lines executed:0.00% of 1
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 2
No branches
No calls

Function 'supplyCount'
Lines executed:100.00% of 1
No branches
No calls

Function 'fullDeckCount'
Lines executed:100.00% of 11
Branches executed:100.00% of 12
Taken at least once:100.00% of 12
No calls

Function 'whoseTurn'
Lines executed:100.00% of 1
No branches
No calls

Function 'endTurn'
Lines executed:0.00% of 22
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'isGameOver'
Lines executed:100.00% of 12
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'scoreFor'
Lines executed:100.00% of 26
Branches executed:100.00% of 42
Taken at least once:100.00% of 42
No calls

Function 'getWinners'
Lines executed:0.00% of 33
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls

Function 'drawCard'
Lines executed:70.83% of 24
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
No calls

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'adventurerEffect'
Lines executed:100.00% of 17
Branches executed:100.00% of 12
Taken at least once:83.33% of 12
No calls

Function 'smithyEffect'
Lines executed:100.00% of 5
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
No calls

Function 'embargoEffect'
Lines executed:0.00% of 7
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
No calls

Function 'cutpurseEffect'
Lines executed:0.00% of 16
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'council_roomEffect'
Lines executed:0.00% of 11
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'cardEffect'
Lines executed:7.88% of 241
Branches executed:16.36% of 165
Taken at least once:3.64% of 165
No calls

Function 'discardCard'
Lines executed:100.00% of 15
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'gainCard'
Lines executed:100.00% of 15
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'updateCoins'
Lines executed:71.43% of 14
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

File 'dominion.c'
Lines executed:36.94% of 647
Branches executed:44.36% of 417
Taken at least once:35.97% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:19
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8://I contain bugs
function compare called 39984 returned 100% blocks executed 85%
        -:    9:int compare(const void* a, const void* b) {
    39984:   10:    if (*(int*)a > *(int*)b)
branch  0 taken 0
branch  1 taken 39984
    #####:   11:        return 1;
    39984:   12:    if (*(int*)a < *(int*)b)
branch  0 taken 14280
branch  1 taken 25704
    14280:   13:        return -1;
    25704:   14:    return 0;
    39984:   15:}
        -:   16:
function newGame called 0 returned 0% blocks executed 0%
        -:   17:struct gameState* newGame() {
    #####:   18:    struct gameState* g = malloc(sizeof(struct gameState));
    #####:   19:    return g;
        -:   20:}
        -:   21:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:                  int k8, int k9, int k10) {
    #####:   24:    int* k = malloc(10 * sizeof(int));
    #####:   25:    k[0] = k1;
    #####:   26:    k[1] = k2;
    #####:   27:    k[2] = k3;
    #####:   28:    k[3] = k4;
    #####:   29:    k[4] = k5;
    #####:   30:    k[5] = k6;
    #####:   31:    k[6] = k7;
    #####:   32:    k[7] = k8;
    #####:   33:    k[8] = k9;
    #####:   34:    k[9] = k10;
    #####:   35:    return k;
        -:   36:}
        -:   37:
function initializeGame called 1428 returned 100% blocks executed 87%
        -:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   39:                   struct gameState *state) {
        -:   40:    
        -:   41:    int i;
        -:   42:    int j;
        -:   43:    int it;
        -:   44:    //set up random number generator
     1428:   45:    SelectStream(1);
     1428:   46:    PutSeed((long)randomSeed);
        -:   47:    
        -:   48:    //check number of players
     2856:   49:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 1428
branch  1 taken 0
branch  2 taken 0
branch  3 taken 1428
        -:   50:    {
    #####:   51:        return -1;
        -:   52:    }
        -:   53:    
        -:   54:    //set number of players
     1428:   55:    state->numPlayers = numPlayers;
        -:   56:    
        -:   57:    //check selected kingdom cards are different
    31416:   58:    for (i = 0; i < 10; i++)
branch  0 taken 14280
branch  1 taken 1428
        -:   59:    {
   314160:   60:        for (j = 0; j < 10; j++)
branch  0 taken 142800
branch  1 taken 14280
        -:   61:        {
   271320:   62:            if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 128520
branch  1 taken 14280
branch  2 taken 0
branch  3 taken 128520
        -:   63:            {
    #####:   64:                return -1;
        -:   65:            }
   142800:   66:        }
    14280:   67:    }
        -:   68:    
        -:   69:    
        -:   70:    //initialize supply
        -:   71:    ///////////////////////////////
        -:   72:    
        -:   73:    //set number of Curse cards
     1428:   74:    if (numPlayers == 2)
branch  0 taken 1428
branch  1 taken 0
        -:   75:    {
     1428:   76:        state->supplyCount[curse] = 10;
     1428:   77:    }
    #####:   78:    else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   79:    {
    #####:   80:        state->supplyCount[curse] = 20;
    #####:   81:    }
        -:   82:    else
        -:   83:    {
    #####:   84:        state->supplyCount[curse] = 30;
        -:   85:    }
        -:   86:    
        -:   87:    //set number of Victory cards
     1428:   88:    if (numPlayers == 2)
branch  0 taken 1428
branch  1 taken 0
        -:   89:    {
     1428:   90:        state->supplyCount[estate] = 8;
     1428:   91:        state->supplyCount[duchy] = 8;
     1428:   92:        state->supplyCount[province] = 8;
     1428:   93:    }
        -:   94:    else
        -:   95:    {
    #####:   96:        state->supplyCount[estate] = 12;
    #####:   97:        state->supplyCount[duchy] = 12;
    #####:   98:        state->supplyCount[province] = 12;
        -:   99:    }
        -:  100:    
        -:  101:    //set number of Treasure cards
     1428:  102:    state->supplyCount[copper] = 60 - (7 * numPlayers);
     1428:  103:    state->supplyCount[silver] = 40;
     1428:  104:    state->supplyCount[gold] = 30;
        -:  105:    
        -:  106:    //set number of Kingdom cards
    59976:  107:    for (i = adventurer; i <= treasure_map; i++)           //loop all cards
branch  0 taken 28560
branch  1 taken 1428
        -:  108:    {
   471240:  109:        for (j = 0; j < 10; j++)                   //loop chosen cards
branch  0 taken 221340
branch  1 taken 14280
        -:  110:        {
   221340:  111:            if (kingdomCards[j] == i)
branch  0 taken 14280
branch  1 taken 207060
        -:  112:            {
        -:  113:                //check if card is a 'Victory' Kingdom card
    27132:  114:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 12852
branch  1 taken 1428
branch  2 taken 1428
branch  3 taken 11424
        -:  115:                {
     2856:  116:                    if (numPlayers == 2){
branch  0 taken 2856
branch  1 taken 0
     2856:  117:                        state->supplyCount[i] = 8;
     2856:  118:                    }
    #####:  119:                    else{ state->supplyCount[i] = 12; }
     2856:  120:                }
        -:  121:                else
        -:  122:                {
    11424:  123:                    state->supplyCount[i] = 10;
        -:  124:                }
    14280:  125:                break;
        -:  126:            }
        -:  127:            else    //card is not in the set choosen for the game
        -:  128:            {
   207060:  129:                state->supplyCount[i] = -1;
        -:  130:            }
   207060:  131:        }
        -:  132:        
    28560:  133:    }
        -:  134:    
        -:  135:    ////////////////////////
        -:  136:    //supply intilization complete
        -:  137:    
        -:  138:    //set player decks
     8568:  139:    for (i = 0; i < numPlayers; i++)
branch  0 taken 2856
branch  1 taken 1428
        -:  140:    {
     2856:  141:        state->deckCount[i] = 0;
    22848:  142:        for (j = 0; j < 3; j++)
branch  0 taken 8568
branch  1 taken 2856
        -:  143:        {
     8568:  144:            state->deck[i][j] = estate;
     8568:  145:            state->deckCount[i]++;
     8568:  146:        }
    45696:  147:        for (j = 3; j < 10; j++)
branch  0 taken 19992
branch  1 taken 2856
        -:  148:        {
    19992:  149:            state->deck[i][j] = copper;
    19992:  150:            state->deckCount[i]++;
    19992:  151:        }
     2856:  152:    }
        -:  153:    
        -:  154:    //shuffle player decks
     8568:  155:    for (i = 0; i < numPlayers; i++)
branch  0 taken 2856
branch  1 taken 1428
        -:  156:    {
     2856:  157:        if ( shuffle(i, state) < 0 )
branch  0 taken 0
branch  1 taken 2856
        -:  158:        {
    #####:  159:            return -1;
        -:  160:        }
     2856:  161:    }
        -:  162:    
        -:  163:    //draw player hands
     8568:  164:    for (i = 0; i < numPlayers; i++)
branch  0 taken 2856
branch  1 taken 1428
        -:  165:    {
        -:  166:        //initialize hand size to zero
     2856:  167:        state->handCount[i] = 0;
     2856:  168:        state->discardCount[i] = 0;
        -:  169:        //draw 5 cards
        -:  170:        // for (j = 0; j < 5; j++)
        -:  171:        //    {
        -:  172:        //      drawCard(i, state);
        -:  173:        //    }
     2856:  174:    }
        -:  175:    
        -:  176:    //set embargo tokens to 0 for all supply piles
    79968:  177:    for (i = 0; i <= treasure_map; i++)
branch  0 taken 38556
branch  1 taken 1428
        -:  178:    {
    38556:  179:        state->embargoTokens[i] = 0;
    38556:  180:    }
        -:  181:    
        -:  182:    //initialize first player's turn
     1428:  183:    state->outpostPlayed = 0;
     1428:  184:    state->phase = 0;
     1428:  185:    state->numActions = 1;
     1428:  186:    state->numBuys = 1;
     1428:  187:    state->playedCardCount = 0;
     1428:  188:    state->whoseTurn = 0;
     1428:  189:    state->handCount[state->whoseTurn] = 0;
        -:  190:    //int it; move to top
        -:  191:    
        -:  192:    //Moved draw cards to here, only drawing at the start of a turn
    17136:  193:    for (it = 0; it < 5; it++){
branch  0 taken 7140
branch  1 taken 1428
     7140:  194:        drawCard(state->whoseTurn, state);
     7140:  195:    }
        -:  196:    
     1428:  197:    updateCoins(state->whoseTurn, state, 0);
        -:  198:    
     1428:  199:    return 0;
     1428:  200:}
        -:  201:
function shuffle called 6848 returned 100% blocks executed 100%
        -:  202:int shuffle(int player, struct gameState *state) {
        -:  203:    
        -:  204:    
        -:  205:    int newDeck[MAX_DECK];
     6848:  206:    int newDeckPos = 0;
        -:  207:    int card;
        -:  208:    int i;
        -:  209:    
     6848:  210:    if (state->deckCount[player] < 1)
branch  0 taken 3992
branch  1 taken 2856
     3992:  211:        return -1;
     2856:  212:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  213:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  214:    
    62832:  215:    while (state->deckCount[player] > 0) {
branch  0 taken 28560
branch  1 taken 2856
    28560:  216:        card = floor(Random() * state->deckCount[player]);
    28560:  217:        newDeck[newDeckPos] = state->deck[player][card];
    28560:  218:        newDeckPos++;
   199522:  219:        for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71201
branch  1 taken 28560
    71201:  220:            state->deck[player][i] = state->deck[player][i+1];
    71201:  221:        }
    28560:  222:        state->deckCount[player]--;
        -:  223:    }
    62832:  224:    for (i = 0; i < newDeckPos; i++) {
branch  0 taken 28560
branch  1 taken 2856
    28560:  225:        state->deck[player][i] = newDeck[i];
    28560:  226:        state->deckCount[player]++;
    28560:  227:    }
        -:  228:    
     2856:  229:    return 0;
     6848:  230:}
        -:  231:
function playCard called 0 returned 0% blocks executed 0%
        -:  232:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  233:{
        -:  234:    int card;
    #####:  235:    int coin_bonus = 0;         //tracks coins gain from actions
        -:  236:    
        -:  237:    //check if it is the right phase
    #####:  238:    if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  239:    {
    #####:  240:        return -1;
        -:  241:    }
        -:  242:    
        -:  243:    //check if player has enough actions
    #####:  244:    if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  245:    {
    #####:  246:        return -1;
        -:  247:    }
        -:  248:    
        -:  249:    //get card played
    #####:  250:    card = handCard(handPos, state);
        -:  251:    
        -:  252:    //check if selected card is an action
    #####:  253:    if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  254:    {
    #####:  255:        return -1;
        -:  256:    }
        -:  257:    
        -:  258:    //play card
    #####:  259:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  260:    {
    #####:  261:        return -1;
        -:  262:    }
        -:  263:    
        -:  264:    //reduce number of actions
    #####:  265:    state->numActions--;
        -:  266:    
        -:  267:    //update coins (Treasure cards may be added with card draws)
    #####:  268:    updateCoins(state->whoseTurn, state, coin_bonus);
        -:  269:    
    #####:  270:    return 0;
    #####:  271:}
        -:  272:
function buyCard called 0 returned 0% blocks executed 0%
        -:  273:int buyCard(int supplyPos, struct gameState *state) {
        -:  274:    int who;
        -:  275:    if (DEBUG){
        -:  276:        printf("Entering buyCard...\n");
        -:  277:    }
        -:  278:    
        -:  279:    // I don't know what to do about the phase thing.
        -:  280:    
    #####:  281:    who = state->whoseTurn;
        -:  282:    
    #####:  283:    if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  284:        if (DEBUG)
        -:  285:            printf("You do not have any buys left\n");
    #####:  286:        return -1;
    #####:  287:    } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  288:        if (DEBUG)
        -:  289:            printf("There are not any of that type of card left\n");
    #####:  290:        return -1;
    #####:  291:    } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  292:        if (DEBUG)
        -:  293:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  294:        return -1;
        -:  295:    } else {
    #####:  296:        state->phase=1;
        -:  297:        //state->supplyCount[supplyPos]--;
    #####:  298:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  299:        
    #####:  300:        state->coins = (state->coins) - (getCost(supplyPos));
    #####:  301:        state->numBuys--;
        -:  302:        if (DEBUG)
        -:  303:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  304:    }
        -:  305:    
        -:  306:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  307:    //state->discardCount[who]++;
        -:  308:    
    #####:  309:    return 0;
    #####:  310:}
        -:  311:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  312:int numHandCards(struct gameState *state) {
    #####:  313:    return state->handCount[ whoseTurn(state) ];
        -:  314:}
        -:  315:
function handCard called 0 returned 0% blocks executed 0%
        -:  316:int handCard(int handPos, struct gameState *state) {
    #####:  317:    int currentPlayer = whoseTurn(state);
    #####:  318:    return state->hand[currentPlayer][handPos];
        -:  319:}
        -:  320:
function supplyCount called 1632 returned 100% blocks executed 100%
        -:  321:int supplyCount(int card, struct gameState *state) {
     1632:  322:    return state->supplyCount[card];
        -:  323:}
        -:  324:
function fullDeckCount called 170 returned 100% blocks executed 100%
        -:  325:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  326:    int i;
      170:  327:    int count = 0;
        -:  328:    
     2674:  329:    for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 1167
branch  1 taken 170
        -:  330:    {
     1359:  331:        if (state->deck[player][i] == card) count++;
branch  0 taken 192
branch  1 taken 975
     1167:  332:    }
        -:  333:    
     6014:  334:    for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 2837
branch  1 taken 170
        -:  335:    {
     3310:  336:        if (state->hand[player][i] == card) count++;
branch  0 taken 473
branch  1 taken 2364
     2837:  337:    }
        -:  338:    
     5044:  339:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 2352
branch  1 taken 170
        -:  340:    {
     2744:  341:        if (state->discard[player][i] == card) count++;
branch  0 taken 392
branch  1 taken 1960
     2352:  342:    }
        -:  343:    
      170:  344:    return count;
        -:  345:}
        -:  346:
function whoseTurn called 220 returned 100% blocks executed 100%
        -:  347:int whoseTurn(struct gameState *state) {
      220:  348:    return state->whoseTurn;
        -:  349:}
        -:  350:
function endTurn called 0 returned 0% blocks executed 0%
        -:  351:int endTurn(struct gameState *state) {
        -:  352:    int k;
        -:  353:    int i;
    #####:  354:    int currentPlayer = whoseTurn(state);
        -:  355:    
        -:  356:    //Discard hand
    #####:  357:    for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  358:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  359:        state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  360:    }
    #####:  361:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  362:    
        -:  363:    //Code for determining the player
    #####:  364:    if (currentPlayer < (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  365:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  366:    }
        -:  367:    else{
    #####:  368:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  369:    }
        -:  370:    
    #####:  371:    state->outpostPlayed = 0;
    #####:  372:    state->phase = 0;
    #####:  373:    state->numActions = 1;
    #####:  374:    state->coins = 0;
    #####:  375:    state->numBuys = 1;
    #####:  376:    state->playedCardCount = 0;
    #####:  377:    state->handCount[state->whoseTurn] = 0;
        -:  378:    
        -:  379:    //int k; move to top
        -:  380:    //Next player draws hand
    #####:  381:    for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  382:        drawCard(state->whoseTurn, state);//Draw a card
    #####:  383:    }
        -:  384:    
        -:  385:    //Update money
    #####:  386:    updateCoins(state->whoseTurn, state , 0);
        -:  387:    
    #####:  388:    return 0;
        -:  389:}
        -:  390:
function isGameOver called 122 returned 100% blocks executed 100%
        -:  391:int isGameOver(struct gameState *state) {
        -:  392:    int i;
        -:  393:    int j;
        -:  394:    
        -:  395:    //if stack of Province cards is empty, the game ends
      122:  396:    if (state->supplyCount[province] == 0)
branch  0 taken 50
branch  1 taken 72
        -:  397:    {
       50:  398:        return 1;
        -:  399:    }
        -:  400:    
        -:  401:    //if three supply pile are at 0, the game ends
       72:  402:    j = 0;
     3744:  403:    for (i = 0; i < 25; i++)
branch  0 taken 1800
branch  1 taken 72
        -:  404:    {
     1800:  405:        if (state->supplyCount[i] == 0)
branch  0 taken 144
branch  1 taken 1656
        -:  406:        {
      144:  407:            j++;
      144:  408:        }
     1800:  409:    }
       72:  410:    if ( j >= 3)
branch  0 taken 24
branch  1 taken 48
        -:  411:    {
       24:  412:        return 1;
        -:  413:    }
        -:  414:    
       48:  415:    return 0;
      122:  416:}
        -:  417:
function scoreFor called 30 returned 100% blocks executed 100%
        -:  418:int scoreFor (int player, struct gameState *state) {
        -:  419:    
        -:  420:    int i;
       30:  421:    int score = 0;
        -:  422:    //score from hand
      780:  423:    for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 360
branch  1 taken 30
        -:  424:    {
      420:  425:        if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 60
branch  1 taken 300
      420:  426:        if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 60
branch  1 taken 300
      420:  427:        if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 60
branch  1 taken 300
      420:  428:        if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 60
branch  1 taken 300
      420:  429:        if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 60
branch  1 taken 300
      420:  430:        if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 60
branch  1 taken 300
      360:  431:    }
        -:  432:    
        -:  433:    //score from discard
      540:  434:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 240
branch  1 taken 30
        -:  435:    {
      280:  436:        if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 40
branch  1 taken 200
      280:  437:        if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 40
branch  1 taken 200
      280:  438:        if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 40
branch  1 taken 200
      280:  439:        if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 40
branch  1 taken 200
      280:  440:        if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 40
branch  1 taken 200
      280:  441:        if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 40
branch  1 taken 200
      240:  442:    }
        -:  443:    
        -:  444:    //score from deck
      540:  445:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 240
branch  1 taken 30
        -:  446:    {
      280:  447:        if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 40
branch  1 taken 200
      280:  448:        if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 40
branch  1 taken 200
      280:  449:        if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 40
branch  1 taken 200
      280:  450:        if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 40
branch  1 taken 200
      280:  451:        if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 40
branch  1 taken 200
      280:  452:        if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 40
branch  1 taken 200
      240:  453:    }
        -:  454:    
       30:  455:    return score;
        -:  456:}
        -:  457:
function getWinners called 0 returned 0% blocks executed 0%
        -:  458:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  459:    int i;
        -:  460:    int j;
        -:  461:    int highScore;
        -:  462:    int currentPlayer;
        -:  463:    
        -:  464:    //get score for each player
    #####:  465:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  466:    {
        -:  467:        //set unused player scores to -9999
    #####:  468:        if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  469:        {
    #####:  470:            players[i] = -9999;
    #####:  471:        }
        -:  472:        else
        -:  473:        {
    #####:  474:            players[i] = scoreFor (i, state);
        -:  475:        }
    #####:  476:    }
        -:  477:    
        -:  478:    //find highest score
    #####:  479:    j = 0;
    #####:  480:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  481:    {
    #####:  482:        if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  483:        {
    #####:  484:            j = i;
    #####:  485:        }
    #####:  486:    }
    #####:  487:    highScore = players[j];
        -:  488:    
        -:  489:    //add 1 to players who had less turns
    #####:  490:    currentPlayer = whoseTurn(state);
    #####:  491:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  492:    {
    #####:  493:        if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  494:        {
    #####:  495:            players[i]++;
    #####:  496:        }
    #####:  497:    }
        -:  498:    
        -:  499:    //find new highest score
    #####:  500:    j = 0;
    #####:  501:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  502:    {
    #####:  503:        if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  504:        {
    #####:  505:            j = i;
    #####:  506:        }
    #####:  507:    }
    #####:  508:    highScore = players[j];
        -:  509:    
        -:  510:    //set winners in array to 1 and rest to 0
    #####:  511:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  512:    {
    #####:  513:        if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  514:        {
    #####:  515:            players[i] = 1;
    #####:  516:        }
        -:  517:        else
        -:  518:        {
    #####:  519:            players[i] = 0;
        -:  520:        }
    #####:  521:    }
        -:  522:    
    #####:  523:    return 0;
        -:  524:}
        -:  525:
function drawCard called 9973 returned 100% blocks executed 75%
        -:  526:int drawCard(int player, struct gameState *state)
        -:  527:{    int count;
        -:  528:    int deckCounter;
     9973:  529:    if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1996
branch  1 taken 7977
        -:  530:        
        -:  531:        //Step 1 Shuffle the discard pile back into a deck
        -:  532:        int i;
        -:  533:        //Move discard to deck
     3992:  534:        for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0
branch  1 taken 1996
    #####:  535:            state->deck[player][i] = state->discard[player][i];
    #####:  536:            state->discard[player][i] = -1;
    #####:  537:        }
        -:  538:        
     1996:  539:        state->deckCount[player] = state->discardCount[player];
     1996:  540:        state->discardCount[player] = 0;//Reset discard
        -:  541:        
        -:  542:        //Shufffle the deck
     1996:  543:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  544:        
        -:  545:        if (DEBUG){//Debug statements
        -:  546:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  547:        }
        -:  548:        
     1996:  549:        state->discardCount[player] = 0;
        -:  550:        
        -:  551:        //Step 2 Draw Card
     1996:  552:        count = state->handCount[player];//Get current player's hand count
        -:  553:        
        -:  554:        if (DEBUG){//Debug statements
        -:  555:            printf("Current hand count: %d\n", count);
        -:  556:        }
        -:  557:        
     1996:  558:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  559:        
     1996:  560:        if (deckCounter == 0)
branch  0 taken 1996
branch  1 taken 0
     1996:  561:            return -1;
        -:  562:        
    #####:  563:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  564:        state->deckCount[player]--;
    #####:  565:        state->handCount[player]++;//Increment hand count
    #####:  566:    }
        -:  567:    
        -:  568:    else{
     7977:  569:        int count = state->handCount[player];//Get current hand count for player
        -:  570:        int deckCounter;
        -:  571:        if (DEBUG){//Debug statements
        -:  572:            printf("Current hand count: %d\n", count);
        -:  573:        }
        -:  574:        
     7977:  575:        deckCounter = state->deckCount[player];//Create holder for the deck count
     7977:  576:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     7977:  577:        state->deckCount[player]--;
     7977:  578:        state->handCount[player]++;//Increment hand count
        -:  579:    }
        -:  580:    
     7977:  581:    return 0;
     9973:  582:}
        -:  583:
function getCost called 0 returned 0% blocks executed 0%
        -:  584:int getCost(int cardNumber)
        -:  585:{
    #####:  586:    switch( cardNumber )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  587:    {
        -:  588:        case curse:
    #####:  589:            return 0;
        -:  590:        case estate:
    #####:  591:            return 2;
        -:  592:        case duchy:
    #####:  593:            return 5;
        -:  594:        case province:
    #####:  595:            return 8;
        -:  596:        case copper:
    #####:  597:            return 0;
        -:  598:        case silver:
    #####:  599:            return 3;
        -:  600:        case gold:
    #####:  601:            return 6;
        -:  602:        case adventurer:
    #####:  603:            return 6;
        -:  604:        case council_room:
    #####:  605:            return 5;
        -:  606:        case feast:
    #####:  607:            return 4;
        -:  608:        case gardens:
    #####:  609:            return 4;
        -:  610:        case mine:
    #####:  611:            return 5;
        -:  612:        case remodel:
    #####:  613:            return 4;
        -:  614:        case smithy:
    #####:  615:            return 4;
        -:  616:        case village:
    #####:  617:            return 3;
        -:  618:        case baron:
    #####:  619:            return 4;
        -:  620:        case great_hall:
    #####:  621:            return 3;
        -:  622:        case minion:
    #####:  623:            return 5;
        -:  624:        case steward:
    #####:  625:            return 3;
        -:  626:        case tribute:
    #####:  627:            return 5;
        -:  628:        case ambassador:
    #####:  629:            return 3;
        -:  630:        case cutpurse:
    #####:  631:            return 4;
        -:  632:        case embargo:
    #####:  633:            return 2;
        -:  634:        case outpost:
    #####:  635:            return 5;
        -:  636:        case salvager:
    #####:  637:            return 4;
        -:  638:        case sea_hag:
    #####:  639:            return 4;
        -:  640:        case treasure_map:
    #####:  641:            return 4;
        -:  642:    }
        -:  643:    
    #####:  644:    return -1;
    #####:  645:}
        -:  646:
        -:  647:
function adventurerEffect called 124 returned 100% blocks executed 100%
        -:  648:int adventurerEffect (struct gameState *state, int currentPlayer) {
      124:  649:    int drawntreasure = 0;
        -:  650:    int temphand[MAX_HAND];// moved above the if statement
      124:  651:    int z = 1;// this is the counter for the temp hand
        -:  652:    int cardDrawn;
        -:  653:    
     4838:  654:    while(drawntreasure<2){
branch  0 taken 2295
branch  1 taken 124
     2295:  655:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 1996
branch  1 taken 299
     1996:  656:            shuffle(currentPlayer, state);
     1996:  657:        }
     2295:  658:        drawCard(currentPlayer, state);
     2295:  659:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
     6389:  660:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 2047
branch  1 taken 248
branch  2 taken 2047
branch  3 taken 0
branch  4 taken 0
branch  5 taken 2047
      248:  661:            drawntreasure++;
        -:  662:        else{
     2047:  663:            temphand[z]=cardDrawn;
     2047:  664:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     2047:  665:            z++;
        -:  666:        }
        -:  667:    }
     4590:  668:    while(z-1>=0){
branch  0 taken 2171
branch  1 taken 124
     2171:  669:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     2171:  670:        z=z-1;
        -:  671:    }
      124:  672:    return 0;
        -:  673:}
        -:  674:
        -:  675:
function smithyEffect called 140 returned 100% blocks executed 100%
        -:  676:int smithyEffect (struct gameState *state, int currentPlayer, int handPos) {
        -:  677:    //+3 Cards
        -:  678:    int i;
     1120:  679:    for (i = 0; i < 3; i++)
branch  0 taken 420
branch  1 taken 140
        -:  680:    {
      420:  681:        drawCard(currentPlayer, state);
      420:  682:    }
        -:  683:    
        -:  684:    //discard card from hand
      140:  685:    discardCard(handPos+1, currentPlayer, state, 0);
      140:  686:    return 0;
        -:  687:}
        -:  688:
function embargoEffect called 0 returned 0% blocks executed 0%
        -:  689:int embargoEffect (struct gameState *state, int currentPlayer, int handPos, int choice1) {
        -:  690:    //+2 Coins
    #####:  691:    state->coins = state->coins + 2;
        -:  692:    
        -:  693:    //see if selected pile is in play
    #####:  694:    if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -:  695:    {
    #####:  696:        return -1;
        -:  697:    }
        -:  698:    
        -:  699:    //add embargo token to selected supply pile
    #####:  700:    state->embargoTokens[choice1]++;
        -:  701:    
        -:  702:    //trash card
    #####:  703:    discardCard(handPos, currentPlayer, state, 1);
    #####:  704:    return 0;
    #####:  705:}
        -:  706:
function cutpurseEffect called 0 returned 0% blocks executed 0%
        -:  707:int cutpurseEffect (struct gameState *state, int currentPlayer, int handPos) {
        -:  708:    int i, j, k;
        -:  709:    
    #####:  710:    updateCoins(currentPlayer, state, 3);
    #####:  711:    for (i = 0; i < state->numPlayers-1; i++)
branch  0 never executed
branch  1 never executed
        -:  712:    {
    #####:  713:        if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  714:        {
    #####:  715:            for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  716:            {
    #####:  717:                if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  718:                {
    #####:  719:                    discardCard(j, i, state, 0);
    #####:  720:                    break;
        -:  721:                }
    #####:  722:                if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  723:                {
    #####:  724:                    for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  725:                    {
        -:  726:                        if (DEBUG)
        -:  727:                            printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####:  728:                    }
    #####:  729:                    break;
        -:  730:                }
    #####:  731:            }
        -:  732:            
    #####:  733:        }
        -:  734:        
    #####:  735:    }
        -:  736:    
        -:  737:    //discard played card from hand
    #####:  738:    discardCard(handPos, currentPlayer, state, 0);
        -:  739:    
    #####:  740:    return 0;
        -:  741:}
        -:  742:
function council_roomEffect called 0 returned 0% blocks executed 0%
        -:  743:int council_roomEffect (struct gameState *state, int currentPlayer, int handPos) {
        -:  744:    int i;
        -:  745:    //+4 Cards
    #####:  746:    for (i = 0; i <= 4; i++)
branch  0 never executed
branch  1 never executed
        -:  747:    {
    #####:  748:        drawCard(currentPlayer, state);
    #####:  749:    }
        -:  750:    
        -:  751:    //+1 Buy
    #####:  752:    state->numBuys++;
        -:  753:    
        -:  754:    //Each other player draws a card
    #####:  755:    for (i = 0; i <= state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  756:    {
    #####:  757:        if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  758:        {
    #####:  759:            drawCard(i, state);
    #####:  760:        }
    #####:  761:    }
        -:  762:    
        -:  763:    //put played card in played card pile
    #####:  764:    discardCard(handPos, currentPlayer, state, 0);
        -:  765:    
    #####:  766:    return 0;
        -:  767:}
        -:  768:
function cardEffect called 220 returned 100% blocks executed 5%
        -:  769:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  770:{
        -:  771:    int i;
        -:  772:    int j;
        -:  773:    int k;
        -:  774:    int x;
        -:  775:    int index;
      220:  776:    int currentPlayer = whoseTurn(state);
      220:  777:    int nextPlayer = currentPlayer + 1;
        -:  778:    
      220:  779:    int tributeRevealedCards[2] = {-1, -1};
        -:  780:    int temphand[MAX_HAND];// moved above the if statement
      220:  781:    int drawntreasure=0;
        -:  782:    int cardDrawn;
      220:  783:    int z = 0;// this is the counter for the temp hand
      220:  784:    if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0
branch  1 taken 220
    #####:  785:        nextPlayer = 0;
    #####:  786:    }
        -:  787:    
        -:  788:    
        -:  789:    
        -:  790:    //uses switch to select card and perform actions
      220:  791:    switch( card )
branch  0 taken 0
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 0
branch  7 taken 0
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 220
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
        -:  792:    {
        -:  793:        case adventurer:
    #####:  794:            return adventurerEffect(state, currentPlayer);
        -:  795:            
        -:  796:        case council_room:
    #####:  797:            return council_roomEffect(state, currentPlayer, handPos);
        -:  798:            
        -:  799:        case feast:
        -:  800:            //gain card with cost up to 5
        -:  801:            //Backup hand
    #####:  802:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  803:                temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  804:                state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  805:            }
        -:  806:            //Backup hand
        -:  807:            
        -:  808:            //Update Coins for Buy
    #####:  809:            updateCoins(currentPlayer, state, 5);
    #####:  810:            x = 1;//Condition to loop on
    #####:  811:            while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  812:                if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  813:                    if (DEBUG)
        -:  814:                        printf("None of that card left, sorry!\n");
        -:  815:                    
        -:  816:                    if (DEBUG){
        -:  817:                        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  818:                    }
    #####:  819:                }
    #####:  820:                else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  821:                    printf("That card is too expensive!\n");
        -:  822:                    
        -:  823:                    if (DEBUG){
        -:  824:                        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  825:                    }
    #####:  826:                }
        -:  827:                else{
        -:  828:                    
        -:  829:                    if (DEBUG){
        -:  830:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  831:                    }
        -:  832:                    
    #####:  833:                    gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  834:                    x = 0;//No more buying cards
        -:  835:                    
        -:  836:                    if (DEBUG){
        -:  837:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  838:                    }
        -:  839:                    
        -:  840:                }
        -:  841:            }
        -:  842:            
        -:  843:            //Reset Hand
    #####:  844:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  845:                state->hand[currentPlayer][i] = temphand[i];
    #####:  846:                temphand[i] = -1;
    #####:  847:            }
        -:  848:            //Reset Hand
        -:  849:            
    #####:  850:            return 0;
        -:  851:            
        -:  852:        case gardens:
    #####:  853:            return -1;
        -:  854:            
        -:  855:        case mine:
    #####:  856:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  857:            
    #####:  858:            if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  859:            {
    #####:  860:                return -1;
        -:  861:            }
        -:  862:            
    #####:  863:            if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  864:            {
    #####:  865:                return -1;
        -:  866:            }
        -:  867:            
    #####:  868:            if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  869:            {
    #####:  870:                return -1;
        -:  871:            }
        -:  872:            
    #####:  873:            gainCard(choice2, state, 2, currentPlayer);
        -:  874:            
        -:  875:            //discard card from hand
    #####:  876:            discardCard(handPos, currentPlayer, state, 0);
        -:  877:            
        -:  878:            //discard trashed card
    #####:  879:            for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  880:            {
    #####:  881:                if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  882:                {
    #####:  883:                    discardCard(i, currentPlayer, state, 0);
    #####:  884:                    break;
        -:  885:                }
    #####:  886:            }
        -:  887:            
    #####:  888:            return 0;
        -:  889:            
        -:  890:        case remodel:
    #####:  891:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  892:            
    #####:  893:            if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  894:            {
    #####:  895:                return -1;
        -:  896:            }
        -:  897:            
    #####:  898:            gainCard(choice2, state, 0, currentPlayer);
        -:  899:            
        -:  900:            //discard card from hand
    #####:  901:            discardCard(handPos, currentPlayer, state, 0);
        -:  902:            
        -:  903:            //discard trashed card
    #####:  904:            for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  905:            {
    #####:  906:                if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  907:                {
    #####:  908:                    discardCard(i, currentPlayer, state, 0);
    #####:  909:                    break;
        -:  910:                }
    #####:  911:            }
        -:  912:            
        -:  913:            
    #####:  914:            return 0;
        -:  915:            
        -:  916:        case smithy:
    #####:  917:            return smithyEffect(state, currentPlayer, handPos);
        -:  918:            
        -:  919:        case village:
        -:  920:            //+1 Card
    #####:  921:            drawCard(currentPlayer, state);
        -:  922:            
        -:  923:            //+2 Actions
    #####:  924:            state->numActions = state->numActions + 2;
        -:  925:            
        -:  926:            //discard played card from hand
    #####:  927:            discardCard(handPos, currentPlayer, state, 0);
    #####:  928:            return 0;
        -:  929:            
        -:  930:        case baron:
    #####:  931:            state->numBuys++;//Increase buys by 1!
    #####:  932:            if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  933:                int p = 0;//Iterator for hand!
    #####:  934:                int card_not_discarded = 1;//Flag for discard set!
    #####:  935:                while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  936:                    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  937:                        state->coins += 4;//Add 4 coins to the amount of coins
    #####:  938:                        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  939:                        state->discardCount[currentPlayer]++;
    #####:  940:                        for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  941:                            state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  942:                        }
    #####:  943:                        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  944:                        state->handCount[currentPlayer]--;
    #####:  945:                        card_not_discarded = 0;//Exit the loop
    #####:  946:                    }
    #####:  947:                    else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  948:                        if(DEBUG) {
        -:  949:                            printf("No estate cards in your hand, invalid choice\n");
        -:  950:                            printf("Must gain an estate if there are any\n");
        -:  951:                        }
    #####:  952:                        if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  953:                            gainCard(estate, state, 0, currentPlayer);
    #####:  954:                            state->supplyCount[estate]--;//Decrement estates
    #####:  955:                            if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  956:                                isGameOver(state);
    #####:  957:                            }
    #####:  958:                        }
    #####:  959:                        card_not_discarded = 0;//Exit the loop
    #####:  960:                    }
        -:  961:                    
        -:  962:                    else{
    #####:  963:                        p++;//Next card
        -:  964:                    }
        -:  965:                }
    #####:  966:            }
        -:  967:            
        -:  968:            else{
    #####:  969:                if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  970:                    gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  971:                    state->supplyCount[estate]--;//Decrement Estates
    #####:  972:                    if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  973:                        isGameOver(state);
    #####:  974:                    }
    #####:  975:                }
        -:  976:            }
        -:  977:            
        -:  978:            
    #####:  979:            return 0;
        -:  980:            
        -:  981:        case great_hall:
        -:  982:            //+1 Card
    #####:  983:            drawCard(currentPlayer, state);
        -:  984:            
        -:  985:            //+1 Actions
    #####:  986:            state->numActions++;
        -:  987:            
        -:  988:            //discard card from hand
    #####:  989:            discardCard(handPos, currentPlayer, state, 0);
    #####:  990:            return 0;
        -:  991:            
        -:  992:        case minion:
        -:  993:            //+1 action
    #####:  994:            state->numActions++;
        -:  995:            
        -:  996:            //discard card from hand
    #####:  997:            discardCard(handPos, currentPlayer, state, 0);
        -:  998:            
    #####:  999:            if (choice1)        //+2 coins
branch  0 never executed
branch  1 never executed
        -: 1000:            {
    #####: 1001:                state->coins = state->coins + 2;
    #####: 1002:            }
        -: 1003:            
    #####: 1004:            else if (choice2)        //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1005:            {
        -: 1006:                //discard hand
    #####: 1007:                while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -: 1008:                {
    #####: 1009:                    discardCard(handPos, currentPlayer, state, 0);
        -: 1010:                }
        -: 1011:                
        -: 1012:                //draw 4
    #####: 1013:                for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1014:                {
    #####: 1015:                    drawCard(currentPlayer, state);
    #####: 1016:                }
        -: 1017:                
        -: 1018:                //other players discard hand and redraw if hand size > 4
    #####: 1019:                for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1020:                {
    #####: 1021:                    if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1022:                    {
    #####: 1023:                        if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1024:                        {
        -: 1025:                            //discard hand
    #####: 1026:                            while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1027:                            {
    #####: 1028:                                discardCard(handPos, i, state, 0);
        -: 1029:                            }
        -: 1030:                            
        -: 1031:                            //draw 4
    #####: 1032:                            for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1033:                            {
    #####: 1034:                                drawCard(i, state);
    #####: 1035:                            }
    #####: 1036:                        }
    #####: 1037:                    }
    #####: 1038:                }
        -: 1039:                
    #####: 1040:            }
    #####: 1041:            return 0;
        -: 1042:            
        -: 1043:        case steward:
      220: 1044:            if (choice1 == 1)
branch  0 taken 59
branch  1 taken 161
        -: 1045:            {
        -: 1046:                //+2 cards
       59: 1047:                drawCard(currentPlayer, state);
       59: 1048:                drawCard(currentPlayer, state);
       59: 1049:            }
      161: 1050:            else if (choice1 == 2)
branch  0 taken 63
branch  1 taken 98
        -: 1051:            {
        -: 1052:                //+2 coins
       63: 1053:                state->coins = state->coins + 2;
       63: 1054:            }
        -: 1055:            else
        -: 1056:            {
        -: 1057:                //trash 2 cards in hand
       98: 1058:                discardCard(choice2, currentPlayer, state, 1);
       98: 1059:                discardCard(choice3, currentPlayer, state, 1);
        -: 1060:            }
        -: 1061:            
        -: 1062:            //discard card from hand
      220: 1063:            discardCard(handPos, currentPlayer, state, 0);
      220: 1064:            return 0;
        -: 1065:            
        -: 1066:        case tribute:
    #####: 1067:            if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1068:                if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1069:                    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1070:                    state->deckCount[nextPlayer]--;
    #####: 1071:                }
    #####: 1072:                else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1073:                    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1074:                    state->discardCount[nextPlayer]--;
    #####: 1075:                }
        -: 1076:                else{
        -: 1077:                    //No Card to Reveal
        -: 1078:                    if (DEBUG){
        -: 1079:                        printf("No cards to reveal\n");
        -: 1080:                    }
        -: 1081:                }
    #####: 1082:            }
        -: 1083:            
        -: 1084:            else{
    #####: 1085:                if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1086:                    for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1087:                        state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1088:                        state->deckCount[nextPlayer]++;
    #####: 1089:                        state->discard[nextPlayer][i] = -1;
    #####: 1090:                        state->discardCount[nextPlayer]--;
    #####: 1091:                    }
        -: 1092:                    
    #####: 1093:                    shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1094:                }
    #####: 1095:                tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1096:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1097:                state->deckCount[nextPlayer]--;
    #####: 1098:                tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1099:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1100:                state->deckCount[nextPlayer]--;
        -: 1101:            }
        -: 1102:            
    #####: 1103:            if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####: 1104:                state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1105:                state->playedCardCount++;
    #####: 1106:                tributeRevealedCards[1] = -1;
    #####: 1107:            }
        -: 1108:            
    #####: 1109:            for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1110:                if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1111:                    state->coins += 2;
    #####: 1112:                }
        -: 1113:                
    #####: 1114:                else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1115:                    drawCard(currentPlayer, state);
    #####: 1116:                    drawCard(currentPlayer, state);
    #####: 1117:                }
        -: 1118:                else{//Action Card
    #####: 1119:                    state->numActions = state->numActions + 2;
        -: 1120:                }
    #####: 1121:            }
        -: 1122:            
    #####: 1123:            return 0;
        -: 1124:            
        -: 1125:        case ambassador:
    #####: 1126:            j = 0;        //used to check if player has enough cards to discard
        -: 1127:            
    #####: 1128:            if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1129:            {
    #####: 1130:                return -1;
        -: 1131:            }
        -: 1132:            
    #####: 1133:            if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1134:            {
    #####: 1135:                return -1;
        -: 1136:            }
        -: 1137:            
    #####: 1138:            for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1139:            {
    #####: 1140:                if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1141:                {
    #####: 1142:                    j++;
    #####: 1143:                }
    #####: 1144:            }
    #####: 1145:            if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1146:            {
    #####: 1147:                return -1;
        -: 1148:            }
        -: 1149:            
        -: 1150:            if (DEBUG)
        -: 1151:                printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1152:            
        -: 1153:            //increase supply count for choosen card by amount being discarded
    #####: 1154:            state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1155:            
        -: 1156:            //each other player gains a copy of revealed card
    #####: 1157:            for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1158:            {
    #####: 1159:                if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1160:                {
    #####: 1161:                    gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1162:                }
    #####: 1163:            }
        -: 1164:            
        -: 1165:            //discard played card from hand
    #####: 1166:            discardCard(handPos, currentPlayer, state, 0);
        -: 1167:            
        -: 1168:            //trash copies of cards returned to supply
    #####: 1169:            for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1170:            {
    #####: 1171:                for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1172:                {
    #####: 1173:                    if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1174:                    {
    #####: 1175:                        discardCard(i, currentPlayer, state, 1);
    #####: 1176:                        break;
        -: 1177:                    }
    #####: 1178:                }
    #####: 1179:            }
        -: 1180:            
    #####: 1181:            return 0;
        -: 1182:            
        -: 1183:        case cutpurse:
    #####: 1184:            return cutpurseEffect(state, currentPlayer, handPos);
        -: 1185:            
        -: 1186:            
        -: 1187:        case embargo:
    #####: 1188:            return embargoEffect(state, currentPlayer, handPos, choice1);
        -: 1189:            
        -: 1190:            
        -: 1191:        case outpost:
        -: 1192:            //set outpost flag
    #####: 1193:            state->outpostPlayed++;
        -: 1194:            
        -: 1195:            //discard card
    #####: 1196:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1197:            return 0;
        -: 1198:            
        -: 1199:        case salvager:
        -: 1200:            //+1 buy
    #####: 1201:            state->numBuys++;
        -: 1202:            
    #####: 1203:            if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1204:            {
        -: 1205:                //gain coins equal to trashed card
    #####: 1206:                state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1207:                //trash card
    #####: 1208:                discardCard(choice1, currentPlayer, state, 1);
    #####: 1209:            }
        -: 1210:            
        -: 1211:            //discard card
    #####: 1212:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1213:            return 0;
        -: 1214:            
        -: 1215:        case sea_hag:
    #####: 1216:            for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1217:                if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1218:                    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];                state->deckCount[i]--;
    #####: 1219:                    state->discardCount[i]++;
    #####: 1220:                    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1221:                }
    #####: 1222:            }
    #####: 1223:            return 0;
        -: 1224:            
        -: 1225:        case treasure_map:
        -: 1226:            //search hand for another treasure_map
    #####: 1227:            index = -1;
    #####: 1228:            for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1229:            {
    #####: 1230:                if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1231:                {
    #####: 1232:                    index = i;
    #####: 1233:                    break;
        -: 1234:                }
    #####: 1235:            }
    #####: 1236:            if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1237:            {
        -: 1238:                //trash both treasure cards
    #####: 1239:                discardCard(handPos, currentPlayer, state, 1);
    #####: 1240:                discardCard(index, currentPlayer, state, 1);
        -: 1241:                
        -: 1242:                //gain 4 Gold cards
    #####: 1243:                for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1244:                {
    #####: 1245:                    gainCard(gold, state, 1, currentPlayer);
    #####: 1246:                }
        -: 1247:                
        -: 1248:                //return success
    #####: 1249:                return 1;
        -: 1250:            }
        -: 1251:            
        -: 1252:            //no second treasure_map found in hand
    #####: 1253:            return -1;
        -: 1254:    }
        -: 1255:    
    #####: 1256:    return -1;
      220: 1257:}
        -: 1258:
function discardCard called 656 returned 100% blocks executed 100%
        -: 1259:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1260:{
        -: 1261:    
        -: 1262:    //if card is not trashed, added to Played pile
      656: 1263:    if (trashFlag < 1)
branch  0 taken 410
branch  1 taken 246
        -: 1264:    {
        -: 1265:        //add card to played pile
      410: 1266:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
      410: 1267:        state->playedCardCount++;
      410: 1268:    }
        -: 1269:    
        -: 1270:    //set played card to -1
      656: 1271:    state->hand[currentPlayer][handPos] = -1;
        -: 1272:    
        -: 1273:    //remove card from player's hand
      656: 1274:    if ( handPos == (state->handCount[currentPlayer] - 1) )     //last card in hand array is played
branch  0 taken 80
branch  1 taken 576
        -: 1275:    {
        -: 1276:        //reduce number of cards in hand
       80: 1277:        state->handCount[currentPlayer]--;
       80: 1278:    }
      576: 1279:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 16
branch  1 taken 560
        -: 1280:    {
        -: 1281:        //reduce number of cards in hand
       16: 1282:        state->handCount[currentPlayer]--;
       16: 1283:    }
        -: 1284:    else
        -: 1285:    {
        -: 1286:        //replace discarded card with last card in hand
      560: 1287:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1288:        //set last card to -1
      560: 1289:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1290:        //reduce number of cards in hand
      560: 1291:        state->handCount[currentPlayer]--;
        -: 1292:    }
        -: 1293:    
      656: 1294:    return 0;
        -: 1295:}
        -: 1296:
function gainCard called 816 returned 100% blocks executed 100%
        -: 1297:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1298:{
        -: 1299:    //Note: supplyPos is enum of choosen card
        -: 1300:    
        -: 1301:    //check if supply pile is empty (0) or card is not used in game (-1)
      816: 1302:    if ( supplyCount(supplyPos, state) < 1 )
branch  0 taken 102
branch  1 taken 714
        -: 1303:    {
      102: 1304:        return -1;
        -: 1305:    }
        -: 1306:    
        -: 1307:    //added card for [whoseTurn] current player:
        -: 1308:    // toFlag = 0 : add to discard
        -: 1309:    // toFlag = 1 : add to deck
        -: 1310:    // toFlag = 2 : add to hand
        -: 1311:    
      714: 1312:    if (toFlag == 1)
branch  0 taken 238
branch  1 taken 476
        -: 1313:    {
      238: 1314:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
      238: 1315:        state->deckCount[player]++;
      238: 1316:    }
      476: 1317:    else if (toFlag == 2)
branch  0 taken 238
branch  1 taken 238
        -: 1318:    {
      238: 1319:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
      238: 1320:        state->handCount[player]++;
      238: 1321:    }
        -: 1322:    else
        -: 1323:    {
      238: 1324:        state->discard[player][ state->discardCount[player] ] = supplyPos;
      238: 1325:        state->discardCount[player]++;
        -: 1326:    }
        -: 1327:    
        -: 1328:    //decrease number in supply pile
      714: 1329:    state->supplyCount[supplyPos]--;
        -: 1330:    
      714: 1331:    return 0;
      816: 1332:}
        -: 1333:
function updateCoins called 1428 returned 100% blocks executed 85%
        -: 1334:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1335:{
        -: 1336:    int i;
        -: 1337:    
        -: 1338:    //reset coin count
     1428: 1339:    state->coins = 0;
        -: 1340:    
        -: 1341:    //add coins for each Treasure card in player's hand
    17136: 1342:    for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 7140
branch  1 taken 1428
        -: 1343:    {
     7140: 1344:        if (state->hand[player][i] == copper)
branch  0 taken 5672
branch  1 taken 1468
        -: 1345:        {
     5672: 1346:            state->coins += 1;
     5672: 1347:        }
     1468: 1348:        else if (state->hand[player][i] == silver)
branch  0 taken 0
branch  1 taken 1468
        -: 1349:        {
    #####: 1350:            state->coins += 2;
    #####: 1351:        }
     1468: 1352:        else if (state->hand[player][i] == gold)
branch  0 taken 0
branch  1 taken 1468
        -: 1353:        {
    #####: 1354:            state->coins += 3;
    #####: 1355:        }
     7140: 1356:    }
        -: 1357:    
        -: 1358:    //add bonus
     1428: 1359:    state->coins += bonus;
        -: 1360:    
     1428: 1361:    return 0;
        -: 1362:}
        -: 1363:
        -: 1364://end of dominion.c
        -: 1365:
        -: 1366:
