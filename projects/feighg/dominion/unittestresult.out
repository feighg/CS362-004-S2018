TESTING isGameOver():
Testing game with 0 province cards.
return value: 1, Expected: 1 
Testing game with 1 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 2 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 3 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 4 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 5 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 6 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 7 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 8 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 9 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 10 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 11 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 12 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 0 province cards.
return value: 1, Expected: 1 
Testing game with 1 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 2 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 3 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 4 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 5 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 6 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 7 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 8 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 9 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 10 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 11 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 12 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
All tests passed!
File 'dominion.c'
Lines executed:51.01% of 643
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:38
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
   124083:    9:  if (*(int*)a > *(int*)b)
      336:   10:    return 1;
   123747:   11:  if (*(int*)a < *(int*)b)
    44304:   12:    return -1;
    79443:   13:  return 0;
   124083:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     4392:   44:  SelectStream(1);
     4392:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
     8784:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     4392:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    96624:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
   966240:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
   834480:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
   439200:   65:        }
    43920:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     4392:   73:  if (numPlayers == 2)
        -:   74:    {
     4392:   75:      state->supplyCount[curse] = 10;
     4392:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     4392:   87:  if (numPlayers == 2)
        -:   88:    {
     4392:   89:      state->supplyCount[estate] = 8;
     4392:   90:      state->supplyCount[duchy] = 8;
     4392:   91:      state->supplyCount[province] = 8;
     4392:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     4392:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     4392:  102:  state->supplyCount[silver] = 40;
     4392:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   184464:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
  1449360:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
   680760:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    83450:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
     8782:  115:		  if (numPlayers == 2){ 
     8782:  116:		    state->supplyCount[i] = 8; 
     8782:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
     8782:  119:		}
        -:  120:	      else
        -:  121:		{
    35138:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    43920:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   636840:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
   636840:  130:	}
        -:  131:
    87840:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    26352:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
     8784:  140:      state->deckCount[i] = 0;
    70272:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    26352:  143:	  state->deck[i][j] = estate;
    26352:  144:	  state->deckCount[i]++;
    26352:  145:	}
   140544:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    61488:  148:	  state->deck[i][j] = copper;
    61488:  149:	  state->deckCount[i]++;		
    61488:  150:	}
     8784:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    26352:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
     8784:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
     8784:  160:    }
        -:  161:
        -:  162:  //draw player hands
    26352:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     8784:  166:      state->handCount[i] = 0;
     8784:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
     8784:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
   245952:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
   118584:  178:      state->embargoTokens[i] = 0;
   118584:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     4392:  182:  state->outpostPlayed = 0;
     4392:  183:  state->phase = 0;
     4392:  184:  state->numActions = 1;
     4392:  185:  state->numBuys = 1;
     4392:  186:  state->playedCardCount = 0;
     4392:  187:  state->whoseTurn = 0;
     4392:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    52704:  192:  for (it = 0; it < 5; it++){
    21960:  193:    drawCard(state->whoseTurn, state);
    21960:  194:  }
        -:  195:
     4392:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     4392:  198:  return 0;
     4392:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    18373:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    18373:  209:  if (state->deckCount[player] < 1)
     9554:  210:    return -1;
     8819:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   194278:  214:  while (state->deckCount[player] > 0) {
    88320:  215:    card = floor(Random() * state->deckCount[player]);
    88320:  216:    newDeck[newDeckPos] = state->deck[player][card];
    88320:  217:    newDeckPos++;
   619244:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   221302:  219:      state->deck[player][i] = state->deck[player][i+1];
   221302:  220:    }
    88320:  221:    state->deckCount[player]--;
        -:  222:  }
   194278:  223:  for (i = 0; i < newDeckPos; i++) {
    88320:  224:    state->deck[player][i] = newDeck[i];
    88320:  225:    state->deckCount[player]++;
    88320:  226:  }
        -:  227:
     8819:  228:  return 0;
    18373:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
       61:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       61:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
       61:  243:  if ( state->numActions < 1 )
        -:  244:    {
       36:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
       25:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
       32:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
       18:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
        7:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        7:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        7:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
        7:  269:  return 0;
       61:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
       73:  280:  who = state->whoseTurn;
        -:  281:
       73:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
       73:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
       73:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
       73:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
       73:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
       73:  299:    state->coins = (state->coins) - (getCost(supplyPos));
       73:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
       73:  308:  return 0;
       73:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
      536:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
     1128:  316:  int currentPlayer = whoseTurn(state);
     1128:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
     6479:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
      770:  326:  int count = 0;
        -:  327:
    11386:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
     5691:  330:      if (state->deck[player][i] == card) count++;
     4923:  331:    }
        -:  332:
    26858:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    14834:  335:      if (state->hand[player][i] == card) count++;
    12659:  336:    }
        -:  337:
    20356:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    10976:  340:      if (state->discard[player][i] == card) count++;
     9408:  341:    }
        -:  342:
      770:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
     1855:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
       77:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
      988:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
      417:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      417:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
      417:  359:  }
       77:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
       77:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
       39:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
       39:  365:  }
        -:  366:  else{
       38:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
       77:  370:  state->outpostPlayed = 0;
       77:  371:  state->phase = 0;
       77:  372:  state->numActions = 1;
       77:  373:  state->coins = 0;
       77:  374:  state->numBuys = 1;
       77:  375:  state->playedCardCount = 0;
       77:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
      924:  380:  for (k = 0; k < 5; k++){
      385:  381:    drawCard(state->whoseTurn, state);//Draw a card
      385:  382:  }
        -:  383:
        -:  384:  //Update money
       77:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
       77:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
      445:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
      152:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
      293:  401:  j = 0;
    15236:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
     7325:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
      432:  406:	  j++;
      432:  407:	}
     7325:  408:    }
      293:  409:  if ( j >= 3)
        -:  410:    {
       72:  411:      return 1;
        -:  412:    }
        -:  413:
      221:  414:  return 0;
      445:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
      154:  420:  int score = 0;
        -:  421:  //score from hand
     3928:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
     2126:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
     2095:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
     2098:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
     2103:  427:      if (state->hand[player][i] == province) { score = score + 6; };
     2106:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
     2110:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     1810:  430:    }
        -:  431:
        -:  432:  //score from discard
     2264:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
     1138:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
     1140:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
     1138:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
     1142:  438:      if (state->discard[player][i] == province) { score = score + 6; };
     1138:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
     1138:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
      978:  441:    }
        -:  442:
        -:  443:  //score from deck
     2264:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
     1138:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
     1141:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
     1138:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
     1140:  449:      if (state->deck[player][i] == province) { score = score + 6; };
     1138:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
     1138:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
      978:  452:    }
        -:  453:
      154:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    27860:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    11084:  533:    for (i = 0; i < state->discardCount[player];i++){
      480:  534:      state->deck[player][i] = state->discard[player][i];
      480:  535:      state->discard[player][i] = -1;
      480:  536:    }
        -:  537:
     5062:  538:    state->deckCount[player] = state->discardCount[player];
     5062:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     5062:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     5062:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     5062:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     5062:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     5062:  559:    if (deckCounter == 0)
     5027:  560:      return -1;
        -:  561:
       35:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       35:  563:    state->deckCount[player]--;
       35:  564:    state->handCount[player]++;//Increment hand count
       35:  565:  }
        -:  566:
        -:  567:  else{
    22798:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    22798:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    22798:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    22798:  576:    state->deckCount[player]--;
    22798:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    22833:  580:  return 0;
    27860:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
      146:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
       32:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
       70:  598:      return 3;
        -:  599:    case gold:
       28:  600:      return 6;
        -:  601:    case adventurer:
        8:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
        8:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
      146:  644:}
        -:  645:
        -:  646://smithy function to introduce a bug
        -:  647:int smithyfun(int currentPlayer, struct gameState *state, int handPos){
        -:  648:  //+3 Cards
        -:  649:  int i;
      328:  650:  for (i = 0; i <= 3; i++)
        -:  651:  {
      131:  652:    drawCard(currentPlayer, state);
      131:  653:  }
        -:  654:      
        -:  655:      //discard card from hand
       33:  656:      discardCard(handPos, currentPlayer, state, 0);
       33:  657:      return 0;
        -:  658:}
        -:  659:
        -:  660://adventurer function to introduce a bug
        -:  661:int adventurerfun(int currentPlayer, struct gameState *state){
        -:  662:    int cardDrawn;
        -:  663:    int temphand[MAX_HAND];
2291246309455167524:  664:    int drawntreasure = 0;
2291246309455167524:  665:    int z = 0;
        -:  666:
10104103169071345576:  667:  while(drawntreasure <= 2){
72057701412114902:  668:      if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
17981539013:  669:          shuffle(currentPlayer, state);
17981539013:  670:      }
7018965447127851741:  671:  drawCard(currentPlayer, state);
7018965447127851741:  672:  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
14469171020717090749:  673:  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    28313:  674:  drawntreasure++;
        -:  675:  else{
     4494:  676:  temphand[z]=cardDrawn;
     4494:  677:  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     4494:  678:  z++;
        -:  679:  }
        -:  680:}
        -:  681:    
     9104:  682:    while(z-1>=0){
     4494:  683:  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     4494:  684:      z=z-1;
        -:  685:    }
       58:  686:    return 0;
        -:  687:}
        -:  688:
        -:  689:int villagefun(int handPos, int currentPlayer, struct gameState *state){
        -:  690:        //+1 Card
        3:  691:        drawCard(currentPlayer, state);
        -:  692:        
        -:  693:        //+2 Actions
        3:  694:        state->numActions = state->numActions + 2;
        -:  695:        
        -:  696:        //discard played card from hand
        -:  697:        //discardCard(handPos, currentPlayer, state, 0);
        3:  698:        return 0;
        -:  699:}
        -:  700:
        -:  701:int great_hallfun(int currentPlayer, struct gameState *state, int handPos){
        -:  702:        //+1 Card
    #####:  703:        drawCard(currentPlayer, state);
        -:  704:        
        -:  705:        //+1 Actions
    #####:  706:        state->numActions++;
        -:  707:        
        -:  708:        //discard card from hand
    #####:  709:        discardCard(handPos, currentPlayer, state, 0);
    #####:  710:        return 0;
        -:  711:}
        -:  712:
        -:  713:int stewardfun(int choice1, int choice2, int choice3, int handPos, int currentPlayer, struct gameState *state){
        -:  714:
       60:  715:  if (choice1 == 1)
        -:  716:	{
        -:  717:	  //+2 cards
       20:  718:	  drawCard(currentPlayer, state);
       20:  719:	  drawCard(currentPlayer, state);
       20:  720:	}
       40:  721:      else if (choice2 == 2)
        -:  722:	{
        -:  723:	  //+2 coins
    #####:  724:	  state->coins = state->coins + 2;
    #####:  725:	}
        -:  726:      else
        -:  727:	{
        -:  728:	  //trash 2 cards in hand
       40:  729:	  discardCard(choice2, currentPlayer, state, 1);
       40:  730:	  discardCard(choice3, currentPlayer, state, 1);
        -:  731:	}
        -:  732:			
        -:  733:      //discard card from hand
       60:  734:      discardCard(handPos, currentPlayer, state, 0);
       60:  735:      return 0;
        -:  736:}
        -:  737:
        -:  738:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  739:{
        -:  740:  int i;
        -:  741:  int j;
        -:  742:  int k;
        -:  743:  int x;
        -:  744:  int index;
       37:  745:  int currentPlayer = whoseTurn(state);
       37:  746:  int nextPlayer = currentPlayer + 1;
        -:  747:
       37:  748:  int tributeRevealedCards[2] = {-1, -1};
        -:  749:  int temphand[MAX_HAND];// moved above the if statement
       37:  750:  if (nextPlayer > (state->numPlayers - 1)){
        4:  751:    nextPlayer = 0;
        4:  752:  }
        -:  753:  
        -:  754:	
        -:  755:  //uses switch to select card and perform actions
       47:  756:  switch( card ) 
        -:  757:    {
        -:  758:    case adventurer:
        4:  759:      adventurerfun(currentPlayer, state);
        -:  760:			
        -:  761:    case council_room:
        -:  762:      //+4 Cards
      340:  763:      for (i = 0; i < 4; i++)
        -:  764:	{
      136:  765:	  drawCard(currentPlayer, state);
      136:  766:	}
        -:  767:			
        -:  768:      //+1 Buy
       34:  769:      state->numBuys++;
        -:  770:			
        -:  771:      //Each other player draws a card
      204:  772:      for (i = 0; i < state->numPlayers; i++)
        -:  773:	{
       68:  774:	  if ( i != currentPlayer )
        -:  775:	    {
       34:  776:	      drawCard(i, state);
       34:  777:	    }
       68:  778:	}
        -:  779:			
        -:  780:      //put played card in played card pile
       34:  781:      discardCard(handPos, currentPlayer, state, 0);
        -:  782:			
       34:  783:      return 0;
        -:  784:			
        -:  785:    case feast:
        -:  786:      //gain card with cost up to 5
        -:  787:      //Backup hand
    #####:  788:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  789:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  790:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  791:      }
        -:  792:      //Backup hand
        -:  793:
        -:  794:      //Update Coins for Buy
    #####:  795:      updateCoins(currentPlayer, state, 5);
    #####:  796:      x = 1;//Condition to loop on
    #####:  797:      while( x == 1) {//Buy one card
    #####:  798:	if (supplyCount(choice1, state) <= 0){
        -:  799:	  if (DEBUG)
        -:  800:	    printf("None of that card left, sorry!\n");
        -:  801:
        -:  802:	  if (DEBUG){
        -:  803:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  804:	  }
    #####:  805:	}
    #####:  806:	else if (state->coins < getCost(choice1)){
    #####:  807:	  printf("That card is too expensive!\n");
        -:  808:
        -:  809:	  if (DEBUG){
        -:  810:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  811:	  }
    #####:  812:	}
        -:  813:	else{
        -:  814:
        -:  815:	  if (DEBUG){
        -:  816:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  817:	  }
        -:  818:
    #####:  819:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  820:	  x = 0;//No more buying cards
        -:  821:
        -:  822:	  if (DEBUG){
        -:  823:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  824:	  }
        -:  825:
        -:  826:	}
        -:  827:      }     
        -:  828:
        -:  829:      //Reset Hand
    #####:  830:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  831:	state->hand[currentPlayer][i] = temphand[i];
    #####:  832:	temphand[i] = -1;
    #####:  833:      }
        -:  834:      //Reset Hand
        -:  835:      			
    #####:  836:      return 0;
        -:  837:			
        -:  838:    case gardens:
    #####:  839:      return -1;
        -:  840:			
        -:  841:    case mine:
    #####:  842:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  843:
    #####:  844:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  845:	{
    #####:  846:	  return -1;
        -:  847:	}
        -:  848:		
    #####:  849:      if (choice2 > treasure_map || choice2 < curse)
        -:  850:	{
    #####:  851:	  return -1;
        -:  852:	}
        -:  853:
    #####:  854:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  855:	{
    #####:  856:	  return -1;
        -:  857:	}
        -:  858:
    #####:  859:      gainCard(choice2, state, 2, currentPlayer);
        -:  860:
        -:  861:      //discard card from hand
    #####:  862:      discardCard(handPos, currentPlayer, state, 0);
        -:  863:
        -:  864:      //discard trashed card
    #####:  865:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  866:	{
    #####:  867:	  if (state->hand[currentPlayer][i] == j)
        -:  868:	    {
    #####:  869:	      discardCard(i, currentPlayer, state, 0);			
    #####:  870:	      break;
        -:  871:	    }
    #####:  872:	}
        -:  873:			
    #####:  874:      return 0;
        -:  875:			
        -:  876:    case remodel:
    #####:  877:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  878:
    #####:  879:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  880:	{
    #####:  881:	  return -1;
        -:  882:	}
        -:  883:
    #####:  884:      gainCard(choice2, state, 0, currentPlayer);
        -:  885:
        -:  886:      //discard card from hand
    #####:  887:      discardCard(handPos, currentPlayer, state, 0);
        -:  888:
        -:  889:      //discard trashed card
    #####:  890:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  891:	{
    #####:  892:	  if (state->hand[currentPlayer][i] == j)
        -:  893:	    {
    #####:  894:	      discardCard(i, currentPlayer, state, 0);			
    #####:  895:	      break;
        -:  896:	    }
    #####:  897:	}
        -:  898:
        -:  899:
    #####:  900:      return 0;
        -:  901:		
        -:  902:    case smithy:
        -:  903:      //+3 Cards
        3:  904:      smithyfun(currentPlayer, state, handPos);
        -:  905:
        -:  906:    case village:
        3:  907:      villagefun(handPos, currentPlayer, state);
        -:  908:		
        -:  909:    case baron:
        3:  910:      state->numBuys++;//Increase buys by 1!
        3:  911:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  912:	int p = 0;//Iterator for hand!
    #####:  913:	int card_not_discarded = 1;//Flag for discard set!
    #####:  914:	while(card_not_discarded){
    #####:  915:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  916:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  917:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  918:	    state->discardCount[currentPlayer]++;
    #####:  919:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  920:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  921:	    }
    #####:  922:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  923:	    state->handCount[currentPlayer]--;
    #####:  924:	    card_not_discarded = 0;//Exit the loop
    #####:  925:	  }
    #####:  926:	  else if (p > state->handCount[currentPlayer]){
        -:  927:	    if(DEBUG) {
        -:  928:	      printf("No estate cards in your hand, invalid choice\n");
        -:  929:	      printf("Must gain an estate if there are any\n");
        -:  930:	    }
    #####:  931:	    if (supplyCount(estate, state) > 0){
    #####:  932:	      gainCard(estate, state, 0, currentPlayer);
    #####:  933:	      state->supplyCount[estate]--;//Decrement estates
    #####:  934:	      if (supplyCount(estate, state) == 0){
    #####:  935:		isGameOver(state);
    #####:  936:	      }
    #####:  937:	    }
    #####:  938:	    card_not_discarded = 0;//Exit the loop
    #####:  939:	  }
        -:  940:			    
        -:  941:	  else{
    #####:  942:	    p++;//Next card
        -:  943:	  }
        -:  944:	}
    #####:  945:      }
        -:  946:			    
        -:  947:      else{
        3:  948:	if (supplyCount(estate, state) > 0){
        3:  949:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
        3:  950:	  state->supplyCount[estate]--;//Decrement Estates
        3:  951:	  if (supplyCount(estate, state) == 0){
    #####:  952:	    isGameOver(state);
    #####:  953:	  }
        3:  954:	}
        -:  955:      }
        -:  956:	    
        -:  957:      
        3:  958:      return 0;
        -:  959:		
        -:  960:    case great_hall:
    #####:  961:      great_hallfun(currentPlayer, state, handPos);
        -:  962:		
        -:  963:    case minion:
        -:  964:      //+1 action
    #####:  965:      state->numActions++;
        -:  966:			
        -:  967:      //discard card from hand
    #####:  968:      discardCard(handPos, currentPlayer, state, 0);
        -:  969:			
    #####:  970:      if (choice1)		//+2 coins
        -:  971:	{
    #####:  972:	  state->coins = state->coins + 2;
    #####:  973:	}
        -:  974:			
    #####:  975:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  976:	{
        -:  977:	  //discard hand
    #####:  978:	  while(numHandCards(state) > 0)
        -:  979:	    {
    #####:  980:	      discardCard(handPos, currentPlayer, state, 0);
        -:  981:	    }
        -:  982:				
        -:  983:	  //draw 4
    #####:  984:	  for (i = 0; i < 4; i++)
        -:  985:	    {
    #####:  986:	      drawCard(currentPlayer, state);
    #####:  987:	    }
        -:  988:				
        -:  989:	  //other players discard hand and redraw if hand size > 4
    #####:  990:	  for (i = 0; i < state->numPlayers; i++)
        -:  991:	    {
    #####:  992:	      if (i != currentPlayer)
        -:  993:		{
    #####:  994:		  if ( state->handCount[i] > 4 )
        -:  995:		    {
        -:  996:		      //discard hand
    #####:  997:		      while( state->handCount[i] > 0 )
        -:  998:			{
    #####:  999:			  discardCard(handPos, i, state, 0);
        -: 1000:			}
        -: 1001:							
        -: 1002:		      //draw 4
    #####: 1003:		      for (j = 0; j < 4; j++)
        -: 1004:			{
    #####: 1005:			  drawCard(i, state);
    #####: 1006:			}
    #####: 1007:		    }
    #####: 1008:		}
    #####: 1009:	    }
        -: 1010:				
    #####: 1011:	}
    #####: 1012:      return 0;
        -: 1013:		
        -: 1014:    case steward:
    #####: 1015:      stewardfun(choice1, choice2, choice3, handPos, currentPlayer, state);
        -: 1016:
        -: 1017:		
        -: 1018:    case tribute:
    #####: 1019:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1020:	if (state->deckCount[nextPlayer] > 0){
    #####: 1021:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1022:	  state->deckCount[nextPlayer]--;
    #####: 1023:	}
    #####: 1024:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1025:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1026:	  state->discardCount[nextPlayer]--;
    #####: 1027:	}
        -: 1028:	else{
        -: 1029:	  //No Card to Reveal
        -: 1030:	  if (DEBUG){
        -: 1031:	    printf("No cards to reveal\n");
        -: 1032:	  }
        -: 1033:	}
    #####: 1034:      }
        -: 1035:	    
        -: 1036:      else{
    #####: 1037:	if (state->deckCount[nextPlayer] == 0){
    #####: 1038:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1039:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1040:	    state->deckCount[nextPlayer]++;
    #####: 1041:	    state->discard[nextPlayer][i] = -1;
    #####: 1042:	    state->discardCount[nextPlayer]--;
    #####: 1043:	  }
        -: 1044:			    
    #####: 1045:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1046:	} 
    #####: 1047:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1048:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1049:	state->deckCount[nextPlayer]--;
    #####: 1050:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1051:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1052:	state->deckCount[nextPlayer]--;
        -: 1053:      }    
        -: 1054:		       
    #####: 1055:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1056:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1057:	state->playedCardCount++;
    #####: 1058:	tributeRevealedCards[1] = -1;
    #####: 1059:      }
        -: 1060:
    #####: 1061:      for (i = 0; i <= 2; i ++){
    #####: 1062:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1063:	  state->coins += 2;
    #####: 1064:	}
        -: 1065:		    
    #####: 1066:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1067:	  drawCard(currentPlayer, state);
    #####: 1068:	  drawCard(currentPlayer, state);
    #####: 1069:	}
        -: 1070:	else{//Action Card
    #####: 1071:	  state->numActions = state->numActions + 2;
        -: 1072:	}
    #####: 1073:      }
        -: 1074:	    
    #####: 1075:      return 0;
        -: 1076:		
        -: 1077:    case ambassador:
    #####: 1078:      j = 0;		//used to check if player has enough cards to discard
        -: 1079:
    #####: 1080:      if (choice2 > 2 || choice2 < 0)
        -: 1081:	{
    #####: 1082:	  return -1;				
        -: 1083:	}
        -: 1084:
    #####: 1085:      if (choice1 == handPos)
        -: 1086:	{
    #####: 1087:	  return -1;
        -: 1088:	}
        -: 1089:
    #####: 1090:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1091:	{
    #####: 1092:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1093:	    {
    #####: 1094:	      j++;
    #####: 1095:	    }
    #####: 1096:	}
    #####: 1097:      if (j < choice2)
        -: 1098:	{
    #####: 1099:	  return -1;				
        -: 1100:	}
        -: 1101:
        -: 1102:      if (DEBUG) 
        -: 1103:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1104:
        -: 1105:      //increase supply count for choosen card by amount being discarded
    #####: 1106:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1107:			
        -: 1108:      //each other player gains a copy of revealed card
    #####: 1109:      for (i = 0; i < state->numPlayers; i++)
        -: 1110:	{
    #####: 1111:	  if (i != currentPlayer)
        -: 1112:	    {
    #####: 1113:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1114:	    }
    #####: 1115:	}
        -: 1116:
        -: 1117:      //discard played card from hand
    #####: 1118:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1119:
        -: 1120:      //trash copies of cards returned to supply
    #####: 1121:      for (j = 0; j < choice2; j++)
        -: 1122:	{
    #####: 1123:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1124:	    {
    #####: 1125:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1126:		{
    #####: 1127:		  discardCard(i, currentPlayer, state, 1);
    #####: 1128:		  break;
        -: 1129:		}
    #####: 1130:	    }
    #####: 1131:	}			
        -: 1132:
    #####: 1133:      return 0;
        -: 1134:		
        -: 1135:    case cutpurse:
        -: 1136:
    #####: 1137:      updateCoins(currentPlayer, state, 2);
    #####: 1138:      for (i = 0; i < state->numPlayers; i++)
        -: 1139:	{
    #####: 1140:	  if (i != currentPlayer)
        -: 1141:	    {
    #####: 1142:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1143:		{
    #####: 1144:		  if (state->hand[i][j] == copper)
        -: 1145:		    {
    #####: 1146:		      discardCard(j, i, state, 0);
    #####: 1147:		      break;
        -: 1148:		    }
    #####: 1149:		  if (j == state->handCount[i])
        -: 1150:		    {
    #####: 1151:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1152:			{
        -: 1153:			  if (DEBUG)
        -: 1154:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1155:			}	
    #####: 1156:		      break;
        -: 1157:		    }		
    #####: 1158:		}
        -: 1159:					
    #####: 1160:	    }
        -: 1161:				
    #####: 1162:	}				
        -: 1163:
        -: 1164:      //discard played card from hand
    #####: 1165:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1166:
    #####: 1167:      return 0;
        -: 1168:
        -: 1169:		
        -: 1170:    case embargo: 
        -: 1171:      //+2 Coins
    #####: 1172:      state->coins = state->coins + 2;
        -: 1173:			
        -: 1174:      //see if selected pile is in play
    #####: 1175:      if ( state->supplyCount[choice1] == -1 )
        -: 1176:	{
    #####: 1177:	  return -1;
        -: 1178:	}
        -: 1179:			
        -: 1180:      //add embargo token to selected supply pile
    #####: 1181:      state->embargoTokens[choice1]++;
        -: 1182:			
        -: 1183:      //trash card
    #####: 1184:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1185:      return 0;
        -: 1186:		
        -: 1187:    case outpost:
        -: 1188:      //set outpost flag
    #####: 1189:      state->outpostPlayed++;
        -: 1190:			
        -: 1191:      //discard card
    #####: 1192:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1193:      return 0;
        -: 1194:		
        -: 1195:    case salvager:
        -: 1196:      //+1 buy
    #####: 1197:      state->numBuys++;
        -: 1198:			
    #####: 1199:      if (choice1)
        -: 1200:	{
        -: 1201:	  //gain coins equal to trashed card
    #####: 1202:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1203:	  //trash card
    #####: 1204:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1205:	}
        -: 1206:			
        -: 1207:      //discard card
    #####: 1208:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1209:      return 0;
        -: 1210:		
        -: 1211:    case sea_hag:
    #####: 1212:      for (i = 0; i < state->numPlayers; i++){
    #####: 1213:	if (i != currentPlayer){
    #####: 1214:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1215:	  state->discardCount[i]++;
    #####: 1216:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1217:	}
    #####: 1218:      }
    #####: 1219:      return 0;
        -: 1220:		
        -: 1221:    case treasure_map:
        -: 1222:      //search hand for another treasure_map
    #####: 1223:      index = -1;
    #####: 1224:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1225:	{
    #####: 1226:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1227:	    {
    #####: 1228:	      index = i;
    #####: 1229:	      break;
        -: 1230:	    }
    #####: 1231:	}
    #####: 1232:      if (index > -1)
        -: 1233:	{
        -: 1234:	  //trash both treasure cards
    #####: 1235:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1236:	  discardCard(index, currentPlayer, state, 1);
        -: 1237:
        -: 1238:	  //gain 4 Gold cards
    #####: 1239:	  for (i = 0; i < 4; i++)
        -: 1240:	    {
    #####: 1241:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1242:	    }
        -: 1243:				
        -: 1244:	  //return success
    #####: 1245:	  return 1;
        -: 1246:	}
        -: 1247:			
        -: 1248:      //no second treasure_map found in hand
    #####: 1249:      return -1;
        -: 1250:    }
        -: 1251:	
    #####: 1252:  return -1;
       37: 1253:}
        -: 1254:
        -: 1255:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1256:{
        -: 1257:	
        -: 1258:  //if card is not trashed, added to Played pile 
      408: 1259:  if (trashFlag < 1)
        -: 1260:    {
        -: 1261:      //add card to played pile
      228: 1262:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      228: 1263:      state->playedCardCount++;
      228: 1264:    }
        -: 1265:	
        -: 1266:  //set played card to -1
      408: 1267:  state->hand[currentPlayer][handPos] = -1;
        -: 1268:	
        -: 1269:  //remove card from player's hand
      408: 1270:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1271:    {
        -: 1272:      //reduce number of cards in hand
       59: 1273:      state->handCount[currentPlayer]--;
       59: 1274:    }
      349: 1275:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1276:    {
        -: 1277:      //reduce number of cards in hand
       32: 1278:      state->handCount[currentPlayer]--;
       32: 1279:    }
        -: 1280:  else 	
        -: 1281:    {
        -: 1282:      //replace discarded card with last card in hand
      317: 1283:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1284:      //set last card to -1
      317: 1285:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1286:      //reduce number of cards in hand
      317: 1287:      state->handCount[currentPlayer]--;
        -: 1288:    }
        -: 1289:	
      408: 1290:  return 0;
        -: 1291:}
        -: 1292:
        -: 1293:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1294:{
        -: 1295:  //Note: supplyPos is enum of choosen card
        -: 1296:	
        -: 1297:  //check if supply pile is empty (0) or card is not used in game (-1)
     3408: 1298:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1299:    {
      476: 1300:      return -1;
        -: 1301:    }
        -: 1302:	
        -: 1303:  //added card for [whoseTurn] current player:
        -: 1304:  // toFlag = 0 : add to discard
        -: 1305:  // toFlag = 1 : add to deck
        -: 1306:  // toFlag = 2 : add to hand
        -: 1307:
     2932: 1308:  if (toFlag == 1)
        -: 1309:    {
     1190: 1310:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
     1190: 1311:      state->deckCount[player]++;
     1190: 1312:    }
     1742: 1313:  else if (toFlag == 2)
        -: 1314:    {
      952: 1315:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
      952: 1316:      state->handCount[player]++;
      952: 1317:    }
        -: 1318:  else
        -: 1319:    {
      790: 1320:      state->discard[player][ state->discardCount[player] ] = supplyPos;
      790: 1321:      state->discardCount[player]++;
        -: 1322:    }
        -: 1323:	
        -: 1324:  //decrease number in supply pile
     2932: 1325:  state->supplyCount[supplyPos]--;
        -: 1326:	 
     2932: 1327:  return 0;
     3408: 1328:}
        -: 1329:
        -: 1330:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1331:{
        -: 1332:  int i;
        -: 1333:	
        -: 1334:  //reset coin count
     4806: 1335:  state->coins = 0;
        -: 1336:
        -: 1337:  //add coins for each Treasure card in player's hand
    56416: 1338:  for (i = 0; i < state->handCount[player]; i++)
        -: 1339:    {
    23402: 1340:      if (state->hand[player][i] == copper)
        -: 1341:	{
    18090: 1342:	  state->coins += 1;
    18090: 1343:	}
     5312: 1344:      else if (state->hand[player][i] == silver)
        -: 1345:	{
      433: 1346:	  state->coins += 2;
      433: 1347:	}
     4879: 1348:      else if (state->hand[player][i] == gold)
        -: 1349:	{
      353: 1350:	  state->coins += 3;
      353: 1351:	}	
    23402: 1352:    }	
        -: 1353:
        -: 1354:  //add bonus
     4806: 1355:  state->coins += bonus;
        -: 1356:
     4806: 1357:  return 0;
        -: 1358:}
        -: 1359:
        -: 1360:
        -: 1361://end of dominion.c
        -: 1362:
TESTING scoreTest():
Playing with player 0, handPos 0
HandCount: 8, Expected: 7
test FAILED
DeckCount: 1, Expected: 2
test FAILED
PlayedCardCount: 1, Expected: 1
test passed
Playing with player 0, handPos 1
HandCount: 8, Expected: 7
test FAILED
DeckCount: 1, Expected: 2
test FAILED
PlayedCardCount: 1, Expected: 1
test passed
Playing with player 0, handPos 2
HandCount: 8, Expected: 7
test FAILED
DeckCount: 1, Expected: 2
test FAILED
PlayedCardCount: 1, Expected: 1
test passed
Playing with player 0, handPos 3
HandCount: 8, Expected: 7
test FAILED
DeckCount: 1, Expected: 2
test FAILED
PlayedCardCount: 1, Expected: 1
test passed
Playing with player 0, handPos 4
HandCount: 8, Expected: 7
test FAILED
DeckCount: 1, Expected: 2
test FAILED
PlayedCardCount: 1, Expected: 1
test passed
Playing with player 1, handPos 0
HandCount: 3, Expected: 2
test FAILED
DeckCount: 6, Expected: 7
test FAILED
PlayedCardCount: 1, Expected: 1
test passed
Playing with player 1, handPos 1
HandCount: 3, Expected: 2
test FAILED
DeckCount: 6, Expected: 7
test FAILED
PlayedCardCount: 1, Expected: 1
test passed
Playing with player 1, handPos 2
HandCount: 3, Expected: 2
test FAILED
DeckCount: 6, Expected: 7
test FAILED
PlayedCardCount: 1, Expected: 1
test passed
Playing with player 1, handPos 3
HandCount: 3, Expected: 2
test FAILED
DeckCount: 6, Expected: 7
test FAILED
PlayedCardCount: 1, Expected: 1
test passed
Playing with player 1, handPos 4
HandCount: 3, Expected: 2
test FAILED
DeckCount: 6, Expected: 7
test FAILED
PlayedCardCount: 1, Expected: 1
test passed
Tests failed.
File 'dominion.c'
Lines executed:51.01% of 643
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:39
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
   124363:    9:  if (*(int*)a > *(int*)b)
      336:   10:    return 1;
   124027:   11:  if (*(int*)a < *(int*)b)
    44404:   12:    return -1;
    79623:   13:  return 0;
   124363:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     4402:   44:  SelectStream(1);
     4402:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
     8804:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     4402:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    96844:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
   968440:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
   836380:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
   440200:   65:        }
    44020:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     4402:   73:  if (numPlayers == 2)
        -:   74:    {
     4402:   75:      state->supplyCount[curse] = 10;
     4402:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     4402:   87:  if (numPlayers == 2)
        -:   88:    {
     4402:   89:      state->supplyCount[estate] = 8;
     4402:   90:      state->supplyCount[duchy] = 8;
     4402:   91:      state->supplyCount[province] = 8;
     4402:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     4402:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     4402:  102:  state->supplyCount[silver] = 40;
     4402:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   184884:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
  1452660:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
   682310:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    83640:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
     8802:  115:		  if (numPlayers == 2){ 
     8802:  116:		    state->supplyCount[i] = 8; 
     8802:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
     8802:  119:		}
        -:  120:	      else
        -:  121:		{
    35218:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    44020:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   638290:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
   638290:  130:	}
        -:  131:
    88040:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    26412:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
     8804:  140:      state->deckCount[i] = 0;
    70432:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    26412:  143:	  state->deck[i][j] = estate;
    26412:  144:	  state->deckCount[i]++;
    26412:  145:	}
   140864:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    61628:  148:	  state->deck[i][j] = copper;
    61628:  149:	  state->deckCount[i]++;		
    61628:  150:	}
     8804:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    26412:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
     8804:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
     8804:  160:    }
        -:  161:
        -:  162:  //draw player hands
    26412:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     8804:  166:      state->handCount[i] = 0;
     8804:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
     8804:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
   246512:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
   118854:  178:      state->embargoTokens[i] = 0;
   118854:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     4402:  182:  state->outpostPlayed = 0;
     4402:  183:  state->phase = 0;
     4402:  184:  state->numActions = 1;
     4402:  185:  state->numBuys = 1;
     4402:  186:  state->playedCardCount = 0;
     4402:  187:  state->whoseTurn = 0;
     4402:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    52824:  192:  for (it = 0; it < 5; it++){
    22010:  193:    drawCard(state->whoseTurn, state);
    22010:  194:  }
        -:  195:
     4402:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     4402:  198:  return 0;
     4402:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    18393:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    18393:  209:  if (state->deckCount[player] < 1)
     9554:  210:    return -1;
     8839:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   194718:  214:  while (state->deckCount[player] > 0) {
    88520:  215:    card = floor(Random() * state->deckCount[player]);
    88520:  216:    newDeck[newDeckPos] = state->deck[player][card];
    88520:  217:    newDeckPos++;
   620644:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   221802:  219:      state->deck[player][i] = state->deck[player][i+1];
   221802:  220:    }
    88520:  221:    state->deckCount[player]--;
        -:  222:  }
   194718:  223:  for (i = 0; i < newDeckPos; i++) {
    88520:  224:    state->deck[player][i] = newDeck[i];
    88520:  225:    state->deckCount[player]++;
    88520:  226:  }
        -:  227:
     8839:  228:  return 0;
    18393:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
       61:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       61:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
       61:  243:  if ( state->numActions < 1 )
        -:  244:    {
       36:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
       25:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
       32:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
       18:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
        7:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        7:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        7:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
        7:  269:  return 0;
       61:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
       73:  280:  who = state->whoseTurn;
        -:  281:
       73:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
       73:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
       73:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
       73:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
       73:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
       73:  299:    state->coins = (state->coins) - (getCost(supplyPos));
       73:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
       73:  308:  return 0;
       73:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
      536:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
     1128:  316:  int currentPlayer = whoseTurn(state);
     1128:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
     6479:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
      770:  326:  int count = 0;
        -:  327:
    11386:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
     5691:  330:      if (state->deck[player][i] == card) count++;
     4923:  331:    }
        -:  332:
    26858:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    14834:  335:      if (state->hand[player][i] == card) count++;
    12659:  336:    }
        -:  337:
    20356:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    10976:  340:      if (state->discard[player][i] == card) count++;
     9408:  341:    }
        -:  342:
      770:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
     1855:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
       77:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
      988:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
      417:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      417:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
      417:  359:  }
       77:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
       77:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
       39:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
       39:  365:  }
        -:  366:  else{
       38:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
       77:  370:  state->outpostPlayed = 0;
       77:  371:  state->phase = 0;
       77:  372:  state->numActions = 1;
       77:  373:  state->coins = 0;
       77:  374:  state->numBuys = 1;
       77:  375:  state->playedCardCount = 0;
       77:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
      924:  380:  for (k = 0; k < 5; k++){
      385:  381:    drawCard(state->whoseTurn, state);//Draw a card
      385:  382:  }
        -:  383:
        -:  384:  //Update money
       77:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
       77:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
      445:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
      152:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
      293:  401:  j = 0;
    15236:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
     7325:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
      432:  406:	  j++;
      432:  407:	}
     7325:  408:    }
      293:  409:  if ( j >= 3)
        -:  410:    {
       72:  411:      return 1;
        -:  412:    }
        -:  413:
      221:  414:  return 0;
      445:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
      154:  420:  int score = 0;
        -:  421:  //score from hand
     3928:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
     2126:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
     2095:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
     2098:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
     2103:  427:      if (state->hand[player][i] == province) { score = score + 6; };
     2106:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
     2110:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     1810:  430:    }
        -:  431:
        -:  432:  //score from discard
     2264:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
     1138:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
     1140:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
     1138:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
     1142:  438:      if (state->discard[player][i] == province) { score = score + 6; };
     1138:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
     1138:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
      978:  441:    }
        -:  442:
        -:  443:  //score from deck
     2264:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
     1138:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
     1141:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
     1138:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
     1140:  449:      if (state->deck[player][i] == province) { score = score + 6; };
     1138:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
     1138:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
      978:  452:    }
        -:  453:
      154:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    27950:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    11084:  533:    for (i = 0; i < state->discardCount[player];i++){
      480:  534:      state->deck[player][i] = state->discard[player][i];
      480:  535:      state->discard[player][i] = -1;
      480:  536:    }
        -:  537:
     5062:  538:    state->deckCount[player] = state->discardCount[player];
     5062:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     5062:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     5062:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     5062:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     5062:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     5062:  559:    if (deckCounter == 0)
     5027:  560:      return -1;
        -:  561:
       35:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       35:  563:    state->deckCount[player]--;
       35:  564:    state->handCount[player]++;//Increment hand count
       35:  565:  }
        -:  566:
        -:  567:  else{
    22888:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    22888:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    22888:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    22888:  576:    state->deckCount[player]--;
    22888:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    22923:  580:  return 0;
    27950:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
      146:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
       32:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
       70:  598:      return 3;
        -:  599:    case gold:
       28:  600:      return 6;
        -:  601:    case adventurer:
        8:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
        8:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
      146:  644:}
        -:  645:
        -:  646://smithy function to introduce a bug
        -:  647:int smithyfun(int currentPlayer, struct gameState *state, int handPos){
        -:  648:  //+3 Cards
        -:  649:  int i;
      428:  650:  for (i = 0; i <= 3; i++)
        -:  651:  {
      171:  652:    drawCard(currentPlayer, state);
      171:  653:  }
        -:  654:      
        -:  655:      //discard card from hand
       43:  656:      discardCard(handPos, currentPlayer, state, 0);
       43:  657:      return 0;
        -:  658:}
        -:  659:
        -:  660://adventurer function to introduce a bug
        -:  661:int adventurerfun(int currentPlayer, struct gameState *state){
        -:  662:    int cardDrawn;
        -:  663:    int temphand[MAX_HAND];
2291246309455167524:  664:    int drawntreasure = 0;
2291246309455167524:  665:    int z = 0;
        -:  666:
10104103169071345576:  667:  while(drawntreasure <= 2){
72057701412114902:  668:      if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
17981539013:  669:          shuffle(currentPlayer, state);
17981539013:  670:      }
7018965447127851741:  671:  drawCard(currentPlayer, state);
7018965447127851741:  672:  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
14469171020717090749:  673:  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    28313:  674:  drawntreasure++;
        -:  675:  else{
     4494:  676:  temphand[z]=cardDrawn;
     4494:  677:  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     4494:  678:  z++;
        -:  679:  }
        -:  680:}
        -:  681:    
     9104:  682:    while(z-1>=0){
     4494:  683:  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     4494:  684:      z=z-1;
        -:  685:    }
       58:  686:    return 0;
        -:  687:}
        -:  688:
        -:  689:int villagefun(int handPos, int currentPlayer, struct gameState *state){
        -:  690:        //+1 Card
        3:  691:        drawCard(currentPlayer, state);
        -:  692:        
        -:  693:        //+2 Actions
        3:  694:        state->numActions = state->numActions + 2;
        -:  695:        
        -:  696:        //discard played card from hand
        -:  697:        //discardCard(handPos, currentPlayer, state, 0);
        3:  698:        return 0;
        -:  699:}
        -:  700:
        -:  701:int great_hallfun(int currentPlayer, struct gameState *state, int handPos){
        -:  702:        //+1 Card
    #####:  703:        drawCard(currentPlayer, state);
        -:  704:        
        -:  705:        //+1 Actions
    #####:  706:        state->numActions++;
        -:  707:        
        -:  708:        //discard card from hand
    #####:  709:        discardCard(handPos, currentPlayer, state, 0);
    #####:  710:        return 0;
        -:  711:}
        -:  712:
        -:  713:int stewardfun(int choice1, int choice2, int choice3, int handPos, int currentPlayer, struct gameState *state){
        -:  714:
       60:  715:  if (choice1 == 1)
        -:  716:	{
        -:  717:	  //+2 cards
       20:  718:	  drawCard(currentPlayer, state);
       20:  719:	  drawCard(currentPlayer, state);
       20:  720:	}
       40:  721:      else if (choice2 == 2)
        -:  722:	{
        -:  723:	  //+2 coins
    #####:  724:	  state->coins = state->coins + 2;
    #####:  725:	}
        -:  726:      else
        -:  727:	{
        -:  728:	  //trash 2 cards in hand
       40:  729:	  discardCard(choice2, currentPlayer, state, 1);
       40:  730:	  discardCard(choice3, currentPlayer, state, 1);
        -:  731:	}
        -:  732:			
        -:  733:      //discard card from hand
       60:  734:      discardCard(handPos, currentPlayer, state, 0);
       60:  735:      return 0;
        -:  736:}
        -:  737:
        -:  738:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  739:{
        -:  740:  int i;
        -:  741:  int j;
        -:  742:  int k;
        -:  743:  int x;
        -:  744:  int index;
       37:  745:  int currentPlayer = whoseTurn(state);
       37:  746:  int nextPlayer = currentPlayer + 1;
        -:  747:
       37:  748:  int tributeRevealedCards[2] = {-1, -1};
        -:  749:  int temphand[MAX_HAND];// moved above the if statement
       37:  750:  if (nextPlayer > (state->numPlayers - 1)){
        4:  751:    nextPlayer = 0;
        4:  752:  }
        -:  753:  
        -:  754:	
        -:  755:  //uses switch to select card and perform actions
       47:  756:  switch( card ) 
        -:  757:    {
        -:  758:    case adventurer:
        4:  759:      adventurerfun(currentPlayer, state);
        -:  760:			
        -:  761:    case council_room:
        -:  762:      //+4 Cards
      340:  763:      for (i = 0; i < 4; i++)
        -:  764:	{
      136:  765:	  drawCard(currentPlayer, state);
      136:  766:	}
        -:  767:			
        -:  768:      //+1 Buy
       34:  769:      state->numBuys++;
        -:  770:			
        -:  771:      //Each other player draws a card
      204:  772:      for (i = 0; i < state->numPlayers; i++)
        -:  773:	{
       68:  774:	  if ( i != currentPlayer )
        -:  775:	    {
       34:  776:	      drawCard(i, state);
       34:  777:	    }
       68:  778:	}
        -:  779:			
        -:  780:      //put played card in played card pile
       34:  781:      discardCard(handPos, currentPlayer, state, 0);
        -:  782:			
       34:  783:      return 0;
        -:  784:			
        -:  785:    case feast:
        -:  786:      //gain card with cost up to 5
        -:  787:      //Backup hand
    #####:  788:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  789:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  790:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  791:      }
        -:  792:      //Backup hand
        -:  793:
        -:  794:      //Update Coins for Buy
    #####:  795:      updateCoins(currentPlayer, state, 5);
    #####:  796:      x = 1;//Condition to loop on
    #####:  797:      while( x == 1) {//Buy one card
    #####:  798:	if (supplyCount(choice1, state) <= 0){
        -:  799:	  if (DEBUG)
        -:  800:	    printf("None of that card left, sorry!\n");
        -:  801:
        -:  802:	  if (DEBUG){
        -:  803:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  804:	  }
    #####:  805:	}
    #####:  806:	else if (state->coins < getCost(choice1)){
    #####:  807:	  printf("That card is too expensive!\n");
        -:  808:
        -:  809:	  if (DEBUG){
        -:  810:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  811:	  }
    #####:  812:	}
        -:  813:	else{
        -:  814:
        -:  815:	  if (DEBUG){
        -:  816:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  817:	  }
        -:  818:
    #####:  819:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  820:	  x = 0;//No more buying cards
        -:  821:
        -:  822:	  if (DEBUG){
        -:  823:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  824:	  }
        -:  825:
        -:  826:	}
        -:  827:      }     
        -:  828:
        -:  829:      //Reset Hand
    #####:  830:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  831:	state->hand[currentPlayer][i] = temphand[i];
    #####:  832:	temphand[i] = -1;
    #####:  833:      }
        -:  834:      //Reset Hand
        -:  835:      			
    #####:  836:      return 0;
        -:  837:			
        -:  838:    case gardens:
    #####:  839:      return -1;
        -:  840:			
        -:  841:    case mine:
    #####:  842:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  843:
    #####:  844:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  845:	{
    #####:  846:	  return -1;
        -:  847:	}
        -:  848:		
    #####:  849:      if (choice2 > treasure_map || choice2 < curse)
        -:  850:	{
    #####:  851:	  return -1;
        -:  852:	}
        -:  853:
    #####:  854:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  855:	{
    #####:  856:	  return -1;
        -:  857:	}
        -:  858:
    #####:  859:      gainCard(choice2, state, 2, currentPlayer);
        -:  860:
        -:  861:      //discard card from hand
    #####:  862:      discardCard(handPos, currentPlayer, state, 0);
        -:  863:
        -:  864:      //discard trashed card
    #####:  865:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  866:	{
    #####:  867:	  if (state->hand[currentPlayer][i] == j)
        -:  868:	    {
    #####:  869:	      discardCard(i, currentPlayer, state, 0);			
    #####:  870:	      break;
        -:  871:	    }
    #####:  872:	}
        -:  873:			
    #####:  874:      return 0;
        -:  875:			
        -:  876:    case remodel:
    #####:  877:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  878:
    #####:  879:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  880:	{
    #####:  881:	  return -1;
        -:  882:	}
        -:  883:
    #####:  884:      gainCard(choice2, state, 0, currentPlayer);
        -:  885:
        -:  886:      //discard card from hand
    #####:  887:      discardCard(handPos, currentPlayer, state, 0);
        -:  888:
        -:  889:      //discard trashed card
    #####:  890:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  891:	{
    #####:  892:	  if (state->hand[currentPlayer][i] == j)
        -:  893:	    {
    #####:  894:	      discardCard(i, currentPlayer, state, 0);			
    #####:  895:	      break;
        -:  896:	    }
    #####:  897:	}
        -:  898:
        -:  899:
    #####:  900:      return 0;
        -:  901:		
        -:  902:    case smithy:
        -:  903:      //+3 Cards
        3:  904:      smithyfun(currentPlayer, state, handPos);
        -:  905:
        -:  906:    case village:
        3:  907:      villagefun(handPos, currentPlayer, state);
        -:  908:		
        -:  909:    case baron:
        3:  910:      state->numBuys++;//Increase buys by 1!
        3:  911:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  912:	int p = 0;//Iterator for hand!
    #####:  913:	int card_not_discarded = 1;//Flag for discard set!
    #####:  914:	while(card_not_discarded){
    #####:  915:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  916:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  917:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  918:	    state->discardCount[currentPlayer]++;
    #####:  919:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  920:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  921:	    }
    #####:  922:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  923:	    state->handCount[currentPlayer]--;
    #####:  924:	    card_not_discarded = 0;//Exit the loop
    #####:  925:	  }
    #####:  926:	  else if (p > state->handCount[currentPlayer]){
        -:  927:	    if(DEBUG) {
        -:  928:	      printf("No estate cards in your hand, invalid choice\n");
        -:  929:	      printf("Must gain an estate if there are any\n");
        -:  930:	    }
    #####:  931:	    if (supplyCount(estate, state) > 0){
    #####:  932:	      gainCard(estate, state, 0, currentPlayer);
    #####:  933:	      state->supplyCount[estate]--;//Decrement estates
    #####:  934:	      if (supplyCount(estate, state) == 0){
    #####:  935:		isGameOver(state);
    #####:  936:	      }
    #####:  937:	    }
    #####:  938:	    card_not_discarded = 0;//Exit the loop
    #####:  939:	  }
        -:  940:			    
        -:  941:	  else{
    #####:  942:	    p++;//Next card
        -:  943:	  }
        -:  944:	}
    #####:  945:      }
        -:  946:			    
        -:  947:      else{
        3:  948:	if (supplyCount(estate, state) > 0){
        3:  949:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
        3:  950:	  state->supplyCount[estate]--;//Decrement Estates
        3:  951:	  if (supplyCount(estate, state) == 0){
    #####:  952:	    isGameOver(state);
    #####:  953:	  }
        3:  954:	}
        -:  955:      }
        -:  956:	    
        -:  957:      
        3:  958:      return 0;
        -:  959:		
        -:  960:    case great_hall:
    #####:  961:      great_hallfun(currentPlayer, state, handPos);
        -:  962:		
        -:  963:    case minion:
        -:  964:      //+1 action
    #####:  965:      state->numActions++;
        -:  966:			
        -:  967:      //discard card from hand
    #####:  968:      discardCard(handPos, currentPlayer, state, 0);
        -:  969:			
    #####:  970:      if (choice1)		//+2 coins
        -:  971:	{
    #####:  972:	  state->coins = state->coins + 2;
    #####:  973:	}
        -:  974:			
    #####:  975:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  976:	{
        -:  977:	  //discard hand
    #####:  978:	  while(numHandCards(state) > 0)
        -:  979:	    {
    #####:  980:	      discardCard(handPos, currentPlayer, state, 0);
        -:  981:	    }
        -:  982:				
        -:  983:	  //draw 4
    #####:  984:	  for (i = 0; i < 4; i++)
        -:  985:	    {
    #####:  986:	      drawCard(currentPlayer, state);
    #####:  987:	    }
        -:  988:				
        -:  989:	  //other players discard hand and redraw if hand size > 4
    #####:  990:	  for (i = 0; i < state->numPlayers; i++)
        -:  991:	    {
    #####:  992:	      if (i != currentPlayer)
        -:  993:		{
    #####:  994:		  if ( state->handCount[i] > 4 )
        -:  995:		    {
        -:  996:		      //discard hand
    #####:  997:		      while( state->handCount[i] > 0 )
        -:  998:			{
    #####:  999:			  discardCard(handPos, i, state, 0);
        -: 1000:			}
        -: 1001:							
        -: 1002:		      //draw 4
    #####: 1003:		      for (j = 0; j < 4; j++)
        -: 1004:			{
    #####: 1005:			  drawCard(i, state);
    #####: 1006:			}
    #####: 1007:		    }
    #####: 1008:		}
    #####: 1009:	    }
        -: 1010:				
    #####: 1011:	}
    #####: 1012:      return 0;
        -: 1013:		
        -: 1014:    case steward:
    #####: 1015:      stewardfun(choice1, choice2, choice3, handPos, currentPlayer, state);
        -: 1016:
        -: 1017:		
        -: 1018:    case tribute:
    #####: 1019:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1020:	if (state->deckCount[nextPlayer] > 0){
    #####: 1021:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1022:	  state->deckCount[nextPlayer]--;
    #####: 1023:	}
    #####: 1024:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1025:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1026:	  state->discardCount[nextPlayer]--;
    #####: 1027:	}
        -: 1028:	else{
        -: 1029:	  //No Card to Reveal
        -: 1030:	  if (DEBUG){
        -: 1031:	    printf("No cards to reveal\n");
        -: 1032:	  }
        -: 1033:	}
    #####: 1034:      }
        -: 1035:	    
        -: 1036:      else{
    #####: 1037:	if (state->deckCount[nextPlayer] == 0){
    #####: 1038:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1039:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1040:	    state->deckCount[nextPlayer]++;
    #####: 1041:	    state->discard[nextPlayer][i] = -1;
    #####: 1042:	    state->discardCount[nextPlayer]--;
    #####: 1043:	  }
        -: 1044:			    
    #####: 1045:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1046:	} 
    #####: 1047:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1048:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1049:	state->deckCount[nextPlayer]--;
    #####: 1050:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1051:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1052:	state->deckCount[nextPlayer]--;
        -: 1053:      }    
        -: 1054:		       
    #####: 1055:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1056:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1057:	state->playedCardCount++;
    #####: 1058:	tributeRevealedCards[1] = -1;
    #####: 1059:      }
        -: 1060:
    #####: 1061:      for (i = 0; i <= 2; i ++){
    #####: 1062:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1063:	  state->coins += 2;
    #####: 1064:	}
        -: 1065:		    
    #####: 1066:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1067:	  drawCard(currentPlayer, state);
    #####: 1068:	  drawCard(currentPlayer, state);
    #####: 1069:	}
        -: 1070:	else{//Action Card
    #####: 1071:	  state->numActions = state->numActions + 2;
        -: 1072:	}
    #####: 1073:      }
        -: 1074:	    
    #####: 1075:      return 0;
        -: 1076:		
        -: 1077:    case ambassador:
    #####: 1078:      j = 0;		//used to check if player has enough cards to discard
        -: 1079:
    #####: 1080:      if (choice2 > 2 || choice2 < 0)
        -: 1081:	{
    #####: 1082:	  return -1;				
        -: 1083:	}
        -: 1084:
    #####: 1085:      if (choice1 == handPos)
        -: 1086:	{
    #####: 1087:	  return -1;
        -: 1088:	}
        -: 1089:
    #####: 1090:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1091:	{
    #####: 1092:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1093:	    {
    #####: 1094:	      j++;
    #####: 1095:	    }
    #####: 1096:	}
    #####: 1097:      if (j < choice2)
        -: 1098:	{
    #####: 1099:	  return -1;				
        -: 1100:	}
        -: 1101:
        -: 1102:      if (DEBUG) 
        -: 1103:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1104:
        -: 1105:      //increase supply count for choosen card by amount being discarded
    #####: 1106:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1107:			
        -: 1108:      //each other player gains a copy of revealed card
    #####: 1109:      for (i = 0; i < state->numPlayers; i++)
        -: 1110:	{
    #####: 1111:	  if (i != currentPlayer)
        -: 1112:	    {
    #####: 1113:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1114:	    }
    #####: 1115:	}
        -: 1116:
        -: 1117:      //discard played card from hand
    #####: 1118:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1119:
        -: 1120:      //trash copies of cards returned to supply
    #####: 1121:      for (j = 0; j < choice2; j++)
        -: 1122:	{
    #####: 1123:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1124:	    {
    #####: 1125:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1126:		{
    #####: 1127:		  discardCard(i, currentPlayer, state, 1);
    #####: 1128:		  break;
        -: 1129:		}
    #####: 1130:	    }
    #####: 1131:	}			
        -: 1132:
    #####: 1133:      return 0;
        -: 1134:		
        -: 1135:    case cutpurse:
        -: 1136:
    #####: 1137:      updateCoins(currentPlayer, state, 2);
    #####: 1138:      for (i = 0; i < state->numPlayers; i++)
        -: 1139:	{
    #####: 1140:	  if (i != currentPlayer)
        -: 1141:	    {
    #####: 1142:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1143:		{
    #####: 1144:		  if (state->hand[i][j] == copper)
        -: 1145:		    {
    #####: 1146:		      discardCard(j, i, state, 0);
    #####: 1147:		      break;
        -: 1148:		    }
    #####: 1149:		  if (j == state->handCount[i])
        -: 1150:		    {
    #####: 1151:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1152:			{
        -: 1153:			  if (DEBUG)
        -: 1154:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1155:			}	
    #####: 1156:		      break;
        -: 1157:		    }		
    #####: 1158:		}
        -: 1159:					
    #####: 1160:	    }
        -: 1161:				
    #####: 1162:	}				
        -: 1163:
        -: 1164:      //discard played card from hand
    #####: 1165:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1166:
    #####: 1167:      return 0;
        -: 1168:
        -: 1169:		
        -: 1170:    case embargo: 
        -: 1171:      //+2 Coins
    #####: 1172:      state->coins = state->coins + 2;
        -: 1173:			
        -: 1174:      //see if selected pile is in play
    #####: 1175:      if ( state->supplyCount[choice1] == -1 )
        -: 1176:	{
    #####: 1177:	  return -1;
        -: 1178:	}
        -: 1179:			
        -: 1180:      //add embargo token to selected supply pile
    #####: 1181:      state->embargoTokens[choice1]++;
        -: 1182:			
        -: 1183:      //trash card
    #####: 1184:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1185:      return 0;
        -: 1186:		
        -: 1187:    case outpost:
        -: 1188:      //set outpost flag
    #####: 1189:      state->outpostPlayed++;
        -: 1190:			
        -: 1191:      //discard card
    #####: 1192:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1193:      return 0;
        -: 1194:		
        -: 1195:    case salvager:
        -: 1196:      //+1 buy
    #####: 1197:      state->numBuys++;
        -: 1198:			
    #####: 1199:      if (choice1)
        -: 1200:	{
        -: 1201:	  //gain coins equal to trashed card
    #####: 1202:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1203:	  //trash card
    #####: 1204:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1205:	}
        -: 1206:			
        -: 1207:      //discard card
    #####: 1208:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1209:      return 0;
        -: 1210:		
        -: 1211:    case sea_hag:
    #####: 1212:      for (i = 0; i < state->numPlayers; i++){
    #####: 1213:	if (i != currentPlayer){
    #####: 1214:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1215:	  state->discardCount[i]++;
    #####: 1216:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1217:	}
    #####: 1218:      }
    #####: 1219:      return 0;
        -: 1220:		
        -: 1221:    case treasure_map:
        -: 1222:      //search hand for another treasure_map
    #####: 1223:      index = -1;
    #####: 1224:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1225:	{
    #####: 1226:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1227:	    {
    #####: 1228:	      index = i;
    #####: 1229:	      break;
        -: 1230:	    }
    #####: 1231:	}
    #####: 1232:      if (index > -1)
        -: 1233:	{
        -: 1234:	  //trash both treasure cards
    #####: 1235:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1236:	  discardCard(index, currentPlayer, state, 1);
        -: 1237:
        -: 1238:	  //gain 4 Gold cards
    #####: 1239:	  for (i = 0; i < 4; i++)
        -: 1240:	    {
    #####: 1241:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1242:	    }
        -: 1243:				
        -: 1244:	  //return success
    #####: 1245:	  return 1;
        -: 1246:	}
        -: 1247:			
        -: 1248:      //no second treasure_map found in hand
    #####: 1249:      return -1;
        -: 1250:    }
        -: 1251:	
    #####: 1252:  return -1;
       37: 1253:}
        -: 1254:
        -: 1255:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1256:{
        -: 1257:	
        -: 1258:  //if card is not trashed, added to Played pile 
      418: 1259:  if (trashFlag < 1)
        -: 1260:    {
        -: 1261:      //add card to played pile
      238: 1262:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      238: 1263:      state->playedCardCount++;
      238: 1264:    }
        -: 1265:	
        -: 1266:  //set played card to -1
      418: 1267:  state->hand[currentPlayer][handPos] = -1;
        -: 1268:	
        -: 1269:  //remove card from player's hand
      418: 1270:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1271:    {
        -: 1272:      //reduce number of cards in hand
       60: 1273:      state->handCount[currentPlayer]--;
       60: 1274:    }
      358: 1275:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1276:    {
        -: 1277:      //reduce number of cards in hand
       32: 1278:      state->handCount[currentPlayer]--;
       32: 1279:    }
        -: 1280:  else 	
        -: 1281:    {
        -: 1282:      //replace discarded card with last card in hand
      326: 1283:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1284:      //set last card to -1
      326: 1285:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1286:      //reduce number of cards in hand
      326: 1287:      state->handCount[currentPlayer]--;
        -: 1288:    }
        -: 1289:	
      418: 1290:  return 0;
        -: 1291:}
        -: 1292:
        -: 1293:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1294:{
        -: 1295:  //Note: supplyPos is enum of choosen card
        -: 1296:	
        -: 1297:  //check if supply pile is empty (0) or card is not used in game (-1)
     3408: 1298:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1299:    {
      476: 1300:      return -1;
        -: 1301:    }
        -: 1302:	
        -: 1303:  //added card for [whoseTurn] current player:
        -: 1304:  // toFlag = 0 : add to discard
        -: 1305:  // toFlag = 1 : add to deck
        -: 1306:  // toFlag = 2 : add to hand
        -: 1307:
     2932: 1308:  if (toFlag == 1)
        -: 1309:    {
     1190: 1310:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
     1190: 1311:      state->deckCount[player]++;
     1190: 1312:    }
     1742: 1313:  else if (toFlag == 2)
        -: 1314:    {
      952: 1315:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
      952: 1316:      state->handCount[player]++;
      952: 1317:    }
        -: 1318:  else
        -: 1319:    {
      790: 1320:      state->discard[player][ state->discardCount[player] ] = supplyPos;
      790: 1321:      state->discardCount[player]++;
        -: 1322:    }
        -: 1323:	
        -: 1324:  //decrease number in supply pile
     2932: 1325:  state->supplyCount[supplyPos]--;
        -: 1326:	 
     2932: 1327:  return 0;
     3408: 1328:}
        -: 1329:
        -: 1330:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1331:{
        -: 1332:  int i;
        -: 1333:	
        -: 1334:  //reset coin count
     4816: 1335:  state->coins = 0;
        -: 1336:
        -: 1337:  //add coins for each Treasure card in player's hand
    56536: 1338:  for (i = 0; i < state->handCount[player]; i++)
        -: 1339:    {
    23452: 1340:      if (state->hand[player][i] == copper)
        -: 1341:	{
    18130: 1342:	  state->coins += 1;
    18130: 1343:	}
     5322: 1344:      else if (state->hand[player][i] == silver)
        -: 1345:	{
      433: 1346:	  state->coins += 2;
      433: 1347:	}
     4889: 1348:      else if (state->hand[player][i] == gold)
        -: 1349:	{
      353: 1350:	  state->coins += 3;
      353: 1351:	}	
    23452: 1352:    }	
        -: 1353:
        -: 1354:  //add bonus
     4816: 1355:  state->coins += bonus;
        -: 1356:
     4816: 1357:  return 0;
        -: 1358:}
        -: 1359:
        -: 1360:
        -: 1361://end of dominion.c
        -: 1362:
TESTING scoreTest():
Testing with choice1 = 0, choice2 = 1, choice3 = 1, handPos = 0
Handcount: 2, Expected: 2
test passed
Testing with choice1 = 1, choice2 = 2, choice3 = 2, handPos = 0
Handcount: 6, Expected: 6
test passed
Testing with choice1 = 2, choice2 = 3, choice3 = 3, handPos = 0
Coins: 4, Expected: 6
test FAILED
Handcount: 2, Expected: 4
test FAILED
Testing with choice1 = 0, choice2 = 1, choice3 = 1, handPos = 1
Handcount: 2, Expected: 2
test passed
Testing with choice1 = 1, choice2 = 2, choice3 = 2, handPos = 1
Handcount: 6, Expected: 6
test passed
Testing with choice1 = 2, choice2 = 3, choice3 = 3, handPos = 1
Coins: 4, Expected: 6
test FAILED
Handcount: 2, Expected: 4
test FAILED
Testing with choice1 = 0, choice2 = 1, choice3 = 1, handPos = 2
Handcount: 2, Expected: 2
test passed
Testing with choice1 = 1, choice2 = 2, choice3 = 2, handPos = 2
Handcount: 6, Expected: 6
test passed
Testing with choice1 = 2, choice2 = 3, choice3 = 3, handPos = 2
Coins: 4, Expected: 6
test FAILED
Handcount: 2, Expected: 4
test FAILED
Testing with choice1 = 0, choice2 = 1, choice3 = 1, handPos = 3
Handcount: 2, Expected: 2
test passed
Testing with choice1 = 1, choice2 = 2, choice3 = 2, handPos = 3
Handcount: 6, Expected: 6
test passed
Testing with choice1 = 2, choice2 = 3, choice3 = 3, handPos = 3
Coins: 4, Expected: 6
test FAILED
Handcount: 2, Expected: 4
test FAILED
Testing with choice1 = 0, choice2 = 1, choice3 = 1, handPos = 4
Handcount: 2, Expected: 2
test passed
Testing with choice1 = 1, choice2 = 2, choice3 = 2, handPos = 4
Handcount: 6, Expected: 6
test passed
Testing with choice1 = 2, choice2 = 3, choice3 = 3, handPos = 4
Coins: 4, Expected: 6
test FAILED
Handcount: 2, Expected: 4
test FAILED
Testing with choice1 = 0, choice2 = 1, choice3 = 1, handPos = 0
Handcount: -3, Expected: -3
test passed
Testing with choice1 = 1, choice2 = 2, choice3 = 2, handPos = 0
Handcount: 1, Expected: 1
test passed
Testing with choice1 = 2, choice2 = 3, choice3 = 3, handPos = 0
Coins: 4, Expected: 6
test FAILED
Handcount: -3, Expected: -1
test FAILED
Testing with choice1 = 0, choice2 = 1, choice3 = 1, handPos = 1
Handcount: -3, Expected: -3
test passed
Testing with choice1 = 1, choice2 = 2, choice3 = 2, handPos = 1
Handcount: 1, Expected: 1
test passed
Testing with choice1 = 2, choice2 = 3, choice3 = 3, handPos = 1
Coins: 4, Expected: 6
test FAILED
Handcount: -3, Expected: -1
test FAILED
Testing with choice1 = 0, choice2 = 1, choice3 = 1, handPos = 2
Handcount: -3, Expected: -3
test passed
Testing with choice1 = 1, choice2 = 2, choice3 = 2, handPos = 2
Handcount: 1, Expected: 1
test passed
Testing with choice1 = 2, choice2 = 3, choice3 = 3, handPos = 2
Coins: 4, Expected: 6
test FAILED
Handcount: -3, Expected: -1
test FAILED
Testing with choice1 = 0, choice2 = 1, choice3 = 1, handPos = 3
Handcount: -3, Expected: -3
test passed
Testing with choice1 = 1, choice2 = 2, choice3 = 2, handPos = 3
Handcount: 1, Expected: 1
test passed
Testing with choice1 = 2, choice2 = 3, choice3 = 3, handPos = 3
Coins: 4, Expected: 6
test FAILED
Handcount: -3, Expected: -1
test FAILED
Testing with choice1 = 0, choice2 = 1, choice3 = 1, handPos = 4
Handcount: -3, Expected: -3
test passed
Testing with choice1 = 1, choice2 = 2, choice3 = 2, handPos = 4
Handcount: 1, Expected: 1
test passed
Testing with choice1 = 2, choice2 = 3, choice3 = 3, handPos = 4
Coins: 4, Expected: 6
test FAILED
Handcount: -3, Expected: -1
test FAILED
Tests failed.
File 'dominion.c'
Lines executed:51.01% of 643
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:40
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
   125203:    9:  if (*(int*)a > *(int*)b)
      336:   10:    return 1;
   124867:   11:  if (*(int*)a < *(int*)b)
    44704:   12:    return -1;
    80163:   13:  return 0;
   125203:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     4432:   44:  SelectStream(1);
     4432:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
     8864:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     4432:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    97504:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
   975040:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
   842080:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
   443200:   65:        }
    44320:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     4432:   73:  if (numPlayers == 2)
        -:   74:    {
     4432:   75:      state->supplyCount[curse] = 10;
     4432:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     4432:   87:  if (numPlayers == 2)
        -:   88:    {
     4432:   89:      state->supplyCount[estate] = 8;
     4432:   90:      state->supplyCount[duchy] = 8;
     4432:   91:      state->supplyCount[province] = 8;
     4432:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     4432:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     4432:  102:  state->supplyCount[silver] = 40;
     4432:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   186144:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
  1462560:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
   686960:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    84210:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
     8862:  115:		  if (numPlayers == 2){ 
     8862:  116:		    state->supplyCount[i] = 8; 
     8862:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
     8862:  119:		}
        -:  120:	      else
        -:  121:		{
    35458:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    44320:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   642640:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
   642640:  130:	}
        -:  131:
    88640:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    26592:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
     8864:  140:      state->deckCount[i] = 0;
    70912:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    26592:  143:	  state->deck[i][j] = estate;
    26592:  144:	  state->deckCount[i]++;
    26592:  145:	}
   141824:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    62048:  148:	  state->deck[i][j] = copper;
    62048:  149:	  state->deckCount[i]++;		
    62048:  150:	}
     8864:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    26592:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
     8864:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
     8864:  160:    }
        -:  161:
        -:  162:  //draw player hands
    26592:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     8864:  166:      state->handCount[i] = 0;
     8864:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
     8864:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
   248192:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
   119664:  178:      state->embargoTokens[i] = 0;
   119664:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     4432:  182:  state->outpostPlayed = 0;
     4432:  183:  state->phase = 0;
     4432:  184:  state->numActions = 1;
     4432:  185:  state->numBuys = 1;
     4432:  186:  state->playedCardCount = 0;
     4432:  187:  state->whoseTurn = 0;
     4432:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    53184:  192:  for (it = 0; it < 5; it++){
    22160:  193:    drawCard(state->whoseTurn, state);
    22160:  194:  }
        -:  195:
     4432:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     4432:  198:  return 0;
     4432:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    18453:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    18453:  209:  if (state->deckCount[player] < 1)
     9554:  210:    return -1;
     8899:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   196038:  214:  while (state->deckCount[player] > 0) {
    89120:  215:    card = floor(Random() * state->deckCount[player]);
    89120:  216:    newDeck[newDeckPos] = state->deck[player][card];
    89120:  217:    newDeckPos++;
   624844:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   223302:  219:      state->deck[player][i] = state->deck[player][i+1];
   223302:  220:    }
    89120:  221:    state->deckCount[player]--;
        -:  222:  }
   196038:  223:  for (i = 0; i < newDeckPos; i++) {
    89120:  224:    state->deck[player][i] = newDeck[i];
    89120:  225:    state->deckCount[player]++;
    89120:  226:  }
        -:  227:
     8899:  228:  return 0;
    18453:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
       61:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       61:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
       61:  243:  if ( state->numActions < 1 )
        -:  244:    {
       36:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
       25:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
       32:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
       18:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
        7:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        7:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        7:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
        7:  269:  return 0;
       61:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
       73:  280:  who = state->whoseTurn;
        -:  281:
       73:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
       73:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
       73:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
       73:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
       73:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
       73:  299:    state->coins = (state->coins) - (getCost(supplyPos));
       73:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
       73:  308:  return 0;
       73:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
      536:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
     1128:  316:  int currentPlayer = whoseTurn(state);
     1128:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
     6479:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
      770:  326:  int count = 0;
        -:  327:
    11386:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
     5691:  330:      if (state->deck[player][i] == card) count++;
     4923:  331:    }
        -:  332:
    26858:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    14834:  335:      if (state->hand[player][i] == card) count++;
    12659:  336:    }
        -:  337:
    20356:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    10976:  340:      if (state->discard[player][i] == card) count++;
     9408:  341:    }
        -:  342:
      770:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
     1855:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
       77:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
      988:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
      417:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      417:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
      417:  359:  }
       77:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
       77:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
       39:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
       39:  365:  }
        -:  366:  else{
       38:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
       77:  370:  state->outpostPlayed = 0;
       77:  371:  state->phase = 0;
       77:  372:  state->numActions = 1;
       77:  373:  state->coins = 0;
       77:  374:  state->numBuys = 1;
       77:  375:  state->playedCardCount = 0;
       77:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
      924:  380:  for (k = 0; k < 5; k++){
      385:  381:    drawCard(state->whoseTurn, state);//Draw a card
      385:  382:  }
        -:  383:
        -:  384:  //Update money
       77:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
       77:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
      445:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
      152:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
      293:  401:  j = 0;
    15236:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
     7325:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
      432:  406:	  j++;
      432:  407:	}
     7325:  408:    }
      293:  409:  if ( j >= 3)
        -:  410:    {
       72:  411:      return 1;
        -:  412:    }
        -:  413:
      221:  414:  return 0;
      445:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
      154:  420:  int score = 0;
        -:  421:  //score from hand
     3928:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
     2126:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
     2095:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
     2098:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
     2103:  427:      if (state->hand[player][i] == province) { score = score + 6; };
     2106:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
     2110:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     1810:  430:    }
        -:  431:
        -:  432:  //score from discard
     2264:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
     1138:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
     1140:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
     1138:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
     1142:  438:      if (state->discard[player][i] == province) { score = score + 6; };
     1138:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
     1138:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
      978:  441:    }
        -:  442:
        -:  443:  //score from deck
     2264:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
     1138:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
     1141:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
     1138:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
     1140:  449:      if (state->deck[player][i] == province) { score = score + 6; };
     1138:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
     1138:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
      978:  452:    }
        -:  453:
      154:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    28120:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    11084:  533:    for (i = 0; i < state->discardCount[player];i++){
      480:  534:      state->deck[player][i] = state->discard[player][i];
      480:  535:      state->discard[player][i] = -1;
      480:  536:    }
        -:  537:
     5062:  538:    state->deckCount[player] = state->discardCount[player];
     5062:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     5062:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     5062:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     5062:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     5062:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     5062:  559:    if (deckCounter == 0)
     5027:  560:      return -1;
        -:  561:
       35:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       35:  563:    state->deckCount[player]--;
       35:  564:    state->handCount[player]++;//Increment hand count
       35:  565:  }
        -:  566:
        -:  567:  else{
    23058:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    23058:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    23058:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    23058:  576:    state->deckCount[player]--;
    23058:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    23093:  580:  return 0;
    28120:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
      146:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
       32:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
       70:  598:      return 3;
        -:  599:    case gold:
       28:  600:      return 6;
        -:  601:    case adventurer:
        8:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
        8:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
      146:  644:}
        -:  645:
        -:  646://smithy function to introduce a bug
        -:  647:int smithyfun(int currentPlayer, struct gameState *state, int handPos){
        -:  648:  //+3 Cards
        -:  649:  int i;
      428:  650:  for (i = 0; i <= 3; i++)
        -:  651:  {
      171:  652:    drawCard(currentPlayer, state);
      171:  653:  }
        -:  654:      
        -:  655:      //discard card from hand
       43:  656:      discardCard(handPos, currentPlayer, state, 0);
       43:  657:      return 0;
        -:  658:}
        -:  659:
        -:  660://adventurer function to introduce a bug
        -:  661:int adventurerfun(int currentPlayer, struct gameState *state){
        -:  662:    int cardDrawn;
        -:  663:    int temphand[MAX_HAND];
2291246309455167524:  664:    int drawntreasure = 0;
2291246309455167524:  665:    int z = 0;
        -:  666:
10104103169071345576:  667:  while(drawntreasure <= 2){
72057701412114902:  668:      if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
17981539013:  669:          shuffle(currentPlayer, state);
17981539013:  670:      }
7018965447127851741:  671:  drawCard(currentPlayer, state);
7018965447127851741:  672:  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
14469171020717090749:  673:  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    28313:  674:  drawntreasure++;
        -:  675:  else{
     4494:  676:  temphand[z]=cardDrawn;
     4494:  677:  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     4494:  678:  z++;
        -:  679:  }
        -:  680:}
        -:  681:    
     9104:  682:    while(z-1>=0){
     4494:  683:  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     4494:  684:      z=z-1;
        -:  685:    }
       58:  686:    return 0;
        -:  687:}
        -:  688:
        -:  689:int villagefun(int handPos, int currentPlayer, struct gameState *state){
        -:  690:        //+1 Card
        3:  691:        drawCard(currentPlayer, state);
        -:  692:        
        -:  693:        //+2 Actions
        3:  694:        state->numActions = state->numActions + 2;
        -:  695:        
        -:  696:        //discard played card from hand
        -:  697:        //discardCard(handPos, currentPlayer, state, 0);
        3:  698:        return 0;
        -:  699:}
        -:  700:
        -:  701:int great_hallfun(int currentPlayer, struct gameState *state, int handPos){
        -:  702:        //+1 Card
    #####:  703:        drawCard(currentPlayer, state);
        -:  704:        
        -:  705:        //+1 Actions
    #####:  706:        state->numActions++;
        -:  707:        
        -:  708:        //discard card from hand
    #####:  709:        discardCard(handPos, currentPlayer, state, 0);
    #####:  710:        return 0;
        -:  711:}
        -:  712:
        -:  713:int stewardfun(int choice1, int choice2, int choice3, int handPos, int currentPlayer, struct gameState *state){
        -:  714:
       90:  715:  if (choice1 == 1)
        -:  716:	{
        -:  717:	  //+2 cards
       30:  718:	  drawCard(currentPlayer, state);
       30:  719:	  drawCard(currentPlayer, state);
       30:  720:	}
       60:  721:      else if (choice2 == 2)
        -:  722:	{
        -:  723:	  //+2 coins
    #####:  724:	  state->coins = state->coins + 2;
    #####:  725:	}
        -:  726:      else
        -:  727:	{
        -:  728:	  //trash 2 cards in hand
       60:  729:	  discardCard(choice2, currentPlayer, state, 1);
       60:  730:	  discardCard(choice3, currentPlayer, state, 1);
        -:  731:	}
        -:  732:			
        -:  733:      //discard card from hand
       90:  734:      discardCard(handPos, currentPlayer, state, 0);
       90:  735:      return 0;
        -:  736:}
        -:  737:
        -:  738:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  739:{
        -:  740:  int i;
        -:  741:  int j;
        -:  742:  int k;
        -:  743:  int x;
        -:  744:  int index;
       37:  745:  int currentPlayer = whoseTurn(state);
       37:  746:  int nextPlayer = currentPlayer + 1;
        -:  747:
       37:  748:  int tributeRevealedCards[2] = {-1, -1};
        -:  749:  int temphand[MAX_HAND];// moved above the if statement
       37:  750:  if (nextPlayer > (state->numPlayers - 1)){
        4:  751:    nextPlayer = 0;
        4:  752:  }
        -:  753:  
        -:  754:	
        -:  755:  //uses switch to select card and perform actions
       47:  756:  switch( card ) 
        -:  757:    {
        -:  758:    case adventurer:
        4:  759:      adventurerfun(currentPlayer, state);
        -:  760:			
        -:  761:    case council_room:
        -:  762:      //+4 Cards
      340:  763:      for (i = 0; i < 4; i++)
        -:  764:	{
      136:  765:	  drawCard(currentPlayer, state);
      136:  766:	}
        -:  767:			
        -:  768:      //+1 Buy
       34:  769:      state->numBuys++;
        -:  770:			
        -:  771:      //Each other player draws a card
      204:  772:      for (i = 0; i < state->numPlayers; i++)
        -:  773:	{
       68:  774:	  if ( i != currentPlayer )
        -:  775:	    {
       34:  776:	      drawCard(i, state);
       34:  777:	    }
       68:  778:	}
        -:  779:			
        -:  780:      //put played card in played card pile
       34:  781:      discardCard(handPos, currentPlayer, state, 0);
        -:  782:			
       34:  783:      return 0;
        -:  784:			
        -:  785:    case feast:
        -:  786:      //gain card with cost up to 5
        -:  787:      //Backup hand
    #####:  788:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  789:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  790:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  791:      }
        -:  792:      //Backup hand
        -:  793:
        -:  794:      //Update Coins for Buy
    #####:  795:      updateCoins(currentPlayer, state, 5);
    #####:  796:      x = 1;//Condition to loop on
    #####:  797:      while( x == 1) {//Buy one card
    #####:  798:	if (supplyCount(choice1, state) <= 0){
        -:  799:	  if (DEBUG)
        -:  800:	    printf("None of that card left, sorry!\n");
        -:  801:
        -:  802:	  if (DEBUG){
        -:  803:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  804:	  }
    #####:  805:	}
    #####:  806:	else if (state->coins < getCost(choice1)){
    #####:  807:	  printf("That card is too expensive!\n");
        -:  808:
        -:  809:	  if (DEBUG){
        -:  810:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  811:	  }
    #####:  812:	}
        -:  813:	else{
        -:  814:
        -:  815:	  if (DEBUG){
        -:  816:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  817:	  }
        -:  818:
    #####:  819:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  820:	  x = 0;//No more buying cards
        -:  821:
        -:  822:	  if (DEBUG){
        -:  823:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  824:	  }
        -:  825:
        -:  826:	}
        -:  827:      }     
        -:  828:
        -:  829:      //Reset Hand
    #####:  830:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  831:	state->hand[currentPlayer][i] = temphand[i];
    #####:  832:	temphand[i] = -1;
    #####:  833:      }
        -:  834:      //Reset Hand
        -:  835:      			
    #####:  836:      return 0;
        -:  837:			
        -:  838:    case gardens:
    #####:  839:      return -1;
        -:  840:			
        -:  841:    case mine:
    #####:  842:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  843:
    #####:  844:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  845:	{
    #####:  846:	  return -1;
        -:  847:	}
        -:  848:		
    #####:  849:      if (choice2 > treasure_map || choice2 < curse)
        -:  850:	{
    #####:  851:	  return -1;
        -:  852:	}
        -:  853:
    #####:  854:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  855:	{
    #####:  856:	  return -1;
        -:  857:	}
        -:  858:
    #####:  859:      gainCard(choice2, state, 2, currentPlayer);
        -:  860:
        -:  861:      //discard card from hand
    #####:  862:      discardCard(handPos, currentPlayer, state, 0);
        -:  863:
        -:  864:      //discard trashed card
    #####:  865:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  866:	{
    #####:  867:	  if (state->hand[currentPlayer][i] == j)
        -:  868:	    {
    #####:  869:	      discardCard(i, currentPlayer, state, 0);			
    #####:  870:	      break;
        -:  871:	    }
    #####:  872:	}
        -:  873:			
    #####:  874:      return 0;
        -:  875:			
        -:  876:    case remodel:
    #####:  877:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  878:
    #####:  879:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  880:	{
    #####:  881:	  return -1;
        -:  882:	}
        -:  883:
    #####:  884:      gainCard(choice2, state, 0, currentPlayer);
        -:  885:
        -:  886:      //discard card from hand
    #####:  887:      discardCard(handPos, currentPlayer, state, 0);
        -:  888:
        -:  889:      //discard trashed card
    #####:  890:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  891:	{
    #####:  892:	  if (state->hand[currentPlayer][i] == j)
        -:  893:	    {
    #####:  894:	      discardCard(i, currentPlayer, state, 0);			
    #####:  895:	      break;
        -:  896:	    }
    #####:  897:	}
        -:  898:
        -:  899:
    #####:  900:      return 0;
        -:  901:		
        -:  902:    case smithy:
        -:  903:      //+3 Cards
        3:  904:      smithyfun(currentPlayer, state, handPos);
        -:  905:
        -:  906:    case village:
        3:  907:      villagefun(handPos, currentPlayer, state);
        -:  908:		
        -:  909:    case baron:
        3:  910:      state->numBuys++;//Increase buys by 1!
        3:  911:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  912:	int p = 0;//Iterator for hand!
    #####:  913:	int card_not_discarded = 1;//Flag for discard set!
    #####:  914:	while(card_not_discarded){
    #####:  915:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  916:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  917:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  918:	    state->discardCount[currentPlayer]++;
    #####:  919:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  920:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  921:	    }
    #####:  922:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  923:	    state->handCount[currentPlayer]--;
    #####:  924:	    card_not_discarded = 0;//Exit the loop
    #####:  925:	  }
    #####:  926:	  else if (p > state->handCount[currentPlayer]){
        -:  927:	    if(DEBUG) {
        -:  928:	      printf("No estate cards in your hand, invalid choice\n");
        -:  929:	      printf("Must gain an estate if there are any\n");
        -:  930:	    }
    #####:  931:	    if (supplyCount(estate, state) > 0){
    #####:  932:	      gainCard(estate, state, 0, currentPlayer);
    #####:  933:	      state->supplyCount[estate]--;//Decrement estates
    #####:  934:	      if (supplyCount(estate, state) == 0){
    #####:  935:		isGameOver(state);
    #####:  936:	      }
    #####:  937:	    }
    #####:  938:	    card_not_discarded = 0;//Exit the loop
    #####:  939:	  }
        -:  940:			    
        -:  941:	  else{
    #####:  942:	    p++;//Next card
        -:  943:	  }
        -:  944:	}
    #####:  945:      }
        -:  946:			    
        -:  947:      else{
        3:  948:	if (supplyCount(estate, state) > 0){
        3:  949:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
        3:  950:	  state->supplyCount[estate]--;//Decrement Estates
        3:  951:	  if (supplyCount(estate, state) == 0){
    #####:  952:	    isGameOver(state);
    #####:  953:	  }
        3:  954:	}
        -:  955:      }
        -:  956:	    
        -:  957:      
        3:  958:      return 0;
        -:  959:		
        -:  960:    case great_hall:
    #####:  961:      great_hallfun(currentPlayer, state, handPos);
        -:  962:		
        -:  963:    case minion:
        -:  964:      //+1 action
    #####:  965:      state->numActions++;
        -:  966:			
        -:  967:      //discard card from hand
    #####:  968:      discardCard(handPos, currentPlayer, state, 0);
        -:  969:			
    #####:  970:      if (choice1)		//+2 coins
        -:  971:	{
    #####:  972:	  state->coins = state->coins + 2;
    #####:  973:	}
        -:  974:			
    #####:  975:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  976:	{
        -:  977:	  //discard hand
    #####:  978:	  while(numHandCards(state) > 0)
        -:  979:	    {
    #####:  980:	      discardCard(handPos, currentPlayer, state, 0);
        -:  981:	    }
        -:  982:				
        -:  983:	  //draw 4
    #####:  984:	  for (i = 0; i < 4; i++)
        -:  985:	    {
    #####:  986:	      drawCard(currentPlayer, state);
    #####:  987:	    }
        -:  988:				
        -:  989:	  //other players discard hand and redraw if hand size > 4
    #####:  990:	  for (i = 0; i < state->numPlayers; i++)
        -:  991:	    {
    #####:  992:	      if (i != currentPlayer)
        -:  993:		{
    #####:  994:		  if ( state->handCount[i] > 4 )
        -:  995:		    {
        -:  996:		      //discard hand
    #####:  997:		      while( state->handCount[i] > 0 )
        -:  998:			{
    #####:  999:			  discardCard(handPos, i, state, 0);
        -: 1000:			}
        -: 1001:							
        -: 1002:		      //draw 4
    #####: 1003:		      for (j = 0; j < 4; j++)
        -: 1004:			{
    #####: 1005:			  drawCard(i, state);
    #####: 1006:			}
    #####: 1007:		    }
    #####: 1008:		}
    #####: 1009:	    }
        -: 1010:				
    #####: 1011:	}
    #####: 1012:      return 0;
        -: 1013:		
        -: 1014:    case steward:
    #####: 1015:      stewardfun(choice1, choice2, choice3, handPos, currentPlayer, state);
        -: 1016:
        -: 1017:		
        -: 1018:    case tribute:
    #####: 1019:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1020:	if (state->deckCount[nextPlayer] > 0){
    #####: 1021:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1022:	  state->deckCount[nextPlayer]--;
    #####: 1023:	}
    #####: 1024:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1025:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1026:	  state->discardCount[nextPlayer]--;
    #####: 1027:	}
        -: 1028:	else{
        -: 1029:	  //No Card to Reveal
        -: 1030:	  if (DEBUG){
        -: 1031:	    printf("No cards to reveal\n");
        -: 1032:	  }
        -: 1033:	}
    #####: 1034:      }
        -: 1035:	    
        -: 1036:      else{
    #####: 1037:	if (state->deckCount[nextPlayer] == 0){
    #####: 1038:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1039:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1040:	    state->deckCount[nextPlayer]++;
    #####: 1041:	    state->discard[nextPlayer][i] = -1;
    #####: 1042:	    state->discardCount[nextPlayer]--;
    #####: 1043:	  }
        -: 1044:			    
    #####: 1045:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1046:	} 
    #####: 1047:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1048:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1049:	state->deckCount[nextPlayer]--;
    #####: 1050:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1051:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1052:	state->deckCount[nextPlayer]--;
        -: 1053:      }    
        -: 1054:		       
    #####: 1055:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1056:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1057:	state->playedCardCount++;
    #####: 1058:	tributeRevealedCards[1] = -1;
    #####: 1059:      }
        -: 1060:
    #####: 1061:      for (i = 0; i <= 2; i ++){
    #####: 1062:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1063:	  state->coins += 2;
    #####: 1064:	}
        -: 1065:		    
    #####: 1066:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1067:	  drawCard(currentPlayer, state);
    #####: 1068:	  drawCard(currentPlayer, state);
    #####: 1069:	}
        -: 1070:	else{//Action Card
    #####: 1071:	  state->numActions = state->numActions + 2;
        -: 1072:	}
    #####: 1073:      }
        -: 1074:	    
    #####: 1075:      return 0;
        -: 1076:		
        -: 1077:    case ambassador:
    #####: 1078:      j = 0;		//used to check if player has enough cards to discard
        -: 1079:
    #####: 1080:      if (choice2 > 2 || choice2 < 0)
        -: 1081:	{
    #####: 1082:	  return -1;				
        -: 1083:	}
        -: 1084:
    #####: 1085:      if (choice1 == handPos)
        -: 1086:	{
    #####: 1087:	  return -1;
        -: 1088:	}
        -: 1089:
    #####: 1090:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1091:	{
    #####: 1092:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1093:	    {
    #####: 1094:	      j++;
    #####: 1095:	    }
    #####: 1096:	}
    #####: 1097:      if (j < choice2)
        -: 1098:	{
    #####: 1099:	  return -1;				
        -: 1100:	}
        -: 1101:
        -: 1102:      if (DEBUG) 
        -: 1103:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1104:
        -: 1105:      //increase supply count for choosen card by amount being discarded
    #####: 1106:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1107:			
        -: 1108:      //each other player gains a copy of revealed card
    #####: 1109:      for (i = 0; i < state->numPlayers; i++)
        -: 1110:	{
    #####: 1111:	  if (i != currentPlayer)
        -: 1112:	    {
    #####: 1113:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1114:	    }
    #####: 1115:	}
        -: 1116:
        -: 1117:      //discard played card from hand
    #####: 1118:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1119:
        -: 1120:      //trash copies of cards returned to supply
    #####: 1121:      for (j = 0; j < choice2; j++)
        -: 1122:	{
    #####: 1123:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1124:	    {
    #####: 1125:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1126:		{
    #####: 1127:		  discardCard(i, currentPlayer, state, 1);
    #####: 1128:		  break;
        -: 1129:		}
    #####: 1130:	    }
    #####: 1131:	}			
        -: 1132:
    #####: 1133:      return 0;
        -: 1134:		
        -: 1135:    case cutpurse:
        -: 1136:
    #####: 1137:      updateCoins(currentPlayer, state, 2);
    #####: 1138:      for (i = 0; i < state->numPlayers; i++)
        -: 1139:	{
    #####: 1140:	  if (i != currentPlayer)
        -: 1141:	    {
    #####: 1142:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1143:		{
    #####: 1144:		  if (state->hand[i][j] == copper)
        -: 1145:		    {
    #####: 1146:		      discardCard(j, i, state, 0);
    #####: 1147:		      break;
        -: 1148:		    }
    #####: 1149:		  if (j == state->handCount[i])
        -: 1150:		    {
    #####: 1151:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1152:			{
        -: 1153:			  if (DEBUG)
        -: 1154:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1155:			}	
    #####: 1156:		      break;
        -: 1157:		    }		
    #####: 1158:		}
        -: 1159:					
    #####: 1160:	    }
        -: 1161:				
    #####: 1162:	}				
        -: 1163:
        -: 1164:      //discard played card from hand
    #####: 1165:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1166:
    #####: 1167:      return 0;
        -: 1168:
        -: 1169:		
        -: 1170:    case embargo: 
        -: 1171:      //+2 Coins
    #####: 1172:      state->coins = state->coins + 2;
        -: 1173:			
        -: 1174:      //see if selected pile is in play
    #####: 1175:      if ( state->supplyCount[choice1] == -1 )
        -: 1176:	{
    #####: 1177:	  return -1;
        -: 1178:	}
        -: 1179:			
        -: 1180:      //add embargo token to selected supply pile
    #####: 1181:      state->embargoTokens[choice1]++;
        -: 1182:			
        -: 1183:      //trash card
    #####: 1184:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1185:      return 0;
        -: 1186:		
        -: 1187:    case outpost:
        -: 1188:      //set outpost flag
    #####: 1189:      state->outpostPlayed++;
        -: 1190:			
        -: 1191:      //discard card
    #####: 1192:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1193:      return 0;
        -: 1194:		
        -: 1195:    case salvager:
        -: 1196:      //+1 buy
    #####: 1197:      state->numBuys++;
        -: 1198:			
    #####: 1199:      if (choice1)
        -: 1200:	{
        -: 1201:	  //gain coins equal to trashed card
    #####: 1202:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1203:	  //trash card
    #####: 1204:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1205:	}
        -: 1206:			
        -: 1207:      //discard card
    #####: 1208:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1209:      return 0;
        -: 1210:		
        -: 1211:    case sea_hag:
    #####: 1212:      for (i = 0; i < state->numPlayers; i++){
    #####: 1213:	if (i != currentPlayer){
    #####: 1214:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1215:	  state->discardCount[i]++;
    #####: 1216:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1217:	}
    #####: 1218:      }
    #####: 1219:      return 0;
        -: 1220:		
        -: 1221:    case treasure_map:
        -: 1222:      //search hand for another treasure_map
    #####: 1223:      index = -1;
    #####: 1224:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1225:	{
    #####: 1226:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1227:	    {
    #####: 1228:	      index = i;
    #####: 1229:	      break;
        -: 1230:	    }
    #####: 1231:	}
    #####: 1232:      if (index > -1)
        -: 1233:	{
        -: 1234:	  //trash both treasure cards
    #####: 1235:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1236:	  discardCard(index, currentPlayer, state, 1);
        -: 1237:
        -: 1238:	  //gain 4 Gold cards
    #####: 1239:	  for (i = 0; i < 4; i++)
        -: 1240:	    {
    #####: 1241:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1242:	    }
        -: 1243:				
        -: 1244:	  //return success
    #####: 1245:	  return 1;
        -: 1246:	}
        -: 1247:			
        -: 1248:      //no second treasure_map found in hand
    #####: 1249:      return -1;
        -: 1250:    }
        -: 1251:	
    #####: 1252:  return -1;
       37: 1253:}
        -: 1254:
        -: 1255:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1256:{
        -: 1257:	
        -: 1258:  //if card is not trashed, added to Played pile 
      488: 1259:  if (trashFlag < 1)
        -: 1260:    {
        -: 1261:      //add card to played pile
      268: 1262:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      268: 1263:      state->playedCardCount++;
      268: 1264:    }
        -: 1265:	
        -: 1266:  //set played card to -1
      488: 1267:  state->hand[currentPlayer][handPos] = -1;
        -: 1268:	
        -: 1269:  //remove card from player's hand
      488: 1270:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1271:    {
        -: 1272:      //reduce number of cards in hand
       68: 1273:      state->handCount[currentPlayer]--;
       68: 1274:    }
      420: 1275:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1276:    {
        -: 1277:      //reduce number of cards in hand
       32: 1278:      state->handCount[currentPlayer]--;
       32: 1279:    }
        -: 1280:  else 	
        -: 1281:    {
        -: 1282:      //replace discarded card with last card in hand
      388: 1283:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1284:      //set last card to -1
      388: 1285:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1286:      //reduce number of cards in hand
      388: 1287:      state->handCount[currentPlayer]--;
        -: 1288:    }
        -: 1289:	
      488: 1290:  return 0;
        -: 1291:}
        -: 1292:
        -: 1293:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1294:{
        -: 1295:  //Note: supplyPos is enum of choosen card
        -: 1296:	
        -: 1297:  //check if supply pile is empty (0) or card is not used in game (-1)
     3408: 1298:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1299:    {
      476: 1300:      return -1;
        -: 1301:    }
        -: 1302:	
        -: 1303:  //added card for [whoseTurn] current player:
        -: 1304:  // toFlag = 0 : add to discard
        -: 1305:  // toFlag = 1 : add to deck
        -: 1306:  // toFlag = 2 : add to hand
        -: 1307:
     2932: 1308:  if (toFlag == 1)
        -: 1309:    {
     1190: 1310:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
     1190: 1311:      state->deckCount[player]++;
     1190: 1312:    }
     1742: 1313:  else if (toFlag == 2)
        -: 1314:    {
      952: 1315:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
      952: 1316:      state->handCount[player]++;
      952: 1317:    }
        -: 1318:  else
        -: 1319:    {
      790: 1320:      state->discard[player][ state->discardCount[player] ] = supplyPos;
      790: 1321:      state->discardCount[player]++;
        -: 1322:    }
        -: 1323:	
        -: 1324:  //decrease number in supply pile
     2932: 1325:  state->supplyCount[supplyPos]--;
        -: 1326:	 
     2932: 1327:  return 0;
     3408: 1328:}
        -: 1329:
        -: 1330:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1331:{
        -: 1332:  int i;
        -: 1333:	
        -: 1334:  //reset coin count
     4846: 1335:  state->coins = 0;
        -: 1336:
        -: 1337:  //add coins for each Treasure card in player's hand
    56896: 1338:  for (i = 0; i < state->handCount[player]; i++)
        -: 1339:    {
    23602: 1340:      if (state->hand[player][i] == copper)
        -: 1341:	{
    18250: 1342:	  state->coins += 1;
    18250: 1343:	}
     5352: 1344:      else if (state->hand[player][i] == silver)
        -: 1345:	{
      433: 1346:	  state->coins += 2;
      433: 1347:	}
     4919: 1348:      else if (state->hand[player][i] == gold)
        -: 1349:	{
      353: 1350:	  state->coins += 3;
      353: 1351:	}	
    23602: 1352:    }	
        -: 1353:
        -: 1354:  //add bonus
     4846: 1355:  state->coins += bonus;
        -: 1356:
     4846: 1357:  return 0;
        -: 1358:}
        -: 1359:
        -: 1360:
        -: 1361://end of dominion.c
        -: 1362:
TESTING scoreTest():
Testing with 0 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 387389207
Test failed.
Card at position: 6
Card drawn: 387389207
Test failed.
Testing that 2 cards were drawn. 
HandCount: 5, Expected: 7
test FAILED
Testing with 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 8, Expected: 7
test FAILED
Testing with 10 deckcount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 8, Expected: 7
test FAILED
Testing with 0 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 387389207
Test failed.
Card at position: 1
Card drawn: 387389207
Test failed.
Testing that 2 cards were drawn. 
HandCount: -495, Expected: 2
test FAILED
Testing with 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 3, Expected: 2
test FAILED
Testing with 10 deckcount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 3, Expected: 2
test FAILED
Tests failed.
File 'dominion.c'
Lines executed:51.01% of 643
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:41
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
   125371:    9:  if (*(int*)a > *(int*)b)
      336:   10:    return 1;
   125035:   11:  if (*(int*)a < *(int*)b)
    44764:   12:    return -1;
    80271:   13:  return 0;
   125371:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     4438:   44:  SelectStream(1);
     4438:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
     8876:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     4438:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    97636:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
   976360:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
   843220:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
   443800:   65:        }
    44380:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     4438:   73:  if (numPlayers == 2)
        -:   74:    {
     4438:   75:      state->supplyCount[curse] = 10;
     4438:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     4438:   87:  if (numPlayers == 2)
        -:   88:    {
     4438:   89:      state->supplyCount[estate] = 8;
     4438:   90:      state->supplyCount[duchy] = 8;
     4438:   91:      state->supplyCount[province] = 8;
     4438:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     4438:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     4438:  102:  state->supplyCount[silver] = 40;
     4438:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   186396:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
  1464540:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
   687890:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    84324:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
     8874:  115:		  if (numPlayers == 2){ 
     8874:  116:		    state->supplyCount[i] = 8; 
     8874:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
     8874:  119:		}
        -:  120:	      else
        -:  121:		{
    35506:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    44380:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   643510:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
   643510:  130:	}
        -:  131:
    88760:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    26628:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
     8876:  140:      state->deckCount[i] = 0;
    71008:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    26628:  143:	  state->deck[i][j] = estate;
    26628:  144:	  state->deckCount[i]++;
    26628:  145:	}
   142016:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    62132:  148:	  state->deck[i][j] = copper;
    62132:  149:	  state->deckCount[i]++;		
    62132:  150:	}
     8876:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    26628:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
     8876:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
     8876:  160:    }
        -:  161:
        -:  162:  //draw player hands
    26628:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     8876:  166:      state->handCount[i] = 0;
     8876:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
     8876:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
   248528:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
   119826:  178:      state->embargoTokens[i] = 0;
   119826:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     4438:  182:  state->outpostPlayed = 0;
     4438:  183:  state->phase = 0;
     4438:  184:  state->numActions = 1;
     4438:  185:  state->numBuys = 1;
     4438:  186:  state->playedCardCount = 0;
     4438:  187:  state->whoseTurn = 0;
     4438:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    53256:  192:  for (it = 0; it < 5; it++){
    22190:  193:    drawCard(state->whoseTurn, state);
    22190:  194:  }
        -:  195:
     4438:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     4438:  198:  return 0;
     4438:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    19467:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    19467:  209:  if (state->deckCount[player] < 1)
    10556:  210:    return -1;
     8911:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   196302:  214:  while (state->deckCount[player] > 0) {
    89240:  215:    card = floor(Random() * state->deckCount[player]);
    89240:  216:    newDeck[newDeckPos] = state->deck[player][card];
    89240:  217:    newDeckPos++;
   625684:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   223602:  219:      state->deck[player][i] = state->deck[player][i+1];
   223602:  220:    }
    89240:  221:    state->deckCount[player]--;
        -:  222:  }
   196302:  223:  for (i = 0; i < newDeckPos; i++) {
    89240:  224:    state->deck[player][i] = newDeck[i];
    89240:  225:    state->deckCount[player]++;
    89240:  226:  }
        -:  227:
     8911:  228:  return 0;
    19467:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
       61:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       61:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
       61:  243:  if ( state->numActions < 1 )
        -:  244:    {
       36:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
       25:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
       32:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
       18:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
        7:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        7:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        7:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
        7:  269:  return 0;
       61:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
       73:  280:  who = state->whoseTurn;
        -:  281:
       73:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
       73:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
       73:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
       73:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
       73:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
       73:  299:    state->coins = (state->coins) - (getCost(supplyPos));
       73:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
       73:  308:  return 0;
       73:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
      536:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
     1128:  316:  int currentPlayer = whoseTurn(state);
     1128:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
     6479:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
      770:  326:  int count = 0;
        -:  327:
    11386:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
     5691:  330:      if (state->deck[player][i] == card) count++;
     4923:  331:    }
        -:  332:
    26858:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    14834:  335:      if (state->hand[player][i] == card) count++;
    12659:  336:    }
        -:  337:
    20356:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    10976:  340:      if (state->discard[player][i] == card) count++;
     9408:  341:    }
        -:  342:
      770:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
     1855:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
       77:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
      988:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
      417:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      417:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
      417:  359:  }
       77:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
       77:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
       39:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
       39:  365:  }
        -:  366:  else{
       38:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
       77:  370:  state->outpostPlayed = 0;
       77:  371:  state->phase = 0;
       77:  372:  state->numActions = 1;
       77:  373:  state->coins = 0;
       77:  374:  state->numBuys = 1;
       77:  375:  state->playedCardCount = 0;
       77:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
      924:  380:  for (k = 0; k < 5; k++){
      385:  381:    drawCard(state->whoseTurn, state);//Draw a card
      385:  382:  }
        -:  383:
        -:  384:  //Update money
       77:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
       77:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
      445:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
      152:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
      293:  401:  j = 0;
    15236:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
     7325:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
      432:  406:	  j++;
      432:  407:	}
     7325:  408:    }
      293:  409:  if ( j >= 3)
        -:  410:    {
       72:  411:      return 1;
        -:  412:    }
        -:  413:
      221:  414:  return 0;
      445:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
      154:  420:  int score = 0;
        -:  421:  //score from hand
     3928:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
     2126:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
     2095:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
     2098:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
     2103:  427:      if (state->hand[player][i] == province) { score = score + 6; };
     2106:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
     2110:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     1810:  430:    }
        -:  431:
        -:  432:  //score from discard
     2264:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
     1138:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
     1140:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
     1138:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
     1142:  438:      if (state->discard[player][i] == province) { score = score + 6; };
     1138:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
     1138:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
      978:  441:    }
        -:  442:
        -:  443:  //score from deck
     2264:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
     1138:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
     1141:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
     1138:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
     1140:  449:      if (state->deck[player][i] == province) { score = score + 6; };
     1138:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
     1138:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
      978:  452:    }
        -:  453:
      154:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    28667:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    12086:  533:    for (i = 0; i < state->discardCount[player];i++){
      480:  534:      state->deck[player][i] = state->discard[player][i];
      480:  535:      state->discard[player][i] = -1;
      480:  536:    }
        -:  537:
     5563:  538:    state->deckCount[player] = state->discardCount[player];
     5563:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     5563:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     5563:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     5563:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     5563:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     5563:  559:    if (deckCounter == 0)
     5528:  560:      return -1;
        -:  561:
       35:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       35:  563:    state->deckCount[player]--;
       35:  564:    state->handCount[player]++;//Increment hand count
       35:  565:  }
        -:  566:
        -:  567:  else{
    23104:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    23104:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    23104:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    23104:  576:    state->deckCount[player]--;
    23104:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    23139:  580:  return 0;
    28667:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
      146:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
       32:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
       70:  598:      return 3;
        -:  599:    case gold:
       28:  600:      return 6;
        -:  601:    case adventurer:
        8:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
        8:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
      146:  644:}
        -:  645:
        -:  646://smithy function to introduce a bug
        -:  647:int smithyfun(int currentPlayer, struct gameState *state, int handPos){
        -:  648:  //+3 Cards
        -:  649:  int i;
      428:  650:  for (i = 0; i <= 3; i++)
        -:  651:  {
      171:  652:    drawCard(currentPlayer, state);
      171:  653:  }
        -:  654:      
        -:  655:      //discard card from hand
       43:  656:      discardCard(handPos, currentPlayer, state, 0);
       43:  657:      return 0;
        -:  658:}
        -:  659:
        -:  660://adventurer function to introduce a bug
        -:  661:int adventurerfun(int currentPlayer, struct gameState *state){
        -:  662:    int cardDrawn;
        -:  663:    int temphand[MAX_HAND];
2291246309455167530:  664:    int drawntreasure = 0;
2291246309455167530:  665:    int z = 0;
        -:  666:
10104103169071346622:  667:  while(drawntreasure <= 2){
72057701412115419:  668:      if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
17981539514:  669:          shuffle(currentPlayer, state);
17981539514:  670:      }
7018965447127852258:  671:  drawCard(currentPlayer, state);
7018965447127852258:  672:  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
14469171020717092264:  673:  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    28331:  674:  drawntreasure++;
        -:  675:  else{
     4993:  676:  temphand[z]=cardDrawn;
     4993:  677:  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     4993:  678:  z++;
        -:  679:  }
        -:  680:}
        -:  681:    
    10114:  682:    while(z-1>=0){
     4993:  683:  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     4993:  684:      z=z-1;
        -:  685:    }
       64:  686:    return 0;
        -:  687:}
        -:  688:
        -:  689:int villagefun(int handPos, int currentPlayer, struct gameState *state){
        -:  690:        //+1 Card
        3:  691:        drawCard(currentPlayer, state);
        -:  692:        
        -:  693:        //+2 Actions
        3:  694:        state->numActions = state->numActions + 2;
        -:  695:        
        -:  696:        //discard played card from hand
        -:  697:        //discardCard(handPos, currentPlayer, state, 0);
        3:  698:        return 0;
        -:  699:}
        -:  700:
        -:  701:int great_hallfun(int currentPlayer, struct gameState *state, int handPos){
        -:  702:        //+1 Card
    #####:  703:        drawCard(currentPlayer, state);
        -:  704:        
        -:  705:        //+1 Actions
    #####:  706:        state->numActions++;
        -:  707:        
        -:  708:        //discard card from hand
    #####:  709:        discardCard(handPos, currentPlayer, state, 0);
    #####:  710:        return 0;
        -:  711:}
        -:  712:
        -:  713:int stewardfun(int choice1, int choice2, int choice3, int handPos, int currentPlayer, struct gameState *state){
        -:  714:
       90:  715:  if (choice1 == 1)
        -:  716:	{
        -:  717:	  //+2 cards
       30:  718:	  drawCard(currentPlayer, state);
       30:  719:	  drawCard(currentPlayer, state);
       30:  720:	}
       60:  721:      else if (choice2 == 2)
        -:  722:	{
        -:  723:	  //+2 coins
    #####:  724:	  state->coins = state->coins + 2;
    #####:  725:	}
        -:  726:      else
        -:  727:	{
        -:  728:	  //trash 2 cards in hand
       60:  729:	  discardCard(choice2, currentPlayer, state, 1);
       60:  730:	  discardCard(choice3, currentPlayer, state, 1);
        -:  731:	}
        -:  732:			
        -:  733:      //discard card from hand
       90:  734:      discardCard(handPos, currentPlayer, state, 0);
       90:  735:      return 0;
        -:  736:}
        -:  737:
        -:  738:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  739:{
        -:  740:  int i;
        -:  741:  int j;
        -:  742:  int k;
        -:  743:  int x;
        -:  744:  int index;
       37:  745:  int currentPlayer = whoseTurn(state);
       37:  746:  int nextPlayer = currentPlayer + 1;
        -:  747:
       37:  748:  int tributeRevealedCards[2] = {-1, -1};
        -:  749:  int temphand[MAX_HAND];// moved above the if statement
       37:  750:  if (nextPlayer > (state->numPlayers - 1)){
        4:  751:    nextPlayer = 0;
        4:  752:  }
        -:  753:  
        -:  754:	
        -:  755:  //uses switch to select card and perform actions
       47:  756:  switch( card ) 
        -:  757:    {
        -:  758:    case adventurer:
        4:  759:      adventurerfun(currentPlayer, state);
        -:  760:			
        -:  761:    case council_room:
        -:  762:      //+4 Cards
      340:  763:      for (i = 0; i < 4; i++)
        -:  764:	{
      136:  765:	  drawCard(currentPlayer, state);
      136:  766:	}
        -:  767:			
        -:  768:      //+1 Buy
       34:  769:      state->numBuys++;
        -:  770:			
        -:  771:      //Each other player draws a card
      204:  772:      for (i = 0; i < state->numPlayers; i++)
        -:  773:	{
       68:  774:	  if ( i != currentPlayer )
        -:  775:	    {
       34:  776:	      drawCard(i, state);
       34:  777:	    }
       68:  778:	}
        -:  779:			
        -:  780:      //put played card in played card pile
       34:  781:      discardCard(handPos, currentPlayer, state, 0);
        -:  782:			
       34:  783:      return 0;
        -:  784:			
        -:  785:    case feast:
        -:  786:      //gain card with cost up to 5
        -:  787:      //Backup hand
    #####:  788:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  789:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  790:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  791:      }
        -:  792:      //Backup hand
        -:  793:
        -:  794:      //Update Coins for Buy
    #####:  795:      updateCoins(currentPlayer, state, 5);
    #####:  796:      x = 1;//Condition to loop on
    #####:  797:      while( x == 1) {//Buy one card
    #####:  798:	if (supplyCount(choice1, state) <= 0){
        -:  799:	  if (DEBUG)
        -:  800:	    printf("None of that card left, sorry!\n");
        -:  801:
        -:  802:	  if (DEBUG){
        -:  803:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  804:	  }
    #####:  805:	}
    #####:  806:	else if (state->coins < getCost(choice1)){
    #####:  807:	  printf("That card is too expensive!\n");
        -:  808:
        -:  809:	  if (DEBUG){
        -:  810:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  811:	  }
    #####:  812:	}
        -:  813:	else{
        -:  814:
        -:  815:	  if (DEBUG){
        -:  816:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  817:	  }
        -:  818:
    #####:  819:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  820:	  x = 0;//No more buying cards
        -:  821:
        -:  822:	  if (DEBUG){
        -:  823:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  824:	  }
        -:  825:
        -:  826:	}
        -:  827:      }     
        -:  828:
        -:  829:      //Reset Hand
    #####:  830:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  831:	state->hand[currentPlayer][i] = temphand[i];
    #####:  832:	temphand[i] = -1;
    #####:  833:      }
        -:  834:      //Reset Hand
        -:  835:      			
    #####:  836:      return 0;
        -:  837:			
        -:  838:    case gardens:
    #####:  839:      return -1;
        -:  840:			
        -:  841:    case mine:
    #####:  842:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  843:
    #####:  844:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  845:	{
    #####:  846:	  return -1;
        -:  847:	}
        -:  848:		
    #####:  849:      if (choice2 > treasure_map || choice2 < curse)
        -:  850:	{
    #####:  851:	  return -1;
        -:  852:	}
        -:  853:
    #####:  854:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  855:	{
    #####:  856:	  return -1;
        -:  857:	}
        -:  858:
    #####:  859:      gainCard(choice2, state, 2, currentPlayer);
        -:  860:
        -:  861:      //discard card from hand
    #####:  862:      discardCard(handPos, currentPlayer, state, 0);
        -:  863:
        -:  864:      //discard trashed card
    #####:  865:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  866:	{
    #####:  867:	  if (state->hand[currentPlayer][i] == j)
        -:  868:	    {
    #####:  869:	      discardCard(i, currentPlayer, state, 0);			
    #####:  870:	      break;
        -:  871:	    }
    #####:  872:	}
        -:  873:			
    #####:  874:      return 0;
        -:  875:			
        -:  876:    case remodel:
    #####:  877:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  878:
    #####:  879:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  880:	{
    #####:  881:	  return -1;
        -:  882:	}
        -:  883:
    #####:  884:      gainCard(choice2, state, 0, currentPlayer);
        -:  885:
        -:  886:      //discard card from hand
    #####:  887:      discardCard(handPos, currentPlayer, state, 0);
        -:  888:
        -:  889:      //discard trashed card
    #####:  890:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  891:	{
    #####:  892:	  if (state->hand[currentPlayer][i] == j)
        -:  893:	    {
    #####:  894:	      discardCard(i, currentPlayer, state, 0);			
    #####:  895:	      break;
        -:  896:	    }
    #####:  897:	}
        -:  898:
        -:  899:
    #####:  900:      return 0;
        -:  901:		
        -:  902:    case smithy:
        -:  903:      //+3 Cards
        3:  904:      smithyfun(currentPlayer, state, handPos);
        -:  905:
        -:  906:    case village:
        3:  907:      villagefun(handPos, currentPlayer, state);
        -:  908:		
        -:  909:    case baron:
        3:  910:      state->numBuys++;//Increase buys by 1!
        3:  911:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  912:	int p = 0;//Iterator for hand!
    #####:  913:	int card_not_discarded = 1;//Flag for discard set!
    #####:  914:	while(card_not_discarded){
    #####:  915:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  916:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  917:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  918:	    state->discardCount[currentPlayer]++;
    #####:  919:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  920:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  921:	    }
    #####:  922:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  923:	    state->handCount[currentPlayer]--;
    #####:  924:	    card_not_discarded = 0;//Exit the loop
    #####:  925:	  }
    #####:  926:	  else if (p > state->handCount[currentPlayer]){
        -:  927:	    if(DEBUG) {
        -:  928:	      printf("No estate cards in your hand, invalid choice\n");
        -:  929:	      printf("Must gain an estate if there are any\n");
        -:  930:	    }
    #####:  931:	    if (supplyCount(estate, state) > 0){
    #####:  932:	      gainCard(estate, state, 0, currentPlayer);
    #####:  933:	      state->supplyCount[estate]--;//Decrement estates
    #####:  934:	      if (supplyCount(estate, state) == 0){
    #####:  935:		isGameOver(state);
    #####:  936:	      }
    #####:  937:	    }
    #####:  938:	    card_not_discarded = 0;//Exit the loop
    #####:  939:	  }
        -:  940:			    
        -:  941:	  else{
    #####:  942:	    p++;//Next card
        -:  943:	  }
        -:  944:	}
    #####:  945:      }
        -:  946:			    
        -:  947:      else{
        3:  948:	if (supplyCount(estate, state) > 0){
        3:  949:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
        3:  950:	  state->supplyCount[estate]--;//Decrement Estates
        3:  951:	  if (supplyCount(estate, state) == 0){
    #####:  952:	    isGameOver(state);
    #####:  953:	  }
        3:  954:	}
        -:  955:      }
        -:  956:	    
        -:  957:      
        3:  958:      return 0;
        -:  959:		
        -:  960:    case great_hall:
    #####:  961:      great_hallfun(currentPlayer, state, handPos);
        -:  962:		
        -:  963:    case minion:
        -:  964:      //+1 action
    #####:  965:      state->numActions++;
        -:  966:			
        -:  967:      //discard card from hand
    #####:  968:      discardCard(handPos, currentPlayer, state, 0);
        -:  969:			
    #####:  970:      if (choice1)		//+2 coins
        -:  971:	{
    #####:  972:	  state->coins = state->coins + 2;
    #####:  973:	}
        -:  974:			
    #####:  975:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  976:	{
        -:  977:	  //discard hand
    #####:  978:	  while(numHandCards(state) > 0)
        -:  979:	    {
    #####:  980:	      discardCard(handPos, currentPlayer, state, 0);
        -:  981:	    }
        -:  982:				
        -:  983:	  //draw 4
    #####:  984:	  for (i = 0; i < 4; i++)
        -:  985:	    {
    #####:  986:	      drawCard(currentPlayer, state);
    #####:  987:	    }
        -:  988:				
        -:  989:	  //other players discard hand and redraw if hand size > 4
    #####:  990:	  for (i = 0; i < state->numPlayers; i++)
        -:  991:	    {
    #####:  992:	      if (i != currentPlayer)
        -:  993:		{
    #####:  994:		  if ( state->handCount[i] > 4 )
        -:  995:		    {
        -:  996:		      //discard hand
    #####:  997:		      while( state->handCount[i] > 0 )
        -:  998:			{
    #####:  999:			  discardCard(handPos, i, state, 0);
        -: 1000:			}
        -: 1001:							
        -: 1002:		      //draw 4
    #####: 1003:		      for (j = 0; j < 4; j++)
        -: 1004:			{
    #####: 1005:			  drawCard(i, state);
    #####: 1006:			}
    #####: 1007:		    }
    #####: 1008:		}
    #####: 1009:	    }
        -: 1010:				
    #####: 1011:	}
    #####: 1012:      return 0;
        -: 1013:		
        -: 1014:    case steward:
    #####: 1015:      stewardfun(choice1, choice2, choice3, handPos, currentPlayer, state);
        -: 1016:
        -: 1017:		
        -: 1018:    case tribute:
    #####: 1019:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1020:	if (state->deckCount[nextPlayer] > 0){
    #####: 1021:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1022:	  state->deckCount[nextPlayer]--;
    #####: 1023:	}
    #####: 1024:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1025:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1026:	  state->discardCount[nextPlayer]--;
    #####: 1027:	}
        -: 1028:	else{
        -: 1029:	  //No Card to Reveal
        -: 1030:	  if (DEBUG){
        -: 1031:	    printf("No cards to reveal\n");
        -: 1032:	  }
        -: 1033:	}
    #####: 1034:      }
        -: 1035:	    
        -: 1036:      else{
    #####: 1037:	if (state->deckCount[nextPlayer] == 0){
    #####: 1038:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1039:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1040:	    state->deckCount[nextPlayer]++;
    #####: 1041:	    state->discard[nextPlayer][i] = -1;
    #####: 1042:	    state->discardCount[nextPlayer]--;
    #####: 1043:	  }
        -: 1044:			    
    #####: 1045:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1046:	} 
    #####: 1047:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1048:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1049:	state->deckCount[nextPlayer]--;
    #####: 1050:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1051:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1052:	state->deckCount[nextPlayer]--;
        -: 1053:      }    
        -: 1054:		       
    #####: 1055:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1056:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1057:	state->playedCardCount++;
    #####: 1058:	tributeRevealedCards[1] = -1;
    #####: 1059:      }
        -: 1060:
    #####: 1061:      for (i = 0; i <= 2; i ++){
    #####: 1062:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1063:	  state->coins += 2;
    #####: 1064:	}
        -: 1065:		    
    #####: 1066:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1067:	  drawCard(currentPlayer, state);
    #####: 1068:	  drawCard(currentPlayer, state);
    #####: 1069:	}
        -: 1070:	else{//Action Card
    #####: 1071:	  state->numActions = state->numActions + 2;
        -: 1072:	}
    #####: 1073:      }
        -: 1074:	    
    #####: 1075:      return 0;
        -: 1076:		
        -: 1077:    case ambassador:
    #####: 1078:      j = 0;		//used to check if player has enough cards to discard
        -: 1079:
    #####: 1080:      if (choice2 > 2 || choice2 < 0)
        -: 1081:	{
    #####: 1082:	  return -1;				
        -: 1083:	}
        -: 1084:
    #####: 1085:      if (choice1 == handPos)
        -: 1086:	{
    #####: 1087:	  return -1;
        -: 1088:	}
        -: 1089:
    #####: 1090:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1091:	{
    #####: 1092:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1093:	    {
    #####: 1094:	      j++;
    #####: 1095:	    }
    #####: 1096:	}
    #####: 1097:      if (j < choice2)
        -: 1098:	{
    #####: 1099:	  return -1;				
        -: 1100:	}
        -: 1101:
        -: 1102:      if (DEBUG) 
        -: 1103:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1104:
        -: 1105:      //increase supply count for choosen card by amount being discarded
    #####: 1106:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1107:			
        -: 1108:      //each other player gains a copy of revealed card
    #####: 1109:      for (i = 0; i < state->numPlayers; i++)
        -: 1110:	{
    #####: 1111:	  if (i != currentPlayer)
        -: 1112:	    {
    #####: 1113:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1114:	    }
    #####: 1115:	}
        -: 1116:
        -: 1117:      //discard played card from hand
    #####: 1118:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1119:
        -: 1120:      //trash copies of cards returned to supply
    #####: 1121:      for (j = 0; j < choice2; j++)
        -: 1122:	{
    #####: 1123:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1124:	    {
    #####: 1125:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1126:		{
    #####: 1127:		  discardCard(i, currentPlayer, state, 1);
    #####: 1128:		  break;
        -: 1129:		}
    #####: 1130:	    }
    #####: 1131:	}			
        -: 1132:
    #####: 1133:      return 0;
        -: 1134:		
        -: 1135:    case cutpurse:
        -: 1136:
    #####: 1137:      updateCoins(currentPlayer, state, 2);
    #####: 1138:      for (i = 0; i < state->numPlayers; i++)
        -: 1139:	{
    #####: 1140:	  if (i != currentPlayer)
        -: 1141:	    {
    #####: 1142:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1143:		{
    #####: 1144:		  if (state->hand[i][j] == copper)
        -: 1145:		    {
    #####: 1146:		      discardCard(j, i, state, 0);
    #####: 1147:		      break;
        -: 1148:		    }
    #####: 1149:		  if (j == state->handCount[i])
        -: 1150:		    {
    #####: 1151:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1152:			{
        -: 1153:			  if (DEBUG)
        -: 1154:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1155:			}	
    #####: 1156:		      break;
        -: 1157:		    }		
    #####: 1158:		}
        -: 1159:					
    #####: 1160:	    }
        -: 1161:				
    #####: 1162:	}				
        -: 1163:
        -: 1164:      //discard played card from hand
    #####: 1165:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1166:
    #####: 1167:      return 0;
        -: 1168:
        -: 1169:		
        -: 1170:    case embargo: 
        -: 1171:      //+2 Coins
    #####: 1172:      state->coins = state->coins + 2;
        -: 1173:			
        -: 1174:      //see if selected pile is in play
    #####: 1175:      if ( state->supplyCount[choice1] == -1 )
        -: 1176:	{
    #####: 1177:	  return -1;
        -: 1178:	}
        -: 1179:			
        -: 1180:      //add embargo token to selected supply pile
    #####: 1181:      state->embargoTokens[choice1]++;
        -: 1182:			
        -: 1183:      //trash card
    #####: 1184:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1185:      return 0;
        -: 1186:		
        -: 1187:    case outpost:
        -: 1188:      //set outpost flag
    #####: 1189:      state->outpostPlayed++;
        -: 1190:			
        -: 1191:      //discard card
    #####: 1192:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1193:      return 0;
        -: 1194:		
        -: 1195:    case salvager:
        -: 1196:      //+1 buy
    #####: 1197:      state->numBuys++;
        -: 1198:			
    #####: 1199:      if (choice1)
        -: 1200:	{
        -: 1201:	  //gain coins equal to trashed card
    #####: 1202:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1203:	  //trash card
    #####: 1204:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1205:	}
        -: 1206:			
        -: 1207:      //discard card
    #####: 1208:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1209:      return 0;
        -: 1210:		
        -: 1211:    case sea_hag:
    #####: 1212:      for (i = 0; i < state->numPlayers; i++){
    #####: 1213:	if (i != currentPlayer){
    #####: 1214:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1215:	  state->discardCount[i]++;
    #####: 1216:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1217:	}
    #####: 1218:      }
    #####: 1219:      return 0;
        -: 1220:		
        -: 1221:    case treasure_map:
        -: 1222:      //search hand for another treasure_map
    #####: 1223:      index = -1;
    #####: 1224:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1225:	{
    #####: 1226:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1227:	    {
    #####: 1228:	      index = i;
    #####: 1229:	      break;
        -: 1230:	    }
    #####: 1231:	}
    #####: 1232:      if (index > -1)
        -: 1233:	{
        -: 1234:	  //trash both treasure cards
    #####: 1235:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1236:	  discardCard(index, currentPlayer, state, 1);
        -: 1237:
        -: 1238:	  //gain 4 Gold cards
    #####: 1239:	  for (i = 0; i < 4; i++)
        -: 1240:	    {
    #####: 1241:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1242:	    }
        -: 1243:				
        -: 1244:	  //return success
    #####: 1245:	  return 1;
        -: 1246:	}
        -: 1247:			
        -: 1248:      //no second treasure_map found in hand
    #####: 1249:      return -1;
        -: 1250:    }
        -: 1251:	
    #####: 1252:  return -1;
       37: 1253:}
        -: 1254:
        -: 1255:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1256:{
        -: 1257:	
        -: 1258:  //if card is not trashed, added to Played pile 
      488: 1259:  if (trashFlag < 1)
        -: 1260:    {
        -: 1261:      //add card to played pile
      268: 1262:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      268: 1263:      state->playedCardCount++;
      268: 1264:    }
        -: 1265:	
        -: 1266:  //set played card to -1
      488: 1267:  state->hand[currentPlayer][handPos] = -1;
        -: 1268:	
        -: 1269:  //remove card from player's hand
      488: 1270:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1271:    {
        -: 1272:      //reduce number of cards in hand
       68: 1273:      state->handCount[currentPlayer]--;
       68: 1274:    }
      420: 1275:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1276:    {
        -: 1277:      //reduce number of cards in hand
       32: 1278:      state->handCount[currentPlayer]--;
       32: 1279:    }
        -: 1280:  else 	
        -: 1281:    {
        -: 1282:      //replace discarded card with last card in hand
      388: 1283:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1284:      //set last card to -1
      388: 1285:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1286:      //reduce number of cards in hand
      388: 1287:      state->handCount[currentPlayer]--;
        -: 1288:    }
        -: 1289:	
      488: 1290:  return 0;
        -: 1291:}
        -: 1292:
        -: 1293:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1294:{
        -: 1295:  //Note: supplyPos is enum of choosen card
        -: 1296:	
        -: 1297:  //check if supply pile is empty (0) or card is not used in game (-1)
     3408: 1298:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1299:    {
      476: 1300:      return -1;
        -: 1301:    }
        -: 1302:	
        -: 1303:  //added card for [whoseTurn] current player:
        -: 1304:  // toFlag = 0 : add to discard
        -: 1305:  // toFlag = 1 : add to deck
        -: 1306:  // toFlag = 2 : add to hand
        -: 1307:
     2932: 1308:  if (toFlag == 1)
        -: 1309:    {
     1190: 1310:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
     1190: 1311:      state->deckCount[player]++;
     1190: 1312:    }
     1742: 1313:  else if (toFlag == 2)
        -: 1314:    {
      952: 1315:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
      952: 1316:      state->handCount[player]++;
      952: 1317:    }
        -: 1318:  else
        -: 1319:    {
      790: 1320:      state->discard[player][ state->discardCount[player] ] = supplyPos;
      790: 1321:      state->discardCount[player]++;
        -: 1322:    }
        -: 1323:	
        -: 1324:  //decrease number in supply pile
     2932: 1325:  state->supplyCount[supplyPos]--;
        -: 1326:	 
     2932: 1327:  return 0;
     3408: 1328:}
        -: 1329:
        -: 1330:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1331:{
        -: 1332:  int i;
        -: 1333:	
        -: 1334:  //reset coin count
     4852: 1335:  state->coins = 0;
        -: 1336:
        -: 1337:  //add coins for each Treasure card in player's hand
    56968: 1338:  for (i = 0; i < state->handCount[player]; i++)
        -: 1339:    {
    23632: 1340:      if (state->hand[player][i] == copper)
        -: 1341:	{
    18274: 1342:	  state->coins += 1;
    18274: 1343:	}
     5358: 1344:      else if (state->hand[player][i] == silver)
        -: 1345:	{
      433: 1346:	  state->coins += 2;
      433: 1347:	}
     4925: 1348:      else if (state->hand[player][i] == gold)
        -: 1349:	{
      353: 1350:	  state->coins += 3;
      353: 1351:	}	
    23632: 1352:    }	
        -: 1353:
        -: 1354:  //add bonus
     4852: 1355:  state->coins += bonus;
        -: 1356:
     4852: 1357:  return 0;
        -: 1358:}
        -: 1359:
        -: 1360:
        -: 1361://end of dominion.c
        -: 1362:
TESTING scoreTest():
Testing with handPos 0
HandCount for current player: 8, Expected: 8
test passed
Buys: 2, Expected: 2
test passed
HandCount for other player: 1, Expected: 1
test passed
Testing with handPos 1
HandCount for current player: 8, Expected: 8
test passed
Buys: 2, Expected: 2
test passed
HandCount for other player: 1, Expected: 1
test passed
Testing with handPos 2
HandCount for current player: 8, Expected: 8
test passed
Buys: 2, Expected: 2
test passed
HandCount for other player: 1, Expected: 1
test passed
Testing with handPos 3
HandCount for current player: 8, Expected: 8
test passed
Buys: 2, Expected: 2
test passed
HandCount for other player: 1, Expected: 1
test passed
Testing with handPos 4
HandCount for current player: 8, Expected: 8
test passed
Buys: 2, Expected: 2
test passed
HandCount for other player: 1, Expected: 1
test passed
All tests passed!
File 'dominion.c'
Lines executed:51.01% of 643
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:42
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
   125511:    9:  if (*(int*)a > *(int*)b)
      336:   10:    return 1;
   125175:   11:  if (*(int*)a < *(int*)b)
    44814:   12:    return -1;
    80361:   13:  return 0;
   125511:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     4443:   44:  SelectStream(1);
     4443:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
     8886:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     4443:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    97746:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
   977460:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
   844170:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
   444300:   65:        }
    44430:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     4443:   73:  if (numPlayers == 2)
        -:   74:    {
     4443:   75:      state->supplyCount[curse] = 10;
     4443:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     4443:   87:  if (numPlayers == 2)
        -:   88:    {
     4443:   89:      state->supplyCount[estate] = 8;
     4443:   90:      state->supplyCount[duchy] = 8;
     4443:   91:      state->supplyCount[province] = 8;
     4443:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     4443:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     4443:  102:  state->supplyCount[silver] = 40;
     4443:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   186606:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
  1466190:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
   688665:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    84419:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
     8884:  115:		  if (numPlayers == 2){ 
     8884:  116:		    state->supplyCount[i] = 8; 
     8884:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
     8884:  119:		}
        -:  120:	      else
        -:  121:		{
    35546:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    44430:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   644235:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
   644235:  130:	}
        -:  131:
    88860:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    26658:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
     8886:  140:      state->deckCount[i] = 0;
    71088:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    26658:  143:	  state->deck[i][j] = estate;
    26658:  144:	  state->deckCount[i]++;
    26658:  145:	}
   142176:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    62202:  148:	  state->deck[i][j] = copper;
    62202:  149:	  state->deckCount[i]++;		
    62202:  150:	}
     8886:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    26658:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
     8886:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
     8886:  160:    }
        -:  161:
        -:  162:  //draw player hands
    26658:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     8886:  166:      state->handCount[i] = 0;
     8886:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
     8886:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
   248808:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
   119961:  178:      state->embargoTokens[i] = 0;
   119961:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     4443:  182:  state->outpostPlayed = 0;
     4443:  183:  state->phase = 0;
     4443:  184:  state->numActions = 1;
     4443:  185:  state->numBuys = 1;
     4443:  186:  state->playedCardCount = 0;
     4443:  187:  state->whoseTurn = 0;
     4443:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    53316:  192:  for (it = 0; it < 5; it++){
    22215:  193:    drawCard(state->whoseTurn, state);
    22215:  194:  }
        -:  195:
     4443:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     4443:  198:  return 0;
     4443:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    19477:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    19477:  209:  if (state->deckCount[player] < 1)
    10556:  210:    return -1;
     8921:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   196522:  214:  while (state->deckCount[player] > 0) {
    89340:  215:    card = floor(Random() * state->deckCount[player]);
    89340:  216:    newDeck[newDeckPos] = state->deck[player][card];
    89340:  217:    newDeckPos++;
   626384:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   223852:  219:      state->deck[player][i] = state->deck[player][i+1];
   223852:  220:    }
    89340:  221:    state->deckCount[player]--;
        -:  222:  }
   196522:  223:  for (i = 0; i < newDeckPos; i++) {
    89340:  224:    state->deck[player][i] = newDeck[i];
    89340:  225:    state->deckCount[player]++;
    89340:  226:  }
        -:  227:
     8921:  228:  return 0;
    19477:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
       61:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       61:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
       61:  243:  if ( state->numActions < 1 )
        -:  244:    {
       36:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
       25:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
       32:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
       18:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
        7:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        7:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        7:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
        7:  269:  return 0;
       61:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
       73:  280:  who = state->whoseTurn;
        -:  281:
       73:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
       73:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
       73:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
       73:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
       73:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
       73:  299:    state->coins = (state->coins) - (getCost(supplyPos));
       73:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
       73:  308:  return 0;
       73:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
      536:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
     1128:  316:  int currentPlayer = whoseTurn(state);
     1128:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
     6479:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
      770:  326:  int count = 0;
        -:  327:
    11386:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
     5691:  330:      if (state->deck[player][i] == card) count++;
     4923:  331:    }
        -:  332:
    26858:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    14834:  335:      if (state->hand[player][i] == card) count++;
    12659:  336:    }
        -:  337:
    20356:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    10976:  340:      if (state->discard[player][i] == card) count++;
     9408:  341:    }
        -:  342:
      770:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
     1860:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
       77:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
      988:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
      417:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      417:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
      417:  359:  }
       77:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
       77:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
       39:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
       39:  365:  }
        -:  366:  else{
       38:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
       77:  370:  state->outpostPlayed = 0;
       77:  371:  state->phase = 0;
       77:  372:  state->numActions = 1;
       77:  373:  state->coins = 0;
       77:  374:  state->numBuys = 1;
       77:  375:  state->playedCardCount = 0;
       77:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
      924:  380:  for (k = 0; k < 5; k++){
      385:  381:    drawCard(state->whoseTurn, state);//Draw a card
      385:  382:  }
        -:  383:
        -:  384:  //Update money
       77:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
       77:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
      445:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
      152:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
      293:  401:  j = 0;
    15236:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
     7325:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
      432:  406:	  j++;
      432:  407:	}
     7325:  408:    }
      293:  409:  if ( j >= 3)
        -:  410:    {
       72:  411:      return 1;
        -:  412:    }
        -:  413:
      221:  414:  return 0;
      445:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
      154:  420:  int score = 0;
        -:  421:  //score from hand
     3928:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
     2126:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
     2095:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
     2098:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
     2103:  427:      if (state->hand[player][i] == province) { score = score + 6; };
     2106:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
     2110:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     1810:  430:    }
        -:  431:
        -:  432:  //score from discard
     2264:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
     1138:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
     1140:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
     1138:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
     1142:  438:      if (state->discard[player][i] == province) { score = score + 6; };
     1138:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
     1138:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
      978:  441:    }
        -:  442:
        -:  443:  //score from deck
     2264:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
     1138:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
     1141:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
     1138:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
     1140:  449:      if (state->deck[player][i] == province) { score = score + 6; };
     1138:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
     1138:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
      978:  452:    }
        -:  453:
      154:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    28717:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    12086:  533:    for (i = 0; i < state->discardCount[player];i++){
      480:  534:      state->deck[player][i] = state->discard[player][i];
      480:  535:      state->discard[player][i] = -1;
      480:  536:    }
        -:  537:
     5563:  538:    state->deckCount[player] = state->discardCount[player];
     5563:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     5563:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     5563:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     5563:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     5563:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     5563:  559:    if (deckCounter == 0)
     5528:  560:      return -1;
        -:  561:
       35:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       35:  563:    state->deckCount[player]--;
       35:  564:    state->handCount[player]++;//Increment hand count
       35:  565:  }
        -:  566:
        -:  567:  else{
    23154:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    23154:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    23154:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    23154:  576:    state->deckCount[player]--;
    23154:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    23189:  580:  return 0;
    28717:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
      146:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
       32:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
       70:  598:      return 3;
        -:  599:    case gold:
       28:  600:      return 6;
        -:  601:    case adventurer:
        8:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
        8:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
      146:  644:}
        -:  645:
        -:  646://smithy function to introduce a bug
        -:  647:int smithyfun(int currentPlayer, struct gameState *state, int handPos){
        -:  648:  //+3 Cards
        -:  649:  int i;
      428:  650:  for (i = 0; i <= 3; i++)
        -:  651:  {
      171:  652:    drawCard(currentPlayer, state);
      171:  653:  }
        -:  654:      
        -:  655:      //discard card from hand
       43:  656:      discardCard(handPos, currentPlayer, state, 0);
       43:  657:      return 0;
        -:  658:}
        -:  659:
        -:  660://adventurer function to introduce a bug
        -:  661:int adventurerfun(int currentPlayer, struct gameState *state){
        -:  662:    int cardDrawn;
        -:  663:    int temphand[MAX_HAND];
2291246309455167530:  664:    int drawntreasure = 0;
2291246309455167530:  665:    int z = 0;
        -:  666:
10104103169071346622:  667:  while(drawntreasure <= 2){
72057701412115419:  668:      if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
17981539514:  669:          shuffle(currentPlayer, state);
17981539514:  670:      }
7018965447127852258:  671:  drawCard(currentPlayer, state);
7018965447127852258:  672:  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
14469171020717092264:  673:  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    28331:  674:  drawntreasure++;
        -:  675:  else{
     4993:  676:  temphand[z]=cardDrawn;
     4993:  677:  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     4993:  678:  z++;
        -:  679:  }
        -:  680:}
        -:  681:    
    10114:  682:    while(z-1>=0){
     4993:  683:  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     4993:  684:      z=z-1;
        -:  685:    }
       64:  686:    return 0;
        -:  687:}
        -:  688:
        -:  689:int villagefun(int handPos, int currentPlayer, struct gameState *state){
        -:  690:        //+1 Card
        3:  691:        drawCard(currentPlayer, state);
        -:  692:        
        -:  693:        //+2 Actions
        3:  694:        state->numActions = state->numActions + 2;
        -:  695:        
        -:  696:        //discard played card from hand
        -:  697:        //discardCard(handPos, currentPlayer, state, 0);
        3:  698:        return 0;
        -:  699:}
        -:  700:
        -:  701:int great_hallfun(int currentPlayer, struct gameState *state, int handPos){
        -:  702:        //+1 Card
    #####:  703:        drawCard(currentPlayer, state);
        -:  704:        
        -:  705:        //+1 Actions
    #####:  706:        state->numActions++;
        -:  707:        
        -:  708:        //discard card from hand
    #####:  709:        discardCard(handPos, currentPlayer, state, 0);
    #####:  710:        return 0;
        -:  711:}
        -:  712:
        -:  713:int stewardfun(int choice1, int choice2, int choice3, int handPos, int currentPlayer, struct gameState *state){
        -:  714:
       90:  715:  if (choice1 == 1)
        -:  716:	{
        -:  717:	  //+2 cards
       30:  718:	  drawCard(currentPlayer, state);
       30:  719:	  drawCard(currentPlayer, state);
       30:  720:	}
       60:  721:      else if (choice2 == 2)
        -:  722:	{
        -:  723:	  //+2 coins
    #####:  724:	  state->coins = state->coins + 2;
    #####:  725:	}
        -:  726:      else
        -:  727:	{
        -:  728:	  //trash 2 cards in hand
       60:  729:	  discardCard(choice2, currentPlayer, state, 1);
       60:  730:	  discardCard(choice3, currentPlayer, state, 1);
        -:  731:	}
        -:  732:			
        -:  733:      //discard card from hand
       90:  734:      discardCard(handPos, currentPlayer, state, 0);
       90:  735:      return 0;
        -:  736:}
        -:  737:
        -:  738:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  739:{
        -:  740:  int i;
        -:  741:  int j;
        -:  742:  int k;
        -:  743:  int x;
        -:  744:  int index;
       42:  745:  int currentPlayer = whoseTurn(state);
       42:  746:  int nextPlayer = currentPlayer + 1;
        -:  747:
       42:  748:  int tributeRevealedCards[2] = {-1, -1};
        -:  749:  int temphand[MAX_HAND];// moved above the if statement
       42:  750:  if (nextPlayer > (state->numPlayers - 1)){
        4:  751:    nextPlayer = 0;
        4:  752:  }
        -:  753:  
        -:  754:	
        -:  755:  //uses switch to select card and perform actions
       52:  756:  switch( card ) 
        -:  757:    {
        -:  758:    case adventurer:
        4:  759:      adventurerfun(currentPlayer, state);
        -:  760:			
        -:  761:    case council_room:
        -:  762:      //+4 Cards
      390:  763:      for (i = 0; i < 4; i++)
        -:  764:	{
      156:  765:	  drawCard(currentPlayer, state);
      156:  766:	}
        -:  767:			
        -:  768:      //+1 Buy
       39:  769:      state->numBuys++;
        -:  770:			
        -:  771:      //Each other player draws a card
      234:  772:      for (i = 0; i < state->numPlayers; i++)
        -:  773:	{
       78:  774:	  if ( i != currentPlayer )
        -:  775:	    {
       39:  776:	      drawCard(i, state);
       39:  777:	    }
       78:  778:	}
        -:  779:			
        -:  780:      //put played card in played card pile
       39:  781:      discardCard(handPos, currentPlayer, state, 0);
        -:  782:			
       39:  783:      return 0;
        -:  784:			
        -:  785:    case feast:
        -:  786:      //gain card with cost up to 5
        -:  787:      //Backup hand
    #####:  788:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  789:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  790:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  791:      }
        -:  792:      //Backup hand
        -:  793:
        -:  794:      //Update Coins for Buy
    #####:  795:      updateCoins(currentPlayer, state, 5);
    #####:  796:      x = 1;//Condition to loop on
    #####:  797:      while( x == 1) {//Buy one card
    #####:  798:	if (supplyCount(choice1, state) <= 0){
        -:  799:	  if (DEBUG)
        -:  800:	    printf("None of that card left, sorry!\n");
        -:  801:
        -:  802:	  if (DEBUG){
        -:  803:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  804:	  }
    #####:  805:	}
    #####:  806:	else if (state->coins < getCost(choice1)){
    #####:  807:	  printf("That card is too expensive!\n");
        -:  808:
        -:  809:	  if (DEBUG){
        -:  810:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  811:	  }
    #####:  812:	}
        -:  813:	else{
        -:  814:
        -:  815:	  if (DEBUG){
        -:  816:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  817:	  }
        -:  818:
    #####:  819:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  820:	  x = 0;//No more buying cards
        -:  821:
        -:  822:	  if (DEBUG){
        -:  823:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  824:	  }
        -:  825:
        -:  826:	}
        -:  827:      }     
        -:  828:
        -:  829:      //Reset Hand
    #####:  830:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  831:	state->hand[currentPlayer][i] = temphand[i];
    #####:  832:	temphand[i] = -1;
    #####:  833:      }
        -:  834:      //Reset Hand
        -:  835:      			
    #####:  836:      return 0;
        -:  837:			
        -:  838:    case gardens:
    #####:  839:      return -1;
        -:  840:			
        -:  841:    case mine:
    #####:  842:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  843:
    #####:  844:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  845:	{
    #####:  846:	  return -1;
        -:  847:	}
        -:  848:		
    #####:  849:      if (choice2 > treasure_map || choice2 < curse)
        -:  850:	{
    #####:  851:	  return -1;
        -:  852:	}
        -:  853:
    #####:  854:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  855:	{
    #####:  856:	  return -1;
        -:  857:	}
        -:  858:
    #####:  859:      gainCard(choice2, state, 2, currentPlayer);
        -:  860:
        -:  861:      //discard card from hand
    #####:  862:      discardCard(handPos, currentPlayer, state, 0);
        -:  863:
        -:  864:      //discard trashed card
    #####:  865:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  866:	{
    #####:  867:	  if (state->hand[currentPlayer][i] == j)
        -:  868:	    {
    #####:  869:	      discardCard(i, currentPlayer, state, 0);			
    #####:  870:	      break;
        -:  871:	    }
    #####:  872:	}
        -:  873:			
    #####:  874:      return 0;
        -:  875:			
        -:  876:    case remodel:
    #####:  877:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  878:
    #####:  879:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  880:	{
    #####:  881:	  return -1;
        -:  882:	}
        -:  883:
    #####:  884:      gainCard(choice2, state, 0, currentPlayer);
        -:  885:
        -:  886:      //discard card from hand
    #####:  887:      discardCard(handPos, currentPlayer, state, 0);
        -:  888:
        -:  889:      //discard trashed card
    #####:  890:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  891:	{
    #####:  892:	  if (state->hand[currentPlayer][i] == j)
        -:  893:	    {
    #####:  894:	      discardCard(i, currentPlayer, state, 0);			
    #####:  895:	      break;
        -:  896:	    }
    #####:  897:	}
        -:  898:
        -:  899:
    #####:  900:      return 0;
        -:  901:		
        -:  902:    case smithy:
        -:  903:      //+3 Cards
        3:  904:      smithyfun(currentPlayer, state, handPos);
        -:  905:
        -:  906:    case village:
        3:  907:      villagefun(handPos, currentPlayer, state);
        -:  908:		
        -:  909:    case baron:
        3:  910:      state->numBuys++;//Increase buys by 1!
        3:  911:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  912:	int p = 0;//Iterator for hand!
    #####:  913:	int card_not_discarded = 1;//Flag for discard set!
    #####:  914:	while(card_not_discarded){
    #####:  915:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  916:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  917:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  918:	    state->discardCount[currentPlayer]++;
    #####:  919:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  920:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  921:	    }
    #####:  922:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  923:	    state->handCount[currentPlayer]--;
    #####:  924:	    card_not_discarded = 0;//Exit the loop
    #####:  925:	  }
    #####:  926:	  else if (p > state->handCount[currentPlayer]){
        -:  927:	    if(DEBUG) {
        -:  928:	      printf("No estate cards in your hand, invalid choice\n");
        -:  929:	      printf("Must gain an estate if there are any\n");
        -:  930:	    }
    #####:  931:	    if (supplyCount(estate, state) > 0){
    #####:  932:	      gainCard(estate, state, 0, currentPlayer);
    #####:  933:	      state->supplyCount[estate]--;//Decrement estates
    #####:  934:	      if (supplyCount(estate, state) == 0){
    #####:  935:		isGameOver(state);
    #####:  936:	      }
    #####:  937:	    }
    #####:  938:	    card_not_discarded = 0;//Exit the loop
    #####:  939:	  }
        -:  940:			    
        -:  941:	  else{
    #####:  942:	    p++;//Next card
        -:  943:	  }
        -:  944:	}
    #####:  945:      }
        -:  946:			    
        -:  947:      else{
        3:  948:	if (supplyCount(estate, state) > 0){
        3:  949:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
        3:  950:	  state->supplyCount[estate]--;//Decrement Estates
        3:  951:	  if (supplyCount(estate, state) == 0){
    #####:  952:	    isGameOver(state);
    #####:  953:	  }
        3:  954:	}
        -:  955:      }
        -:  956:	    
        -:  957:      
        3:  958:      return 0;
        -:  959:		
        -:  960:    case great_hall:
    #####:  961:      great_hallfun(currentPlayer, state, handPos);
        -:  962:		
        -:  963:    case minion:
        -:  964:      //+1 action
    #####:  965:      state->numActions++;
        -:  966:			
        -:  967:      //discard card from hand
    #####:  968:      discardCard(handPos, currentPlayer, state, 0);
        -:  969:			
    #####:  970:      if (choice1)		//+2 coins
        -:  971:	{
    #####:  972:	  state->coins = state->coins + 2;
    #####:  973:	}
        -:  974:			
    #####:  975:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  976:	{
        -:  977:	  //discard hand
    #####:  978:	  while(numHandCards(state) > 0)
        -:  979:	    {
    #####:  980:	      discardCard(handPos, currentPlayer, state, 0);
        -:  981:	    }
        -:  982:				
        -:  983:	  //draw 4
    #####:  984:	  for (i = 0; i < 4; i++)
        -:  985:	    {
    #####:  986:	      drawCard(currentPlayer, state);
    #####:  987:	    }
        -:  988:				
        -:  989:	  //other players discard hand and redraw if hand size > 4
    #####:  990:	  for (i = 0; i < state->numPlayers; i++)
        -:  991:	    {
    #####:  992:	      if (i != currentPlayer)
        -:  993:		{
    #####:  994:		  if ( state->handCount[i] > 4 )
        -:  995:		    {
        -:  996:		      //discard hand
    #####:  997:		      while( state->handCount[i] > 0 )
        -:  998:			{
    #####:  999:			  discardCard(handPos, i, state, 0);
        -: 1000:			}
        -: 1001:							
        -: 1002:		      //draw 4
    #####: 1003:		      for (j = 0; j < 4; j++)
        -: 1004:			{
    #####: 1005:			  drawCard(i, state);
    #####: 1006:			}
    #####: 1007:		    }
    #####: 1008:		}
    #####: 1009:	    }
        -: 1010:				
    #####: 1011:	}
    #####: 1012:      return 0;
        -: 1013:		
        -: 1014:    case steward:
    #####: 1015:      stewardfun(choice1, choice2, choice3, handPos, currentPlayer, state);
        -: 1016:
        -: 1017:		
        -: 1018:    case tribute:
    #####: 1019:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1020:	if (state->deckCount[nextPlayer] > 0){
    #####: 1021:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1022:	  state->deckCount[nextPlayer]--;
    #####: 1023:	}
    #####: 1024:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1025:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1026:	  state->discardCount[nextPlayer]--;
    #####: 1027:	}
        -: 1028:	else{
        -: 1029:	  //No Card to Reveal
        -: 1030:	  if (DEBUG){
        -: 1031:	    printf("No cards to reveal\n");
        -: 1032:	  }
        -: 1033:	}
    #####: 1034:      }
        -: 1035:	    
        -: 1036:      else{
    #####: 1037:	if (state->deckCount[nextPlayer] == 0){
    #####: 1038:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1039:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1040:	    state->deckCount[nextPlayer]++;
    #####: 1041:	    state->discard[nextPlayer][i] = -1;
    #####: 1042:	    state->discardCount[nextPlayer]--;
    #####: 1043:	  }
        -: 1044:			    
    #####: 1045:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1046:	} 
    #####: 1047:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1048:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1049:	state->deckCount[nextPlayer]--;
    #####: 1050:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1051:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1052:	state->deckCount[nextPlayer]--;
        -: 1053:      }    
        -: 1054:		       
    #####: 1055:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1056:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1057:	state->playedCardCount++;
    #####: 1058:	tributeRevealedCards[1] = -1;
    #####: 1059:      }
        -: 1060:
    #####: 1061:      for (i = 0; i <= 2; i ++){
    #####: 1062:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1063:	  state->coins += 2;
    #####: 1064:	}
        -: 1065:		    
    #####: 1066:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1067:	  drawCard(currentPlayer, state);
    #####: 1068:	  drawCard(currentPlayer, state);
    #####: 1069:	}
        -: 1070:	else{//Action Card
    #####: 1071:	  state->numActions = state->numActions + 2;
        -: 1072:	}
    #####: 1073:      }
        -: 1074:	    
    #####: 1075:      return 0;
        -: 1076:		
        -: 1077:    case ambassador:
    #####: 1078:      j = 0;		//used to check if player has enough cards to discard
        -: 1079:
    #####: 1080:      if (choice2 > 2 || choice2 < 0)
        -: 1081:	{
    #####: 1082:	  return -1;				
        -: 1083:	}
        -: 1084:
    #####: 1085:      if (choice1 == handPos)
        -: 1086:	{
    #####: 1087:	  return -1;
        -: 1088:	}
        -: 1089:
    #####: 1090:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1091:	{
    #####: 1092:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1093:	    {
    #####: 1094:	      j++;
    #####: 1095:	    }
    #####: 1096:	}
    #####: 1097:      if (j < choice2)
        -: 1098:	{
    #####: 1099:	  return -1;				
        -: 1100:	}
        -: 1101:
        -: 1102:      if (DEBUG) 
        -: 1103:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1104:
        -: 1105:      //increase supply count for choosen card by amount being discarded
    #####: 1106:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1107:			
        -: 1108:      //each other player gains a copy of revealed card
    #####: 1109:      for (i = 0; i < state->numPlayers; i++)
        -: 1110:	{
    #####: 1111:	  if (i != currentPlayer)
        -: 1112:	    {
    #####: 1113:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1114:	    }
    #####: 1115:	}
        -: 1116:
        -: 1117:      //discard played card from hand
    #####: 1118:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1119:
        -: 1120:      //trash copies of cards returned to supply
    #####: 1121:      for (j = 0; j < choice2; j++)
        -: 1122:	{
    #####: 1123:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1124:	    {
    #####: 1125:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1126:		{
    #####: 1127:		  discardCard(i, currentPlayer, state, 1);
    #####: 1128:		  break;
        -: 1129:		}
    #####: 1130:	    }
    #####: 1131:	}			
        -: 1132:
    #####: 1133:      return 0;
        -: 1134:		
        -: 1135:    case cutpurse:
        -: 1136:
    #####: 1137:      updateCoins(currentPlayer, state, 2);
    #####: 1138:      for (i = 0; i < state->numPlayers; i++)
        -: 1139:	{
    #####: 1140:	  if (i != currentPlayer)
        -: 1141:	    {
    #####: 1142:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1143:		{
    #####: 1144:		  if (state->hand[i][j] == copper)
        -: 1145:		    {
    #####: 1146:		      discardCard(j, i, state, 0);
    #####: 1147:		      break;
        -: 1148:		    }
    #####: 1149:		  if (j == state->handCount[i])
        -: 1150:		    {
    #####: 1151:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1152:			{
        -: 1153:			  if (DEBUG)
        -: 1154:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1155:			}	
    #####: 1156:		      break;
        -: 1157:		    }		
    #####: 1158:		}
        -: 1159:					
    #####: 1160:	    }
        -: 1161:				
    #####: 1162:	}				
        -: 1163:
        -: 1164:      //discard played card from hand
    #####: 1165:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1166:
    #####: 1167:      return 0;
        -: 1168:
        -: 1169:		
        -: 1170:    case embargo: 
        -: 1171:      //+2 Coins
    #####: 1172:      state->coins = state->coins + 2;
        -: 1173:			
        -: 1174:      //see if selected pile is in play
    #####: 1175:      if ( state->supplyCount[choice1] == -1 )
        -: 1176:	{
    #####: 1177:	  return -1;
        -: 1178:	}
        -: 1179:			
        -: 1180:      //add embargo token to selected supply pile
    #####: 1181:      state->embargoTokens[choice1]++;
        -: 1182:			
        -: 1183:      //trash card
    #####: 1184:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1185:      return 0;
        -: 1186:		
        -: 1187:    case outpost:
        -: 1188:      //set outpost flag
    #####: 1189:      state->outpostPlayed++;
        -: 1190:			
        -: 1191:      //discard card
    #####: 1192:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1193:      return 0;
        -: 1194:		
        -: 1195:    case salvager:
        -: 1196:      //+1 buy
    #####: 1197:      state->numBuys++;
        -: 1198:			
    #####: 1199:      if (choice1)
        -: 1200:	{
        -: 1201:	  //gain coins equal to trashed card
    #####: 1202:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1203:	  //trash card
    #####: 1204:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1205:	}
        -: 1206:			
        -: 1207:      //discard card
    #####: 1208:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1209:      return 0;
        -: 1210:		
        -: 1211:    case sea_hag:
    #####: 1212:      for (i = 0; i < state->numPlayers; i++){
    #####: 1213:	if (i != currentPlayer){
    #####: 1214:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1215:	  state->discardCount[i]++;
    #####: 1216:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1217:	}
    #####: 1218:      }
    #####: 1219:      return 0;
        -: 1220:		
        -: 1221:    case treasure_map:
        -: 1222:      //search hand for another treasure_map
    #####: 1223:      index = -1;
    #####: 1224:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1225:	{
    #####: 1226:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1227:	    {
    #####: 1228:	      index = i;
    #####: 1229:	      break;
        -: 1230:	    }
    #####: 1231:	}
    #####: 1232:      if (index > -1)
        -: 1233:	{
        -: 1234:	  //trash both treasure cards
    #####: 1235:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1236:	  discardCard(index, currentPlayer, state, 1);
        -: 1237:
        -: 1238:	  //gain 4 Gold cards
    #####: 1239:	  for (i = 0; i < 4; i++)
        -: 1240:	    {
    #####: 1241:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1242:	    }
        -: 1243:				
        -: 1244:	  //return success
    #####: 1245:	  return 1;
        -: 1246:	}
        -: 1247:			
        -: 1248:      //no second treasure_map found in hand
    #####: 1249:      return -1;
        -: 1250:    }
        -: 1251:	
    #####: 1252:  return -1;
       42: 1253:}
        -: 1254:
        -: 1255:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1256:{
        -: 1257:	
        -: 1258:  //if card is not trashed, added to Played pile 
      493: 1259:  if (trashFlag < 1)
        -: 1260:    {
        -: 1261:      //add card to played pile
      273: 1262:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      273: 1263:      state->playedCardCount++;
      273: 1264:    }
        -: 1265:	
        -: 1266:  //set played card to -1
      493: 1267:  state->hand[currentPlayer][handPos] = -1;
        -: 1268:	
        -: 1269:  //remove card from player's hand
      493: 1270:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1271:    {
        -: 1272:      //reduce number of cards in hand
       68: 1273:      state->handCount[currentPlayer]--;
       68: 1274:    }
      425: 1275:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1276:    {
        -: 1277:      //reduce number of cards in hand
       32: 1278:      state->handCount[currentPlayer]--;
       32: 1279:    }
        -: 1280:  else 	
        -: 1281:    {
        -: 1282:      //replace discarded card with last card in hand
      393: 1283:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1284:      //set last card to -1
      393: 1285:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1286:      //reduce number of cards in hand
      393: 1287:      state->handCount[currentPlayer]--;
        -: 1288:    }
        -: 1289:	
      493: 1290:  return 0;
        -: 1291:}
        -: 1292:
        -: 1293:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1294:{
        -: 1295:  //Note: supplyPos is enum of choosen card
        -: 1296:	
        -: 1297:  //check if supply pile is empty (0) or card is not used in game (-1)
     3408: 1298:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1299:    {
      476: 1300:      return -1;
        -: 1301:    }
        -: 1302:	
        -: 1303:  //added card for [whoseTurn] current player:
        -: 1304:  // toFlag = 0 : add to discard
        -: 1305:  // toFlag = 1 : add to deck
        -: 1306:  // toFlag = 2 : add to hand
        -: 1307:
     2932: 1308:  if (toFlag == 1)
        -: 1309:    {
     1190: 1310:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
     1190: 1311:      state->deckCount[player]++;
     1190: 1312:    }
     1742: 1313:  else if (toFlag == 2)
        -: 1314:    {
      952: 1315:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
      952: 1316:      state->handCount[player]++;
      952: 1317:    }
        -: 1318:  else
        -: 1319:    {
      790: 1320:      state->discard[player][ state->discardCount[player] ] = supplyPos;
      790: 1321:      state->discardCount[player]++;
        -: 1322:    }
        -: 1323:	
        -: 1324:  //decrease number in supply pile
     2932: 1325:  state->supplyCount[supplyPos]--;
        -: 1326:	 
     2932: 1327:  return 0;
     3408: 1328:}
        -: 1329:
        -: 1330:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1331:{
        -: 1332:  int i;
        -: 1333:	
        -: 1334:  //reset coin count
     4857: 1335:  state->coins = 0;
        -: 1336:
        -: 1337:  //add coins for each Treasure card in player's hand
    57028: 1338:  for (i = 0; i < state->handCount[player]; i++)
        -: 1339:    {
    23657: 1340:      if (state->hand[player][i] == copper)
        -: 1341:	{
    18294: 1342:	  state->coins += 1;
    18294: 1343:	}
     5363: 1344:      else if (state->hand[player][i] == silver)
        -: 1345:	{
      433: 1346:	  state->coins += 2;
      433: 1347:	}
     4930: 1348:      else if (state->hand[player][i] == gold)
        -: 1349:	{
      353: 1350:	  state->coins += 3;
      353: 1351:	}	
    23657: 1352:    }	
        -: 1353:
        -: 1354:  //add bonus
     4857: 1355:  state->coins += bonus;
        -: 1356:
     4857: 1357:  return 0;
        -: 1358:}
        -: 1359:
        -: 1360:
        -: 1361://end of dominion.c
        -: 1362:
TESTING scoreTest():
Testing with handcount: 0, discardcount: 0, deckCount: 0, and 0 of each card
Score: 0, Expected: 0
test passed
Testing with handcount: 0, discardcount: 0, deckCount: 0, and 0 of each card
Score: 0, Expected: 0
test passed
Testing with handcount: 0, discardcount: 0, deckCount: 0, and 0 of each card
Score: 0, Expected: 0
test passed
Testing with handcount: 6, discardcount: 0, deckCount: 0, and 1 of each card
Score: 10, Expected: 10
test passed
Testing with handcount: 6, discardcount: 6, deckCount: 0, and 1 of each card
Score: 30, Expected: 20
test FAILED
Testing with handcount: 6, discardcount: 6, deckCount: 6, and 1 of each card
Score: 30, Expected: 30
test passed
Testing with handcount: 12, discardcount: 0, deckCount: 0, and 2 of each card
Score: 20, Expected: 20
test passed
Testing with handcount: 12, discardcount: 12, deckCount: 0, and 2 of each card
Score: 60, Expected: 40
test FAILED
Testing with handcount: 12, discardcount: 12, deckCount: 12, and 2 of each card
Score: 60, Expected: 60
test passed
Testing with handcount: 18, discardcount: 0, deckCount: 0, and 3 of each card
Score: 30, Expected: 30
test passed
Testing with handcount: 18, discardcount: 18, deckCount: 0, and 3 of each card
Score: 90, Expected: 60
test FAILED
Testing with handcount: 18, discardcount: 18, deckCount: 18, and 3 of each card
Score: 90, Expected: 90
test passed
Testing with handcount: 24, discardcount: 0, deckCount: 0, and 4 of each card
Score: 40, Expected: 40
test passed
Testing with handcount: 24, discardcount: 24, deckCount: 0, and 4 of each card
Score: 120, Expected: 80
test FAILED
Testing with handcount: 24, discardcount: 24, deckCount: 24, and 4 of each card
Score: 132, Expected: 120
test FAILED
Testing with handcount: 0, discardcount: 0, deckCount: 0, and 0 of each card
Score: 0, Expected: 0
test passed
Testing with handcount: 0, discardcount: 0, deckCount: 0, and 0 of each card
Score: 0, Expected: 0
test passed
Testing with handcount: 0, discardcount: 0, deckCount: 0, and 0 of each card
Score: 0, Expected: 0
test passed
Testing with handcount: 6, discardcount: 0, deckCount: 0, and 1 of each card
Score: 10, Expected: 10
test passed
Testing with handcount: 6, discardcount: 6, deckCount: 0, and 1 of each card
Score: 30, Expected: 20
test FAILED
Testing with handcount: 6, discardcount: 6, deckCount: 6, and 1 of each card
Score: 30, Expected: 30
test passed
Testing with handcount: 12, discardcount: 0, deckCount: 0, and 2 of each card
Score: 20, Expected: 20
test passed
Testing with handcount: 12, discardcount: 12, deckCount: 0, and 2 of each card
Score: 60, Expected: 40
test FAILED
Testing with handcount: 12, discardcount: 12, deckCount: 12, and 2 of each card
Score: 60, Expected: 60
test passed
Testing with handcount: 18, discardcount: 0, deckCount: 0, and 3 of each card
Score: 30, Expected: 30
test passed
Testing with handcount: 18, discardcount: 18, deckCount: 0, and 3 of each card
Score: 90, Expected: 60
test FAILED
Testing with handcount: 18, discardcount: 18, deckCount: 18, and 3 of each card
Score: 90, Expected: 90
test passed
Testing with handcount: 24, discardcount: 0, deckCount: 0, and 4 of each card
Score: 40, Expected: 40
test passed
Testing with handcount: 24, discardcount: 24, deckCount: 0, and 4 of each card
Score: 120, Expected: 80
test FAILED
Testing with handcount: 24, discardcount: 24, deckCount: 24, and 4 of each card
Score: 132, Expected: 120
test FAILED
Tests failed.
File 'dominion.c'
Lines executed:51.01% of 643
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:43
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
   125567:    9:  if (*(int*)a > *(int*)b)
      336:   10:    return 1;
   125231:   11:  if (*(int*)a < *(int*)b)
    44834:   12:    return -1;
    80397:   13:  return 0;
   125567:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     4445:   44:  SelectStream(1);
     4445:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
     8890:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     4445:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    97790:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
   977900:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
   844550:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
   444500:   65:        }
    44450:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     4445:   73:  if (numPlayers == 2)
        -:   74:    {
     4445:   75:      state->supplyCount[curse] = 10;
     4445:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     4445:   87:  if (numPlayers == 2)
        -:   88:    {
     4445:   89:      state->supplyCount[estate] = 8;
     4445:   90:      state->supplyCount[duchy] = 8;
     4445:   91:      state->supplyCount[province] = 8;
     4445:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     4445:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     4445:  102:  state->supplyCount[silver] = 40;
     4445:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   186690:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
  1466850:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
   688975:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    84457:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
     8888:  115:		  if (numPlayers == 2){ 
     8888:  116:		    state->supplyCount[i] = 8; 
     8888:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
     8888:  119:		}
        -:  120:	      else
        -:  121:		{
    35562:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    44450:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   644525:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
   644525:  130:	}
        -:  131:
    88900:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    26670:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
     8890:  140:      state->deckCount[i] = 0;
    71120:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    26670:  143:	  state->deck[i][j] = estate;
    26670:  144:	  state->deckCount[i]++;
    26670:  145:	}
   142240:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    62230:  148:	  state->deck[i][j] = copper;
    62230:  149:	  state->deckCount[i]++;		
    62230:  150:	}
     8890:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    26670:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
     8890:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
     8890:  160:    }
        -:  161:
        -:  162:  //draw player hands
    26670:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     8890:  166:      state->handCount[i] = 0;
     8890:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
     8890:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
   248920:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
   120015:  178:      state->embargoTokens[i] = 0;
   120015:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     4445:  182:  state->outpostPlayed = 0;
     4445:  183:  state->phase = 0;
     4445:  184:  state->numActions = 1;
     4445:  185:  state->numBuys = 1;
     4445:  186:  state->playedCardCount = 0;
     4445:  187:  state->whoseTurn = 0;
     4445:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    53340:  192:  for (it = 0; it < 5; it++){
    22225:  193:    drawCard(state->whoseTurn, state);
    22225:  194:  }
        -:  195:
     4445:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     4445:  198:  return 0;
     4445:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    19481:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    19481:  209:  if (state->deckCount[player] < 1)
    10556:  210:    return -1;
     8925:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   196610:  214:  while (state->deckCount[player] > 0) {
    89380:  215:    card = floor(Random() * state->deckCount[player]);
    89380:  216:    newDeck[newDeckPos] = state->deck[player][card];
    89380:  217:    newDeckPos++;
   626664:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   223952:  219:      state->deck[player][i] = state->deck[player][i+1];
   223952:  220:    }
    89380:  221:    state->deckCount[player]--;
        -:  222:  }
   196610:  223:  for (i = 0; i < newDeckPos; i++) {
    89380:  224:    state->deck[player][i] = newDeck[i];
    89380:  225:    state->deckCount[player]++;
    89380:  226:  }
        -:  227:
     8925:  228:  return 0;
    19481:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
       61:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       61:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
       61:  243:  if ( state->numActions < 1 )
        -:  244:    {
       36:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
       25:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
       32:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
       18:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
        7:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        7:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        7:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
        7:  269:  return 0;
       61:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
       73:  280:  who = state->whoseTurn;
        -:  281:
       73:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
       73:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
       73:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
       73:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
       73:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
       73:  299:    state->coins = (state->coins) - (getCost(supplyPos));
       73:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
       73:  308:  return 0;
       73:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
      536:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
     1128:  316:  int currentPlayer = whoseTurn(state);
     1128:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
     6479:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
      940:  326:  int count = 0;
        -:  327:
    14060:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
     7050:  330:      if (state->deck[player][i] == card) count++;
     6090:  331:    }
        -:  332:
    32872:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    18144:  335:      if (state->hand[player][i] == card) count++;
    15496:  336:    }
        -:  337:
    25400:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    13720:  340:      if (state->discard[player][i] == card) count++;
    11760:  341:    }
        -:  342:
      940:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
     1860:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
       77:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
      988:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
      417:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      417:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
      417:  359:  }
       77:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
       77:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
       39:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
       39:  365:  }
        -:  366:  else{
       38:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
       77:  370:  state->outpostPlayed = 0;
       77:  371:  state->phase = 0;
       77:  372:  state->numActions = 1;
       77:  373:  state->coins = 0;
       77:  374:  state->numBuys = 1;
       77:  375:  state->playedCardCount = 0;
       77:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
      924:  380:  for (k = 0; k < 5; k++){
      385:  381:    drawCard(state->whoseTurn, state);//Draw a card
      385:  382:  }
        -:  383:
        -:  384:  //Update money
       77:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
       77:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
      445:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
      152:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
      293:  401:  j = 0;
    15236:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
     7325:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
      432:  406:	  j++;
      432:  407:	}
     7325:  408:    }
      293:  409:  if ( j >= 3)
        -:  410:    {
       72:  411:      return 1;
        -:  412:    }
        -:  413:
      221:  414:  return 0;
      445:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
      184:  420:  int score = 0;
        -:  421:  //score from hand
     4708:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
     2546:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
     2515:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
     2518:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
     2523:  427:      if (state->hand[player][i] == province) { score = score + 6; };
     2526:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
     2530:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     2170:  430:    }
        -:  431:
        -:  432:  //score from discard
     2804:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
     1418:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
     1420:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
     1418:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
     1422:  438:      if (state->discard[player][i] == province) { score = score + 6; };
     1418:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
     1418:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     1218:  441:    }
        -:  442:
        -:  443:  //score from deck
     2804:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
     1418:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
     1421:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
     1418:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
     1420:  449:      if (state->deck[player][i] == province) { score = score + 6; };
     1418:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
     1418:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     1218:  452:    }
        -:  453:
      184:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    28727:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    12086:  533:    for (i = 0; i < state->discardCount[player];i++){
      480:  534:      state->deck[player][i] = state->discard[player][i];
      480:  535:      state->discard[player][i] = -1;
      480:  536:    }
        -:  537:
     5563:  538:    state->deckCount[player] = state->discardCount[player];
     5563:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     5563:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     5563:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     5563:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     5563:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     5563:  559:    if (deckCounter == 0)
     5528:  560:      return -1;
        -:  561:
       35:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       35:  563:    state->deckCount[player]--;
       35:  564:    state->handCount[player]++;//Increment hand count
       35:  565:  }
        -:  566:
        -:  567:  else{
    23164:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    23164:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    23164:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    23164:  576:    state->deckCount[player]--;
    23164:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    23199:  580:  return 0;
    28727:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
      146:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
       32:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
       70:  598:      return 3;
        -:  599:    case gold:
       28:  600:      return 6;
        -:  601:    case adventurer:
        8:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
        8:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
      146:  644:}
        -:  645:
        -:  646://smithy function to introduce a bug
        -:  647:int smithyfun(int currentPlayer, struct gameState *state, int handPos){
        -:  648:  //+3 Cards
        -:  649:  int i;
      428:  650:  for (i = 0; i <= 3; i++)
        -:  651:  {
      171:  652:    drawCard(currentPlayer, state);
      171:  653:  }
        -:  654:      
        -:  655:      //discard card from hand
       43:  656:      discardCard(handPos, currentPlayer, state, 0);
       43:  657:      return 0;
        -:  658:}
        -:  659:
        -:  660://adventurer function to introduce a bug
        -:  661:int adventurerfun(int currentPlayer, struct gameState *state){
        -:  662:    int cardDrawn;
        -:  663:    int temphand[MAX_HAND];
2291246309455167530:  664:    int drawntreasure = 0;
2291246309455167530:  665:    int z = 0;
        -:  666:
10104103169071346622:  667:  while(drawntreasure <= 2){
72057701412115419:  668:      if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
17981539514:  669:          shuffle(currentPlayer, state);
17981539514:  670:      }
7018965447127852258:  671:  drawCard(currentPlayer, state);
7018965447127852258:  672:  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
14469171020717092264:  673:  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    28331:  674:  drawntreasure++;
        -:  675:  else{
     4993:  676:  temphand[z]=cardDrawn;
     4993:  677:  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     4993:  678:  z++;
        -:  679:  }
        -:  680:}
        -:  681:    
    10114:  682:    while(z-1>=0){
     4993:  683:  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     4993:  684:      z=z-1;
        -:  685:    }
       64:  686:    return 0;
        -:  687:}
        -:  688:
        -:  689:int villagefun(int handPos, int currentPlayer, struct gameState *state){
        -:  690:        //+1 Card
        3:  691:        drawCard(currentPlayer, state);
        -:  692:        
        -:  693:        //+2 Actions
        3:  694:        state->numActions = state->numActions + 2;
        -:  695:        
        -:  696:        //discard played card from hand
        -:  697:        //discardCard(handPos, currentPlayer, state, 0);
        3:  698:        return 0;
        -:  699:}
        -:  700:
        -:  701:int great_hallfun(int currentPlayer, struct gameState *state, int handPos){
        -:  702:        //+1 Card
    #####:  703:        drawCard(currentPlayer, state);
        -:  704:        
        -:  705:        //+1 Actions
    #####:  706:        state->numActions++;
        -:  707:        
        -:  708:        //discard card from hand
    #####:  709:        discardCard(handPos, currentPlayer, state, 0);
    #####:  710:        return 0;
        -:  711:}
        -:  712:
        -:  713:int stewardfun(int choice1, int choice2, int choice3, int handPos, int currentPlayer, struct gameState *state){
        -:  714:
       90:  715:  if (choice1 == 1)
        -:  716:	{
        -:  717:	  //+2 cards
       30:  718:	  drawCard(currentPlayer, state);
       30:  719:	  drawCard(currentPlayer, state);
       30:  720:	}
       60:  721:      else if (choice2 == 2)
        -:  722:	{
        -:  723:	  //+2 coins
    #####:  724:	  state->coins = state->coins + 2;
    #####:  725:	}
        -:  726:      else
        -:  727:	{
        -:  728:	  //trash 2 cards in hand
       60:  729:	  discardCard(choice2, currentPlayer, state, 1);
       60:  730:	  discardCard(choice3, currentPlayer, state, 1);
        -:  731:	}
        -:  732:			
        -:  733:      //discard card from hand
       90:  734:      discardCard(handPos, currentPlayer, state, 0);
       90:  735:      return 0;
        -:  736:}
        -:  737:
        -:  738:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  739:{
        -:  740:  int i;
        -:  741:  int j;
        -:  742:  int k;
        -:  743:  int x;
        -:  744:  int index;
       42:  745:  int currentPlayer = whoseTurn(state);
       42:  746:  int nextPlayer = currentPlayer + 1;
        -:  747:
       42:  748:  int tributeRevealedCards[2] = {-1, -1};
        -:  749:  int temphand[MAX_HAND];// moved above the if statement
       42:  750:  if (nextPlayer > (state->numPlayers - 1)){
        4:  751:    nextPlayer = 0;
        4:  752:  }
        -:  753:  
        -:  754:	
        -:  755:  //uses switch to select card and perform actions
       52:  756:  switch( card ) 
        -:  757:    {
        -:  758:    case adventurer:
        4:  759:      adventurerfun(currentPlayer, state);
        -:  760:			
        -:  761:    case council_room:
        -:  762:      //+4 Cards
      390:  763:      for (i = 0; i < 4; i++)
        -:  764:	{
      156:  765:	  drawCard(currentPlayer, state);
      156:  766:	}
        -:  767:			
        -:  768:      //+1 Buy
       39:  769:      state->numBuys++;
        -:  770:			
        -:  771:      //Each other player draws a card
      234:  772:      for (i = 0; i < state->numPlayers; i++)
        -:  773:	{
       78:  774:	  if ( i != currentPlayer )
        -:  775:	    {
       39:  776:	      drawCard(i, state);
       39:  777:	    }
       78:  778:	}
        -:  779:			
        -:  780:      //put played card in played card pile
       39:  781:      discardCard(handPos, currentPlayer, state, 0);
        -:  782:			
       39:  783:      return 0;
        -:  784:			
        -:  785:    case feast:
        -:  786:      //gain card with cost up to 5
        -:  787:      //Backup hand
    #####:  788:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  789:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  790:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  791:      }
        -:  792:      //Backup hand
        -:  793:
        -:  794:      //Update Coins for Buy
    #####:  795:      updateCoins(currentPlayer, state, 5);
    #####:  796:      x = 1;//Condition to loop on
    #####:  797:      while( x == 1) {//Buy one card
    #####:  798:	if (supplyCount(choice1, state) <= 0){
        -:  799:	  if (DEBUG)
        -:  800:	    printf("None of that card left, sorry!\n");
        -:  801:
        -:  802:	  if (DEBUG){
        -:  803:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  804:	  }
    #####:  805:	}
    #####:  806:	else if (state->coins < getCost(choice1)){
    #####:  807:	  printf("That card is too expensive!\n");
        -:  808:
        -:  809:	  if (DEBUG){
        -:  810:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  811:	  }
    #####:  812:	}
        -:  813:	else{
        -:  814:
        -:  815:	  if (DEBUG){
        -:  816:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  817:	  }
        -:  818:
    #####:  819:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  820:	  x = 0;//No more buying cards
        -:  821:
        -:  822:	  if (DEBUG){
        -:  823:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  824:	  }
        -:  825:
        -:  826:	}
        -:  827:      }     
        -:  828:
        -:  829:      //Reset Hand
    #####:  830:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  831:	state->hand[currentPlayer][i] = temphand[i];
    #####:  832:	temphand[i] = -1;
    #####:  833:      }
        -:  834:      //Reset Hand
        -:  835:      			
    #####:  836:      return 0;
        -:  837:			
        -:  838:    case gardens:
    #####:  839:      return -1;
        -:  840:			
        -:  841:    case mine:
    #####:  842:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  843:
    #####:  844:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  845:	{
    #####:  846:	  return -1;
        -:  847:	}
        -:  848:		
    #####:  849:      if (choice2 > treasure_map || choice2 < curse)
        -:  850:	{
    #####:  851:	  return -1;
        -:  852:	}
        -:  853:
    #####:  854:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  855:	{
    #####:  856:	  return -1;
        -:  857:	}
        -:  858:
    #####:  859:      gainCard(choice2, state, 2, currentPlayer);
        -:  860:
        -:  861:      //discard card from hand
    #####:  862:      discardCard(handPos, currentPlayer, state, 0);
        -:  863:
        -:  864:      //discard trashed card
    #####:  865:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  866:	{
    #####:  867:	  if (state->hand[currentPlayer][i] == j)
        -:  868:	    {
    #####:  869:	      discardCard(i, currentPlayer, state, 0);			
    #####:  870:	      break;
        -:  871:	    }
    #####:  872:	}
        -:  873:			
    #####:  874:      return 0;
        -:  875:			
        -:  876:    case remodel:
    #####:  877:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  878:
    #####:  879:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  880:	{
    #####:  881:	  return -1;
        -:  882:	}
        -:  883:
    #####:  884:      gainCard(choice2, state, 0, currentPlayer);
        -:  885:
        -:  886:      //discard card from hand
    #####:  887:      discardCard(handPos, currentPlayer, state, 0);
        -:  888:
        -:  889:      //discard trashed card
    #####:  890:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  891:	{
    #####:  892:	  if (state->hand[currentPlayer][i] == j)
        -:  893:	    {
    #####:  894:	      discardCard(i, currentPlayer, state, 0);			
    #####:  895:	      break;
        -:  896:	    }
    #####:  897:	}
        -:  898:
        -:  899:
    #####:  900:      return 0;
        -:  901:		
        -:  902:    case smithy:
        -:  903:      //+3 Cards
        3:  904:      smithyfun(currentPlayer, state, handPos);
        -:  905:
        -:  906:    case village:
        3:  907:      villagefun(handPos, currentPlayer, state);
        -:  908:		
        -:  909:    case baron:
        3:  910:      state->numBuys++;//Increase buys by 1!
        3:  911:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  912:	int p = 0;//Iterator for hand!
    #####:  913:	int card_not_discarded = 1;//Flag for discard set!
    #####:  914:	while(card_not_discarded){
    #####:  915:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  916:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  917:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  918:	    state->discardCount[currentPlayer]++;
    #####:  919:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  920:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  921:	    }
    #####:  922:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  923:	    state->handCount[currentPlayer]--;
    #####:  924:	    card_not_discarded = 0;//Exit the loop
    #####:  925:	  }
    #####:  926:	  else if (p > state->handCount[currentPlayer]){
        -:  927:	    if(DEBUG) {
        -:  928:	      printf("No estate cards in your hand, invalid choice\n");
        -:  929:	      printf("Must gain an estate if there are any\n");
        -:  930:	    }
    #####:  931:	    if (supplyCount(estate, state) > 0){
    #####:  932:	      gainCard(estate, state, 0, currentPlayer);
    #####:  933:	      state->supplyCount[estate]--;//Decrement estates
    #####:  934:	      if (supplyCount(estate, state) == 0){
    #####:  935:		isGameOver(state);
    #####:  936:	      }
    #####:  937:	    }
    #####:  938:	    card_not_discarded = 0;//Exit the loop
    #####:  939:	  }
        -:  940:			    
        -:  941:	  else{
    #####:  942:	    p++;//Next card
        -:  943:	  }
        -:  944:	}
    #####:  945:      }
        -:  946:			    
        -:  947:      else{
        3:  948:	if (supplyCount(estate, state) > 0){
        3:  949:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
        3:  950:	  state->supplyCount[estate]--;//Decrement Estates
        3:  951:	  if (supplyCount(estate, state) == 0){
    #####:  952:	    isGameOver(state);
    #####:  953:	  }
        3:  954:	}
        -:  955:      }
        -:  956:	    
        -:  957:      
        3:  958:      return 0;
        -:  959:		
        -:  960:    case great_hall:
    #####:  961:      great_hallfun(currentPlayer, state, handPos);
        -:  962:		
        -:  963:    case minion:
        -:  964:      //+1 action
    #####:  965:      state->numActions++;
        -:  966:			
        -:  967:      //discard card from hand
    #####:  968:      discardCard(handPos, currentPlayer, state, 0);
        -:  969:			
    #####:  970:      if (choice1)		//+2 coins
        -:  971:	{
    #####:  972:	  state->coins = state->coins + 2;
    #####:  973:	}
        -:  974:			
    #####:  975:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  976:	{
        -:  977:	  //discard hand
    #####:  978:	  while(numHandCards(state) > 0)
        -:  979:	    {
    #####:  980:	      discardCard(handPos, currentPlayer, state, 0);
        -:  981:	    }
        -:  982:				
        -:  983:	  //draw 4
    #####:  984:	  for (i = 0; i < 4; i++)
        -:  985:	    {
    #####:  986:	      drawCard(currentPlayer, state);
    #####:  987:	    }
        -:  988:				
        -:  989:	  //other players discard hand and redraw if hand size > 4
    #####:  990:	  for (i = 0; i < state->numPlayers; i++)
        -:  991:	    {
    #####:  992:	      if (i != currentPlayer)
        -:  993:		{
    #####:  994:		  if ( state->handCount[i] > 4 )
        -:  995:		    {
        -:  996:		      //discard hand
    #####:  997:		      while( state->handCount[i] > 0 )
        -:  998:			{
    #####:  999:			  discardCard(handPos, i, state, 0);
        -: 1000:			}
        -: 1001:							
        -: 1002:		      //draw 4
    #####: 1003:		      for (j = 0; j < 4; j++)
        -: 1004:			{
    #####: 1005:			  drawCard(i, state);
    #####: 1006:			}
    #####: 1007:		    }
    #####: 1008:		}
    #####: 1009:	    }
        -: 1010:				
    #####: 1011:	}
    #####: 1012:      return 0;
        -: 1013:		
        -: 1014:    case steward:
    #####: 1015:      stewardfun(choice1, choice2, choice3, handPos, currentPlayer, state);
        -: 1016:
        -: 1017:		
        -: 1018:    case tribute:
    #####: 1019:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1020:	if (state->deckCount[nextPlayer] > 0){
    #####: 1021:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1022:	  state->deckCount[nextPlayer]--;
    #####: 1023:	}
    #####: 1024:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1025:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1026:	  state->discardCount[nextPlayer]--;
    #####: 1027:	}
        -: 1028:	else{
        -: 1029:	  //No Card to Reveal
        -: 1030:	  if (DEBUG){
        -: 1031:	    printf("No cards to reveal\n");
        -: 1032:	  }
        -: 1033:	}
    #####: 1034:      }
        -: 1035:	    
        -: 1036:      else{
    #####: 1037:	if (state->deckCount[nextPlayer] == 0){
    #####: 1038:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1039:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1040:	    state->deckCount[nextPlayer]++;
    #####: 1041:	    state->discard[nextPlayer][i] = -1;
    #####: 1042:	    state->discardCount[nextPlayer]--;
    #####: 1043:	  }
        -: 1044:			    
    #####: 1045:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1046:	} 
    #####: 1047:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1048:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1049:	state->deckCount[nextPlayer]--;
    #####: 1050:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1051:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1052:	state->deckCount[nextPlayer]--;
        -: 1053:      }    
        -: 1054:		       
    #####: 1055:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1056:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1057:	state->playedCardCount++;
    #####: 1058:	tributeRevealedCards[1] = -1;
    #####: 1059:      }
        -: 1060:
    #####: 1061:      for (i = 0; i <= 2; i ++){
    #####: 1062:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1063:	  state->coins += 2;
    #####: 1064:	}
        -: 1065:		    
    #####: 1066:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1067:	  drawCard(currentPlayer, state);
    #####: 1068:	  drawCard(currentPlayer, state);
    #####: 1069:	}
        -: 1070:	else{//Action Card
    #####: 1071:	  state->numActions = state->numActions + 2;
        -: 1072:	}
    #####: 1073:      }
        -: 1074:	    
    #####: 1075:      return 0;
        -: 1076:		
        -: 1077:    case ambassador:
    #####: 1078:      j = 0;		//used to check if player has enough cards to discard
        -: 1079:
    #####: 1080:      if (choice2 > 2 || choice2 < 0)
        -: 1081:	{
    #####: 1082:	  return -1;				
        -: 1083:	}
        -: 1084:
    #####: 1085:      if (choice1 == handPos)
        -: 1086:	{
    #####: 1087:	  return -1;
        -: 1088:	}
        -: 1089:
    #####: 1090:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1091:	{
    #####: 1092:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1093:	    {
    #####: 1094:	      j++;
    #####: 1095:	    }
    #####: 1096:	}
    #####: 1097:      if (j < choice2)
        -: 1098:	{
    #####: 1099:	  return -1;				
        -: 1100:	}
        -: 1101:
        -: 1102:      if (DEBUG) 
        -: 1103:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1104:
        -: 1105:      //increase supply count for choosen card by amount being discarded
    #####: 1106:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1107:			
        -: 1108:      //each other player gains a copy of revealed card
    #####: 1109:      for (i = 0; i < state->numPlayers; i++)
        -: 1110:	{
    #####: 1111:	  if (i != currentPlayer)
        -: 1112:	    {
    #####: 1113:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1114:	    }
    #####: 1115:	}
        -: 1116:
        -: 1117:      //discard played card from hand
    #####: 1118:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1119:
        -: 1120:      //trash copies of cards returned to supply
    #####: 1121:      for (j = 0; j < choice2; j++)
        -: 1122:	{
    #####: 1123:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1124:	    {
    #####: 1125:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1126:		{
    #####: 1127:		  discardCard(i, currentPlayer, state, 1);
    #####: 1128:		  break;
        -: 1129:		}
    #####: 1130:	    }
    #####: 1131:	}			
        -: 1132:
    #####: 1133:      return 0;
        -: 1134:		
        -: 1135:    case cutpurse:
        -: 1136:
    #####: 1137:      updateCoins(currentPlayer, state, 2);
    #####: 1138:      for (i = 0; i < state->numPlayers; i++)
        -: 1139:	{
    #####: 1140:	  if (i != currentPlayer)
        -: 1141:	    {
    #####: 1142:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1143:		{
    #####: 1144:		  if (state->hand[i][j] == copper)
        -: 1145:		    {
    #####: 1146:		      discardCard(j, i, state, 0);
    #####: 1147:		      break;
        -: 1148:		    }
    #####: 1149:		  if (j == state->handCount[i])
        -: 1150:		    {
    #####: 1151:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1152:			{
        -: 1153:			  if (DEBUG)
        -: 1154:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1155:			}	
    #####: 1156:		      break;
        -: 1157:		    }		
    #####: 1158:		}
        -: 1159:					
    #####: 1160:	    }
        -: 1161:				
    #####: 1162:	}				
        -: 1163:
        -: 1164:      //discard played card from hand
    #####: 1165:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1166:
    #####: 1167:      return 0;
        -: 1168:
        -: 1169:		
        -: 1170:    case embargo: 
        -: 1171:      //+2 Coins
    #####: 1172:      state->coins = state->coins + 2;
        -: 1173:			
        -: 1174:      //see if selected pile is in play
    #####: 1175:      if ( state->supplyCount[choice1] == -1 )
        -: 1176:	{
    #####: 1177:	  return -1;
        -: 1178:	}
        -: 1179:			
        -: 1180:      //add embargo token to selected supply pile
    #####: 1181:      state->embargoTokens[choice1]++;
        -: 1182:			
        -: 1183:      //trash card
    #####: 1184:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1185:      return 0;
        -: 1186:		
        -: 1187:    case outpost:
        -: 1188:      //set outpost flag
    #####: 1189:      state->outpostPlayed++;
        -: 1190:			
        -: 1191:      //discard card
    #####: 1192:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1193:      return 0;
        -: 1194:		
        -: 1195:    case salvager:
        -: 1196:      //+1 buy
    #####: 1197:      state->numBuys++;
        -: 1198:			
    #####: 1199:      if (choice1)
        -: 1200:	{
        -: 1201:	  //gain coins equal to trashed card
    #####: 1202:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1203:	  //trash card
    #####: 1204:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1205:	}
        -: 1206:			
        -: 1207:      //discard card
    #####: 1208:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1209:      return 0;
        -: 1210:		
        -: 1211:    case sea_hag:
    #####: 1212:      for (i = 0; i < state->numPlayers; i++){
    #####: 1213:	if (i != currentPlayer){
    #####: 1214:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1215:	  state->discardCount[i]++;
    #####: 1216:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1217:	}
    #####: 1218:      }
    #####: 1219:      return 0;
        -: 1220:		
        -: 1221:    case treasure_map:
        -: 1222:      //search hand for another treasure_map
    #####: 1223:      index = -1;
    #####: 1224:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1225:	{
    #####: 1226:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1227:	    {
    #####: 1228:	      index = i;
    #####: 1229:	      break;
        -: 1230:	    }
    #####: 1231:	}
    #####: 1232:      if (index > -1)
        -: 1233:	{
        -: 1234:	  //trash both treasure cards
    #####: 1235:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1236:	  discardCard(index, currentPlayer, state, 1);
        -: 1237:
        -: 1238:	  //gain 4 Gold cards
    #####: 1239:	  for (i = 0; i < 4; i++)
        -: 1240:	    {
    #####: 1241:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1242:	    }
        -: 1243:				
        -: 1244:	  //return success
    #####: 1245:	  return 1;
        -: 1246:	}
        -: 1247:			
        -: 1248:      //no second treasure_map found in hand
    #####: 1249:      return -1;
        -: 1250:    }
        -: 1251:	
    #####: 1252:  return -1;
       42: 1253:}
        -: 1254:
        -: 1255:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1256:{
        -: 1257:	
        -: 1258:  //if card is not trashed, added to Played pile 
      493: 1259:  if (trashFlag < 1)
        -: 1260:    {
        -: 1261:      //add card to played pile
      273: 1262:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      273: 1263:      state->playedCardCount++;
      273: 1264:    }
        -: 1265:	
        -: 1266:  //set played card to -1
      493: 1267:  state->hand[currentPlayer][handPos] = -1;
        -: 1268:	
        -: 1269:  //remove card from player's hand
      493: 1270:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1271:    {
        -: 1272:      //reduce number of cards in hand
       68: 1273:      state->handCount[currentPlayer]--;
       68: 1274:    }
      425: 1275:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1276:    {
        -: 1277:      //reduce number of cards in hand
       32: 1278:      state->handCount[currentPlayer]--;
       32: 1279:    }
        -: 1280:  else 	
        -: 1281:    {
        -: 1282:      //replace discarded card with last card in hand
      393: 1283:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1284:      //set last card to -1
      393: 1285:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1286:      //reduce number of cards in hand
      393: 1287:      state->handCount[currentPlayer]--;
        -: 1288:    }
        -: 1289:	
      493: 1290:  return 0;
        -: 1291:}
        -: 1292:
        -: 1293:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1294:{
        -: 1295:  //Note: supplyPos is enum of choosen card
        -: 1296:	
        -: 1297:  //check if supply pile is empty (0) or card is not used in game (-1)
     3408: 1298:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1299:    {
      476: 1300:      return -1;
        -: 1301:    }
        -: 1302:	
        -: 1303:  //added card for [whoseTurn] current player:
        -: 1304:  // toFlag = 0 : add to discard
        -: 1305:  // toFlag = 1 : add to deck
        -: 1306:  // toFlag = 2 : add to hand
        -: 1307:
     2932: 1308:  if (toFlag == 1)
        -: 1309:    {
     1190: 1310:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
     1190: 1311:      state->deckCount[player]++;
     1190: 1312:    }
     1742: 1313:  else if (toFlag == 2)
        -: 1314:    {
      952: 1315:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
      952: 1316:      state->handCount[player]++;
      952: 1317:    }
        -: 1318:  else
        -: 1319:    {
      790: 1320:      state->discard[player][ state->discardCount[player] ] = supplyPos;
      790: 1321:      state->discardCount[player]++;
        -: 1322:    }
        -: 1323:	
        -: 1324:  //decrease number in supply pile
     2932: 1325:  state->supplyCount[supplyPos]--;
        -: 1326:	 
     2932: 1327:  return 0;
     3408: 1328:}
        -: 1329:
        -: 1330:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1331:{
        -: 1332:  int i;
        -: 1333:	
        -: 1334:  //reset coin count
     4859: 1335:  state->coins = 0;
        -: 1336:
        -: 1337:  //add coins for each Treasure card in player's hand
    57052: 1338:  for (i = 0; i < state->handCount[player]; i++)
        -: 1339:    {
    23667: 1340:      if (state->hand[player][i] == copper)
        -: 1341:	{
    18302: 1342:	  state->coins += 1;
    18302: 1343:	}
     5365: 1344:      else if (state->hand[player][i] == silver)
        -: 1345:	{
      433: 1346:	  state->coins += 2;
      433: 1347:	}
     4932: 1348:      else if (state->hand[player][i] == gold)
        -: 1349:	{
      353: 1350:	  state->coins += 3;
      353: 1351:	}	
    23667: 1352:    }	
        -: 1353:
        -: 1354:  //add bonus
     4859: 1355:  state->coins += bonus;
        -: 1356:
     4859: 1357:  return 0;
        -: 1358:}
        -: 1359:
        -: 1360:
        -: 1361://end of dominion.c
        -: 1362:
TESTING discardCard():
Test player 0 with 1 card(s) and 0 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 0, expected = 0
Test player 0 with 1 card(s) and 0 hand position.
handcount = 0, expected = 0
Test player 0 with 1 card(s) and 1 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 0, expected = 0
Test player 0 with 1 card(s) and 1 hand position.
handcount = 0, expected = 0
Test player 0 with 1 card(s) and 2 hand position.
playedCard = 1, expected = 1
playedCardCount = 1, expected = 1
handcount = 0, expected = 0
Test player 0 with 1 card(s) and 2 hand position.
handcount = 0, expected = 0
Test player 0 with 1 card(s) and 3 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 0, expected = 0
Test player 0 with 1 card(s) and 3 hand position.
handcount = 0, expected = 0
Test player 0 with 1 card(s) and 4 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 0, expected = 0
Test player 0 with 1 card(s) and 4 hand position.
handcount = 0, expected = 0
Test player 0 with 2 card(s) and 0 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 1, expected = 1
Test player 0 with 2 card(s) and 0 hand position.
handcount = 1, expected = 1
Test player 0 with 2 card(s) and 1 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 1, expected = 1
Test player 0 with 2 card(s) and 1 hand position.
handcount = 1, expected = 1
Test player 0 with 2 card(s) and 2 hand position.
playedCard = 1, expected = 1
playedCardCount = 1, expected = 1
handcount = 1, expected = 1
Test player 0 with 2 card(s) and 2 hand position.
handcount = 1, expected = 1
Test player 0 with 2 card(s) and 3 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 1, expected = 1
Test player 0 with 2 card(s) and 3 hand position.
handcount = 1, expected = 1
Test player 0 with 2 card(s) and 4 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 1, expected = 1
Test player 0 with 2 card(s) and 4 hand position.
handcount = 1, expected = 1
Test player 0 with 3 card(s) and 0 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 2, expected = 2
Test player 0 with 3 card(s) and 0 hand position.
handcount = 2, expected = 2
Test player 0 with 3 card(s) and 1 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 2, expected = 2
Test player 0 with 3 card(s) and 1 hand position.
handcount = 2, expected = 2
Test player 0 with 3 card(s) and 2 hand position.
playedCard = 1, expected = 1
playedCardCount = 1, expected = 1
handcount = 2, expected = 2
Test player 0 with 3 card(s) and 2 hand position.
handcount = 2, expected = 2
Test player 0 with 3 card(s) and 3 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 2, expected = 2
Test player 0 with 3 card(s) and 3 hand position.
handcount = 2, expected = 2
Test player 0 with 3 card(s) and 4 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 2, expected = 2
Test player 0 with 3 card(s) and 4 hand position.
handcount = 2, expected = 2
Test player 0 with 4 card(s) and 0 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 3, expected = 3
Test player 0 with 4 card(s) and 0 hand position.
handcount = 3, expected = 3
Test player 0 with 4 card(s) and 1 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 3, expected = 3
Test player 0 with 4 card(s) and 1 hand position.
handcount = 3, expected = 3
Test player 0 with 4 card(s) and 2 hand position.
playedCard = 1, expected = 1
playedCardCount = 1, expected = 1
handcount = 3, expected = 3
Test player 0 with 4 card(s) and 2 hand position.
handcount = 3, expected = 3
Test player 0 with 4 card(s) and 3 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 3, expected = 3
Test player 0 with 4 card(s) and 3 hand position.
handcount = 3, expected = 3
Test player 0 with 4 card(s) and 4 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 3, expected = 3
Test player 0 with 4 card(s) and 4 hand position.
handcount = 3, expected = 3
Test player 0 with 5 card(s) and 0 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 4, expected = 4
Test player 0 with 5 card(s) and 0 hand position.
handcount = 4, expected = 4
Test player 0 with 5 card(s) and 1 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 4, expected = 4
Test player 0 with 5 card(s) and 1 hand position.
handcount = 4, expected = 4
Test player 0 with 5 card(s) and 2 hand position.
playedCard = 1, expected = 1
playedCardCount = 1, expected = 1
handcount = 4, expected = 4
Test player 0 with 5 card(s) and 2 hand position.
handcount = 4, expected = 4
Test player 0 with 5 card(s) and 3 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 4, expected = 4
Test player 0 with 5 card(s) and 3 hand position.
handcount = 4, expected = 4
Test player 0 with 5 card(s) and 4 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 4, expected = 4
Test player 0 with 5 card(s) and 4 hand position.
handcount = 4, expected = 4
Test player 1 with 1 card(s) and 0 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 0, expected = 0
Test player 1 with 1 card(s) and 0 hand position.
handcount = 0, expected = 0
Test player 1 with 1 card(s) and 1 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 0, expected = 0
Test player 1 with 1 card(s) and 1 hand position.
handcount = 0, expected = 0
Test player 1 with 1 card(s) and 2 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 0, expected = 0
Test player 1 with 1 card(s) and 2 hand position.
handcount = 0, expected = 0
Test player 1 with 1 card(s) and 3 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 0, expected = 0
Test player 1 with 1 card(s) and 3 hand position.
handcount = 0, expected = 0
Test player 1 with 1 card(s) and 4 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 0, expected = 0
Test player 1 with 1 card(s) and 4 hand position.
handcount = 0, expected = 0
Test player 1 with 2 card(s) and 0 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 1, expected = 1
Test player 1 with 2 card(s) and 0 hand position.
handcount = 1, expected = 1
Test player 1 with 2 card(s) and 1 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 1, expected = 1
Test player 1 with 2 card(s) and 1 hand position.
handcount = 1, expected = 1
Test player 1 with 2 card(s) and 2 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 1, expected = 1
Test player 1 with 2 card(s) and 2 hand position.
handcount = 1, expected = 1
Test player 1 with 2 card(s) and 3 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 1, expected = 1
Test player 1 with 2 card(s) and 3 hand position.
handcount = 1, expected = 1
Test player 1 with 2 card(s) and 4 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 1, expected = 1
Test player 1 with 2 card(s) and 4 hand position.
handcount = 1, expected = 1
Test player 1 with 3 card(s) and 0 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 2, expected = 2
Test player 1 with 3 card(s) and 0 hand position.
handcount = 2, expected = 2
Test player 1 with 3 card(s) and 1 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 2, expected = 2
Test player 1 with 3 card(s) and 1 hand position.
handcount = 2, expected = 2
Test player 1 with 3 card(s) and 2 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 2, expected = 2
Test player 1 with 3 card(s) and 2 hand position.
handcount = 2, expected = 2
Test player 1 with 3 card(s) and 3 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 2, expected = 2
Test player 1 with 3 card(s) and 3 hand position.
handcount = 2, expected = 2
Test player 1 with 3 card(s) and 4 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 2, expected = 2
Test player 1 with 3 card(s) and 4 hand position.
handcount = 2, expected = 2
Test player 1 with 4 card(s) and 0 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 3, expected = 3
Test player 1 with 4 card(s) and 0 hand position.
handcount = 3, expected = 3
Test player 1 with 4 card(s) and 1 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 3, expected = 3
Test player 1 with 4 card(s) and 1 hand position.
handcount = 3, expected = 3
Test player 1 with 4 card(s) and 2 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 3, expected = 3
Test player 1 with 4 card(s) and 2 hand position.
handcount = 3, expected = 3
Test player 1 with 4 card(s) and 3 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 3, expected = 3
Test player 1 with 4 card(s) and 3 hand position.
handcount = 3, expected = 3
Test player 1 with 4 card(s) and 4 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 3, expected = 3
Test player 1 with 4 card(s) and 4 hand position.
handcount = 3, expected = 3
Test player 1 with 5 card(s) and 0 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 4, expected = 4
Test player 1 with 5 card(s) and 0 hand position.
handcount = 4, expected = 4
Test player 1 with 5 card(s) and 1 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 4, expected = 4
Test player 1 with 5 card(s) and 1 hand position.
handcount = 4, expected = 4
Test player 1 with 5 card(s) and 2 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 4, expected = 4
Test player 1 with 5 card(s) and 2 hand position.
handcount = 4, expected = 4
Test player 1 with 5 card(s) and 3 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 4, expected = 4
Test player 1 with 5 card(s) and 3 hand position.
handcount = 4, expected = 4
Test player 1 with 5 card(s) and 4 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 4, expected = 4
Test player 1 with 5 card(s) and 4 hand position.
handcount = 4, expected = 4
All tests passed!
File 'dominion.c'
Lines executed:51.01% of 643
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:44
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
   128367:    9:  if (*(int*)a > *(int*)b)
      336:   10:    return 1;
   128031:   11:  if (*(int*)a < *(int*)b)
    45834:   12:    return -1;
    82197:   13:  return 0;
   128367:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     4545:   44:  SelectStream(1);
     4545:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
     9090:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     4545:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    99990:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
   999900:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
   863550:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
   454500:   65:        }
    45450:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     4545:   73:  if (numPlayers == 2)
        -:   74:    {
     4545:   75:      state->supplyCount[curse] = 10;
     4545:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     4545:   87:  if (numPlayers == 2)
        -:   88:    {
     4545:   89:      state->supplyCount[estate] = 8;
     4545:   90:      state->supplyCount[duchy] = 8;
     4545:   91:      state->supplyCount[province] = 8;
     4545:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     4545:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     4545:  102:  state->supplyCount[silver] = 40;
     4545:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   190890:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
  1499850:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
   704475:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    86357:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
     9088:  115:		  if (numPlayers == 2){ 
     9088:  116:		    state->supplyCount[i] = 8; 
     9088:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
     9088:  119:		}
        -:  120:	      else
        -:  121:		{
    36362:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    45450:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   659025:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
   659025:  130:	}
        -:  131:
    90900:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    27270:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
     9090:  140:      state->deckCount[i] = 0;
    72720:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    27270:  143:	  state->deck[i][j] = estate;
    27270:  144:	  state->deckCount[i]++;
    27270:  145:	}
   145440:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    63630:  148:	  state->deck[i][j] = copper;
    63630:  149:	  state->deckCount[i]++;		
    63630:  150:	}
     9090:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    27270:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
     9090:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
     9090:  160:    }
        -:  161:
        -:  162:  //draw player hands
    27270:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     9090:  166:      state->handCount[i] = 0;
     9090:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
     9090:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
   254520:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
   122715:  178:      state->embargoTokens[i] = 0;
   122715:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     4545:  182:  state->outpostPlayed = 0;
     4545:  183:  state->phase = 0;
     4545:  184:  state->numActions = 1;
     4545:  185:  state->numBuys = 1;
     4545:  186:  state->playedCardCount = 0;
     4545:  187:  state->whoseTurn = 0;
     4545:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    54540:  192:  for (it = 0; it < 5; it++){
    22725:  193:    drawCard(state->whoseTurn, state);
    22725:  194:  }
        -:  195:
     4545:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     4545:  198:  return 0;
     4545:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    19681:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    19681:  209:  if (state->deckCount[player] < 1)
    10556:  210:    return -1;
     9125:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   201010:  214:  while (state->deckCount[player] > 0) {
    91380:  215:    card = floor(Random() * state->deckCount[player]);
    91380:  216:    newDeck[newDeckPos] = state->deck[player][card];
    91380:  217:    newDeckPos++;
   640664:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   228952:  219:      state->deck[player][i] = state->deck[player][i+1];
   228952:  220:    }
    91380:  221:    state->deckCount[player]--;
        -:  222:  }
   201010:  223:  for (i = 0; i < newDeckPos; i++) {
    91380:  224:    state->deck[player][i] = newDeck[i];
    91380:  225:    state->deckCount[player]++;
    91380:  226:  }
        -:  227:
     9125:  228:  return 0;
    19681:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
       61:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       61:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
       61:  243:  if ( state->numActions < 1 )
        -:  244:    {
       36:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
       25:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
       32:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
       18:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
        7:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        7:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        7:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
        7:  269:  return 0;
       61:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
       73:  280:  who = state->whoseTurn;
        -:  281:
       73:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
       73:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
       73:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
       73:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
       73:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
       73:  299:    state->coins = (state->coins) - (getCost(supplyPos));
       73:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
       73:  308:  return 0;
       73:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
      536:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
     1128:  316:  int currentPlayer = whoseTurn(state);
     1128:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
     6479:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
      940:  326:  int count = 0;
        -:  327:
    14060:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
     7050:  330:      if (state->deck[player][i] == card) count++;
     6090:  331:    }
        -:  332:
    32872:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    18144:  335:      if (state->hand[player][i] == card) count++;
    15496:  336:    }
        -:  337:
    25400:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    13720:  340:      if (state->discard[player][i] == card) count++;
    11760:  341:    }
        -:  342:
      940:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
     1860:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
       77:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
      988:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
      417:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      417:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
      417:  359:  }
       77:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
       77:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
       39:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
       39:  365:  }
        -:  366:  else{
       38:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
       77:  370:  state->outpostPlayed = 0;
       77:  371:  state->phase = 0;
       77:  372:  state->numActions = 1;
       77:  373:  state->coins = 0;
       77:  374:  state->numBuys = 1;
       77:  375:  state->playedCardCount = 0;
       77:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
      924:  380:  for (k = 0; k < 5; k++){
      385:  381:    drawCard(state->whoseTurn, state);//Draw a card
      385:  382:  }
        -:  383:
        -:  384:  //Update money
       77:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
       77:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
      445:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
      152:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
      293:  401:  j = 0;
    15236:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
     7325:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
      432:  406:	  j++;
      432:  407:	}
     7325:  408:    }
      293:  409:  if ( j >= 3)
        -:  410:    {
       72:  411:      return 1;
        -:  412:    }
        -:  413:
      221:  414:  return 0;
      445:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
      184:  420:  int score = 0;
        -:  421:  //score from hand
     4708:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
     2546:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
     2515:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
     2518:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
     2523:  427:      if (state->hand[player][i] == province) { score = score + 6; };
     2526:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
     2530:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     2170:  430:    }
        -:  431:
        -:  432:  //score from discard
     2804:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
     1418:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
     1420:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
     1418:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
     1422:  438:      if (state->discard[player][i] == province) { score = score + 6; };
     1418:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
     1418:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     1218:  441:    }
        -:  442:
        -:  443:  //score from deck
     2804:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
     1418:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
     1421:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
     1418:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
     1420:  449:      if (state->deck[player][i] == province) { score = score + 6; };
     1418:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
     1418:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     1218:  452:    }
        -:  453:
      184:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    29227:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    12086:  533:    for (i = 0; i < state->discardCount[player];i++){
      480:  534:      state->deck[player][i] = state->discard[player][i];
      480:  535:      state->discard[player][i] = -1;
      480:  536:    }
        -:  537:
     5563:  538:    state->deckCount[player] = state->discardCount[player];
     5563:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     5563:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     5563:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     5563:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     5563:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     5563:  559:    if (deckCounter == 0)
     5528:  560:      return -1;
        -:  561:
       35:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       35:  563:    state->deckCount[player]--;
       35:  564:    state->handCount[player]++;//Increment hand count
       35:  565:  }
        -:  566:
        -:  567:  else{
    23664:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    23664:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    23664:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    23664:  576:    state->deckCount[player]--;
    23664:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    23699:  580:  return 0;
    29227:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
      146:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
       32:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
       70:  598:      return 3;
        -:  599:    case gold:
       28:  600:      return 6;
        -:  601:    case adventurer:
        8:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
        8:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
      146:  644:}
        -:  645:
        -:  646://smithy function to introduce a bug
        -:  647:int smithyfun(int currentPlayer, struct gameState *state, int handPos){
        -:  648:  //+3 Cards
        -:  649:  int i;
      428:  650:  for (i = 0; i <= 3; i++)
        -:  651:  {
      171:  652:    drawCard(currentPlayer, state);
      171:  653:  }
        -:  654:      
        -:  655:      //discard card from hand
       43:  656:      discardCard(handPos, currentPlayer, state, 0);
       43:  657:      return 0;
        -:  658:}
        -:  659:
        -:  660://adventurer function to introduce a bug
        -:  661:int adventurerfun(int currentPlayer, struct gameState *state){
        -:  662:    int cardDrawn;
        -:  663:    int temphand[MAX_HAND];
2291246309455167530:  664:    int drawntreasure = 0;
2291246309455167530:  665:    int z = 0;
        -:  666:
10104103169071346622:  667:  while(drawntreasure <= 2){
72057701412115419:  668:      if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
17981539514:  669:          shuffle(currentPlayer, state);
17981539514:  670:      }
7018965447127852258:  671:  drawCard(currentPlayer, state);
7018965447127852258:  672:  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
14469171020717092264:  673:  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    28331:  674:  drawntreasure++;
        -:  675:  else{
     4993:  676:  temphand[z]=cardDrawn;
     4993:  677:  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     4993:  678:  z++;
        -:  679:  }
        -:  680:}
        -:  681:    
    10114:  682:    while(z-1>=0){
     4993:  683:  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     4993:  684:      z=z-1;
        -:  685:    }
       64:  686:    return 0;
        -:  687:}
        -:  688:
        -:  689:int villagefun(int handPos, int currentPlayer, struct gameState *state){
        -:  690:        //+1 Card
        3:  691:        drawCard(currentPlayer, state);
        -:  692:        
        -:  693:        //+2 Actions
        3:  694:        state->numActions = state->numActions + 2;
        -:  695:        
        -:  696:        //discard played card from hand
        -:  697:        //discardCard(handPos, currentPlayer, state, 0);
        3:  698:        return 0;
        -:  699:}
        -:  700:
        -:  701:int great_hallfun(int currentPlayer, struct gameState *state, int handPos){
        -:  702:        //+1 Card
    #####:  703:        drawCard(currentPlayer, state);
        -:  704:        
        -:  705:        //+1 Actions
    #####:  706:        state->numActions++;
        -:  707:        
        -:  708:        //discard card from hand
    #####:  709:        discardCard(handPos, currentPlayer, state, 0);
    #####:  710:        return 0;
        -:  711:}
        -:  712:
        -:  713:int stewardfun(int choice1, int choice2, int choice3, int handPos, int currentPlayer, struct gameState *state){
        -:  714:
       90:  715:  if (choice1 == 1)
        -:  716:	{
        -:  717:	  //+2 cards
       30:  718:	  drawCard(currentPlayer, state);
       30:  719:	  drawCard(currentPlayer, state);
       30:  720:	}
       60:  721:      else if (choice2 == 2)
        -:  722:	{
        -:  723:	  //+2 coins
    #####:  724:	  state->coins = state->coins + 2;
    #####:  725:	}
        -:  726:      else
        -:  727:	{
        -:  728:	  //trash 2 cards in hand
       60:  729:	  discardCard(choice2, currentPlayer, state, 1);
       60:  730:	  discardCard(choice3, currentPlayer, state, 1);
        -:  731:	}
        -:  732:			
        -:  733:      //discard card from hand
       90:  734:      discardCard(handPos, currentPlayer, state, 0);
       90:  735:      return 0;
        -:  736:}
        -:  737:
        -:  738:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  739:{
        -:  740:  int i;
        -:  741:  int j;
        -:  742:  int k;
        -:  743:  int x;
        -:  744:  int index;
       42:  745:  int currentPlayer = whoseTurn(state);
       42:  746:  int nextPlayer = currentPlayer + 1;
        -:  747:
       42:  748:  int tributeRevealedCards[2] = {-1, -1};
        -:  749:  int temphand[MAX_HAND];// moved above the if statement
       42:  750:  if (nextPlayer > (state->numPlayers - 1)){
        4:  751:    nextPlayer = 0;
        4:  752:  }
        -:  753:  
        -:  754:	
        -:  755:  //uses switch to select card and perform actions
       52:  756:  switch( card ) 
        -:  757:    {
        -:  758:    case adventurer:
        4:  759:      adventurerfun(currentPlayer, state);
        -:  760:			
        -:  761:    case council_room:
        -:  762:      //+4 Cards
      390:  763:      for (i = 0; i < 4; i++)
        -:  764:	{
      156:  765:	  drawCard(currentPlayer, state);
      156:  766:	}
        -:  767:			
        -:  768:      //+1 Buy
       39:  769:      state->numBuys++;
        -:  770:			
        -:  771:      //Each other player draws a card
      234:  772:      for (i = 0; i < state->numPlayers; i++)
        -:  773:	{
       78:  774:	  if ( i != currentPlayer )
        -:  775:	    {
       39:  776:	      drawCard(i, state);
       39:  777:	    }
       78:  778:	}
        -:  779:			
        -:  780:      //put played card in played card pile
       39:  781:      discardCard(handPos, currentPlayer, state, 0);
        -:  782:			
       39:  783:      return 0;
        -:  784:			
        -:  785:    case feast:
        -:  786:      //gain card with cost up to 5
        -:  787:      //Backup hand
    #####:  788:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  789:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  790:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  791:      }
        -:  792:      //Backup hand
        -:  793:
        -:  794:      //Update Coins for Buy
    #####:  795:      updateCoins(currentPlayer, state, 5);
    #####:  796:      x = 1;//Condition to loop on
    #####:  797:      while( x == 1) {//Buy one card
    #####:  798:	if (supplyCount(choice1, state) <= 0){
        -:  799:	  if (DEBUG)
        -:  800:	    printf("None of that card left, sorry!\n");
        -:  801:
        -:  802:	  if (DEBUG){
        -:  803:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  804:	  }
    #####:  805:	}
    #####:  806:	else if (state->coins < getCost(choice1)){
    #####:  807:	  printf("That card is too expensive!\n");
        -:  808:
        -:  809:	  if (DEBUG){
        -:  810:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  811:	  }
    #####:  812:	}
        -:  813:	else{
        -:  814:
        -:  815:	  if (DEBUG){
        -:  816:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  817:	  }
        -:  818:
    #####:  819:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  820:	  x = 0;//No more buying cards
        -:  821:
        -:  822:	  if (DEBUG){
        -:  823:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  824:	  }
        -:  825:
        -:  826:	}
        -:  827:      }     
        -:  828:
        -:  829:      //Reset Hand
    #####:  830:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  831:	state->hand[currentPlayer][i] = temphand[i];
    #####:  832:	temphand[i] = -1;
    #####:  833:      }
        -:  834:      //Reset Hand
        -:  835:      			
    #####:  836:      return 0;
        -:  837:			
        -:  838:    case gardens:
    #####:  839:      return -1;
        -:  840:			
        -:  841:    case mine:
    #####:  842:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  843:
    #####:  844:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  845:	{
    #####:  846:	  return -1;
        -:  847:	}
        -:  848:		
    #####:  849:      if (choice2 > treasure_map || choice2 < curse)
        -:  850:	{
    #####:  851:	  return -1;
        -:  852:	}
        -:  853:
    #####:  854:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  855:	{
    #####:  856:	  return -1;
        -:  857:	}
        -:  858:
    #####:  859:      gainCard(choice2, state, 2, currentPlayer);
        -:  860:
        -:  861:      //discard card from hand
    #####:  862:      discardCard(handPos, currentPlayer, state, 0);
        -:  863:
        -:  864:      //discard trashed card
    #####:  865:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  866:	{
    #####:  867:	  if (state->hand[currentPlayer][i] == j)
        -:  868:	    {
    #####:  869:	      discardCard(i, currentPlayer, state, 0);			
    #####:  870:	      break;
        -:  871:	    }
    #####:  872:	}
        -:  873:			
    #####:  874:      return 0;
        -:  875:			
        -:  876:    case remodel:
    #####:  877:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  878:
    #####:  879:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  880:	{
    #####:  881:	  return -1;
        -:  882:	}
        -:  883:
    #####:  884:      gainCard(choice2, state, 0, currentPlayer);
        -:  885:
        -:  886:      //discard card from hand
    #####:  887:      discardCard(handPos, currentPlayer, state, 0);
        -:  888:
        -:  889:      //discard trashed card
    #####:  890:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  891:	{
    #####:  892:	  if (state->hand[currentPlayer][i] == j)
        -:  893:	    {
    #####:  894:	      discardCard(i, currentPlayer, state, 0);			
    #####:  895:	      break;
        -:  896:	    }
    #####:  897:	}
        -:  898:
        -:  899:
    #####:  900:      return 0;
        -:  901:		
        -:  902:    case smithy:
        -:  903:      //+3 Cards
        3:  904:      smithyfun(currentPlayer, state, handPos);
        -:  905:
        -:  906:    case village:
        3:  907:      villagefun(handPos, currentPlayer, state);
        -:  908:		
        -:  909:    case baron:
        3:  910:      state->numBuys++;//Increase buys by 1!
        3:  911:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  912:	int p = 0;//Iterator for hand!
    #####:  913:	int card_not_discarded = 1;//Flag for discard set!
    #####:  914:	while(card_not_discarded){
    #####:  915:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  916:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  917:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  918:	    state->discardCount[currentPlayer]++;
    #####:  919:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  920:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  921:	    }
    #####:  922:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  923:	    state->handCount[currentPlayer]--;
    #####:  924:	    card_not_discarded = 0;//Exit the loop
    #####:  925:	  }
    #####:  926:	  else if (p > state->handCount[currentPlayer]){
        -:  927:	    if(DEBUG) {
        -:  928:	      printf("No estate cards in your hand, invalid choice\n");
        -:  929:	      printf("Must gain an estate if there are any\n");
        -:  930:	    }
    #####:  931:	    if (supplyCount(estate, state) > 0){
    #####:  932:	      gainCard(estate, state, 0, currentPlayer);
    #####:  933:	      state->supplyCount[estate]--;//Decrement estates
    #####:  934:	      if (supplyCount(estate, state) == 0){
    #####:  935:		isGameOver(state);
    #####:  936:	      }
    #####:  937:	    }
    #####:  938:	    card_not_discarded = 0;//Exit the loop
    #####:  939:	  }
        -:  940:			    
        -:  941:	  else{
    #####:  942:	    p++;//Next card
        -:  943:	  }
        -:  944:	}
    #####:  945:      }
        -:  946:			    
        -:  947:      else{
        3:  948:	if (supplyCount(estate, state) > 0){
        3:  949:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
        3:  950:	  state->supplyCount[estate]--;//Decrement Estates
        3:  951:	  if (supplyCount(estate, state) == 0){
    #####:  952:	    isGameOver(state);
    #####:  953:	  }
        3:  954:	}
        -:  955:      }
        -:  956:	    
        -:  957:      
        3:  958:      return 0;
        -:  959:		
        -:  960:    case great_hall:
    #####:  961:      great_hallfun(currentPlayer, state, handPos);
        -:  962:		
        -:  963:    case minion:
        -:  964:      //+1 action
    #####:  965:      state->numActions++;
        -:  966:			
        -:  967:      //discard card from hand
    #####:  968:      discardCard(handPos, currentPlayer, state, 0);
        -:  969:			
    #####:  970:      if (choice1)		//+2 coins
        -:  971:	{
    #####:  972:	  state->coins = state->coins + 2;
    #####:  973:	}
        -:  974:			
    #####:  975:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  976:	{
        -:  977:	  //discard hand
    #####:  978:	  while(numHandCards(state) > 0)
        -:  979:	    {
    #####:  980:	      discardCard(handPos, currentPlayer, state, 0);
        -:  981:	    }
        -:  982:				
        -:  983:	  //draw 4
    #####:  984:	  for (i = 0; i < 4; i++)
        -:  985:	    {
    #####:  986:	      drawCard(currentPlayer, state);
    #####:  987:	    }
        -:  988:				
        -:  989:	  //other players discard hand and redraw if hand size > 4
    #####:  990:	  for (i = 0; i < state->numPlayers; i++)
        -:  991:	    {
    #####:  992:	      if (i != currentPlayer)
        -:  993:		{
    #####:  994:		  if ( state->handCount[i] > 4 )
        -:  995:		    {
        -:  996:		      //discard hand
    #####:  997:		      while( state->handCount[i] > 0 )
        -:  998:			{
    #####:  999:			  discardCard(handPos, i, state, 0);
        -: 1000:			}
        -: 1001:							
        -: 1002:		      //draw 4
    #####: 1003:		      for (j = 0; j < 4; j++)
        -: 1004:			{
    #####: 1005:			  drawCard(i, state);
    #####: 1006:			}
    #####: 1007:		    }
    #####: 1008:		}
    #####: 1009:	    }
        -: 1010:				
    #####: 1011:	}
    #####: 1012:      return 0;
        -: 1013:		
        -: 1014:    case steward:
    #####: 1015:      stewardfun(choice1, choice2, choice3, handPos, currentPlayer, state);
        -: 1016:
        -: 1017:		
        -: 1018:    case tribute:
    #####: 1019:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1020:	if (state->deckCount[nextPlayer] > 0){
    #####: 1021:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1022:	  state->deckCount[nextPlayer]--;
    #####: 1023:	}
    #####: 1024:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1025:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1026:	  state->discardCount[nextPlayer]--;
    #####: 1027:	}
        -: 1028:	else{
        -: 1029:	  //No Card to Reveal
        -: 1030:	  if (DEBUG){
        -: 1031:	    printf("No cards to reveal\n");
        -: 1032:	  }
        -: 1033:	}
    #####: 1034:      }
        -: 1035:	    
        -: 1036:      else{
    #####: 1037:	if (state->deckCount[nextPlayer] == 0){
    #####: 1038:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1039:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1040:	    state->deckCount[nextPlayer]++;
    #####: 1041:	    state->discard[nextPlayer][i] = -1;
    #####: 1042:	    state->discardCount[nextPlayer]--;
    #####: 1043:	  }
        -: 1044:			    
    #####: 1045:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1046:	} 
    #####: 1047:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1048:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1049:	state->deckCount[nextPlayer]--;
    #####: 1050:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1051:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1052:	state->deckCount[nextPlayer]--;
        -: 1053:      }    
        -: 1054:		       
    #####: 1055:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1056:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1057:	state->playedCardCount++;
    #####: 1058:	tributeRevealedCards[1] = -1;
    #####: 1059:      }
        -: 1060:
    #####: 1061:      for (i = 0; i <= 2; i ++){
    #####: 1062:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1063:	  state->coins += 2;
    #####: 1064:	}
        -: 1065:		    
    #####: 1066:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1067:	  drawCard(currentPlayer, state);
    #####: 1068:	  drawCard(currentPlayer, state);
    #####: 1069:	}
        -: 1070:	else{//Action Card
    #####: 1071:	  state->numActions = state->numActions + 2;
        -: 1072:	}
    #####: 1073:      }
        -: 1074:	    
    #####: 1075:      return 0;
        -: 1076:		
        -: 1077:    case ambassador:
    #####: 1078:      j = 0;		//used to check if player has enough cards to discard
        -: 1079:
    #####: 1080:      if (choice2 > 2 || choice2 < 0)
        -: 1081:	{
    #####: 1082:	  return -1;				
        -: 1083:	}
        -: 1084:
    #####: 1085:      if (choice1 == handPos)
        -: 1086:	{
    #####: 1087:	  return -1;
        -: 1088:	}
        -: 1089:
    #####: 1090:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1091:	{
    #####: 1092:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1093:	    {
    #####: 1094:	      j++;
    #####: 1095:	    }
    #####: 1096:	}
    #####: 1097:      if (j < choice2)
        -: 1098:	{
    #####: 1099:	  return -1;				
        -: 1100:	}
        -: 1101:
        -: 1102:      if (DEBUG) 
        -: 1103:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1104:
        -: 1105:      //increase supply count for choosen card by amount being discarded
    #####: 1106:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1107:			
        -: 1108:      //each other player gains a copy of revealed card
    #####: 1109:      for (i = 0; i < state->numPlayers; i++)
        -: 1110:	{
    #####: 1111:	  if (i != currentPlayer)
        -: 1112:	    {
    #####: 1113:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1114:	    }
    #####: 1115:	}
        -: 1116:
        -: 1117:      //discard played card from hand
    #####: 1118:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1119:
        -: 1120:      //trash copies of cards returned to supply
    #####: 1121:      for (j = 0; j < choice2; j++)
        -: 1122:	{
    #####: 1123:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1124:	    {
    #####: 1125:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1126:		{
    #####: 1127:		  discardCard(i, currentPlayer, state, 1);
    #####: 1128:		  break;
        -: 1129:		}
    #####: 1130:	    }
    #####: 1131:	}			
        -: 1132:
    #####: 1133:      return 0;
        -: 1134:		
        -: 1135:    case cutpurse:
        -: 1136:
    #####: 1137:      updateCoins(currentPlayer, state, 2);
    #####: 1138:      for (i = 0; i < state->numPlayers; i++)
        -: 1139:	{
    #####: 1140:	  if (i != currentPlayer)
        -: 1141:	    {
    #####: 1142:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1143:		{
    #####: 1144:		  if (state->hand[i][j] == copper)
        -: 1145:		    {
    #####: 1146:		      discardCard(j, i, state, 0);
    #####: 1147:		      break;
        -: 1148:		    }
    #####: 1149:		  if (j == state->handCount[i])
        -: 1150:		    {
    #####: 1151:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1152:			{
        -: 1153:			  if (DEBUG)
        -: 1154:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1155:			}	
    #####: 1156:		      break;
        -: 1157:		    }		
    #####: 1158:		}
        -: 1159:					
    #####: 1160:	    }
        -: 1161:				
    #####: 1162:	}				
        -: 1163:
        -: 1164:      //discard played card from hand
    #####: 1165:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1166:
    #####: 1167:      return 0;
        -: 1168:
        -: 1169:		
        -: 1170:    case embargo: 
        -: 1171:      //+2 Coins
    #####: 1172:      state->coins = state->coins + 2;
        -: 1173:			
        -: 1174:      //see if selected pile is in play
    #####: 1175:      if ( state->supplyCount[choice1] == -1 )
        -: 1176:	{
    #####: 1177:	  return -1;
        -: 1178:	}
        -: 1179:			
        -: 1180:      //add embargo token to selected supply pile
    #####: 1181:      state->embargoTokens[choice1]++;
        -: 1182:			
        -: 1183:      //trash card
    #####: 1184:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1185:      return 0;
        -: 1186:		
        -: 1187:    case outpost:
        -: 1188:      //set outpost flag
    #####: 1189:      state->outpostPlayed++;
        -: 1190:			
        -: 1191:      //discard card
    #####: 1192:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1193:      return 0;
        -: 1194:		
        -: 1195:    case salvager:
        -: 1196:      //+1 buy
    #####: 1197:      state->numBuys++;
        -: 1198:			
    #####: 1199:      if (choice1)
        -: 1200:	{
        -: 1201:	  //gain coins equal to trashed card
    #####: 1202:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1203:	  //trash card
    #####: 1204:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1205:	}
        -: 1206:			
        -: 1207:      //discard card
    #####: 1208:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1209:      return 0;
        -: 1210:		
        -: 1211:    case sea_hag:
    #####: 1212:      for (i = 0; i < state->numPlayers; i++){
    #####: 1213:	if (i != currentPlayer){
    #####: 1214:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1215:	  state->discardCount[i]++;
    #####: 1216:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1217:	}
    #####: 1218:      }
    #####: 1219:      return 0;
        -: 1220:		
        -: 1221:    case treasure_map:
        -: 1222:      //search hand for another treasure_map
    #####: 1223:      index = -1;
    #####: 1224:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1225:	{
    #####: 1226:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1227:	    {
    #####: 1228:	      index = i;
    #####: 1229:	      break;
        -: 1230:	    }
    #####: 1231:	}
    #####: 1232:      if (index > -1)
        -: 1233:	{
        -: 1234:	  //trash both treasure cards
    #####: 1235:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1236:	  discardCard(index, currentPlayer, state, 1);
        -: 1237:
        -: 1238:	  //gain 4 Gold cards
    #####: 1239:	  for (i = 0; i < 4; i++)
        -: 1240:	    {
    #####: 1241:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1242:	    }
        -: 1243:				
        -: 1244:	  //return success
    #####: 1245:	  return 1;
        -: 1246:	}
        -: 1247:			
        -: 1248:      //no second treasure_map found in hand
    #####: 1249:      return -1;
        -: 1250:    }
        -: 1251:	
    #####: 1252:  return -1;
       42: 1253:}
        -: 1254:
        -: 1255:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1256:{
        -: 1257:	
        -: 1258:  //if card is not trashed, added to Played pile 
      593: 1259:  if (trashFlag < 1)
        -: 1260:    {
        -: 1261:      //add card to played pile
      323: 1262:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      323: 1263:      state->playedCardCount++;
      323: 1264:    }
        -: 1265:	
        -: 1266:  //set played card to -1
      593: 1267:  state->hand[currentPlayer][handPos] = -1;
        -: 1268:	
        -: 1269:  //remove card from player's hand
      593: 1270:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1271:    {
        -: 1272:      //reduce number of cards in hand
       88: 1273:      state->handCount[currentPlayer]--;
       88: 1274:    }
      505: 1275:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1276:    {
        -: 1277:      //reduce number of cards in hand
       48: 1278:      state->handCount[currentPlayer]--;
       48: 1279:    }
        -: 1280:  else 	
        -: 1281:    {
        -: 1282:      //replace discarded card with last card in hand
      457: 1283:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1284:      //set last card to -1
      457: 1285:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1286:      //reduce number of cards in hand
      457: 1287:      state->handCount[currentPlayer]--;
        -: 1288:    }
        -: 1289:	
      593: 1290:  return 0;
        -: 1291:}
        -: 1292:
        -: 1293:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1294:{
        -: 1295:  //Note: supplyPos is enum of choosen card
        -: 1296:	
        -: 1297:  //check if supply pile is empty (0) or card is not used in game (-1)
     3408: 1298:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1299:    {
      476: 1300:      return -1;
        -: 1301:    }
        -: 1302:	
        -: 1303:  //added card for [whoseTurn] current player:
        -: 1304:  // toFlag = 0 : add to discard
        -: 1305:  // toFlag = 1 : add to deck
        -: 1306:  // toFlag = 2 : add to hand
        -: 1307:
     2932: 1308:  if (toFlag == 1)
        -: 1309:    {
     1190: 1310:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
     1190: 1311:      state->deckCount[player]++;
     1190: 1312:    }
     1742: 1313:  else if (toFlag == 2)
        -: 1314:    {
      952: 1315:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
      952: 1316:      state->handCount[player]++;
      952: 1317:    }
        -: 1318:  else
        -: 1319:    {
      790: 1320:      state->discard[player][ state->discardCount[player] ] = supplyPos;
      790: 1321:      state->discardCount[player]++;
        -: 1322:    }
        -: 1323:	
        -: 1324:  //decrease number in supply pile
     2932: 1325:  state->supplyCount[supplyPos]--;
        -: 1326:	 
     2932: 1327:  return 0;
     3408: 1328:}
        -: 1329:
        -: 1330:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1331:{
        -: 1332:  int i;
        -: 1333:	
        -: 1334:  //reset coin count
     4959: 1335:  state->coins = 0;
        -: 1336:
        -: 1337:  //add coins for each Treasure card in player's hand
    58252: 1338:  for (i = 0; i < state->handCount[player]; i++)
        -: 1339:    {
    24167: 1340:      if (state->hand[player][i] == copper)
        -: 1341:	{
    18702: 1342:	  state->coins += 1;
    18702: 1343:	}
     5465: 1344:      else if (state->hand[player][i] == silver)
        -: 1345:	{
      433: 1346:	  state->coins += 2;
      433: 1347:	}
     5032: 1348:      else if (state->hand[player][i] == gold)
        -: 1349:	{
      353: 1350:	  state->coins += 3;
      353: 1351:	}	
    24167: 1352:    }	
        -: 1353:
        -: 1354:  //add bonus
     4959: 1355:  state->coins += bonus;
        -: 1356:
     4959: 1357:  return 0;
        -: 1358:}
        -: 1359:
        -: 1360:
        -: 1361://end of dominion.c
        -: 1362:
TESTING gainCard():
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 0
Deck Card: 0, Expected: 0
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 0
Deck Card: 0, Expected: 0
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 0
Deck Card: 0, Expected: 0
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 0
Deck Card: 0, Expected: 0
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 0
Deck Card: 0, Expected: 0
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 0
Deck Card: 0, Expected: 0
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 0
Deck Card: 0, Expected: 0
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 0
Hand Card: 0, Expected: 0
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 0
Hand Card: 0, Expected: 0
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 0
Hand Card: 0, Expected: 0
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 0
Hand Card: 0, Expected: 0
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 0
Hand Card: 0, Expected: 0
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 0
Hand Card: 0, Expected: 0
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 0
Hand Card: 0, Expected: 0
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 0
Deck Card: 1, Expected: 1
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 0
Deck Card: 1, Expected: 1
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 0
Deck Card: 1, Expected: 1
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 0
Deck Card: 1, Expected: 1
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 0
Deck Card: 1, Expected: 1
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 0
Deck Card: 1, Expected: 1
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 0
Deck Card: 1, Expected: 1
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 0
Hand Card: 1, Expected: 1
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 0
Hand Card: 1, Expected: 1
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 0
Hand Card: 1, Expected: 1
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 0
Hand Card: 1, Expected: 1
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 0
Hand Card: 1, Expected: 1
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 0
Hand Card: 1, Expected: 1
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 0
Hand Card: 1, Expected: 1
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 0
Deck Card: 2, Expected: 2
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 0
Deck Card: 2, Expected: 2
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 0
Deck Card: 2, Expected: 2
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 0
Deck Card: 2, Expected: 2
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 0
Deck Card: 2, Expected: 2
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 0
Deck Card: 2, Expected: 2
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 0
Deck Card: 2, Expected: 2
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 0
Hand Card: 2, Expected: 2
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 0
Hand Card: 2, Expected: 2
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 0
Hand Card: 2, Expected: 2
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 0
Hand Card: 2, Expected: 2
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 0
Hand Card: 2, Expected: 2
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 0
Hand Card: 2, Expected: 2
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 0
Hand Card: 2, Expected: 2
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 0
Deck Card: 3, Expected: 3
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 0
Deck Card: 3, Expected: 3
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 0
Deck Card: 3, Expected: 3
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 0
Deck Card: 3, Expected: 3
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 0
Deck Card: 3, Expected: 3
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 0
Deck Card: 3, Expected: 3
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 0
Deck Card: 3, Expected: 3
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 0
Hand Card: 3, Expected: 3
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 0
Hand Card: 3, Expected: 3
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 0
Hand Card: 3, Expected: 3
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 0
Hand Card: 3, Expected: 3
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 0
Hand Card: 3, Expected: 3
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 0
Hand Card: 3, Expected: 3
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 0
Hand Card: 3, Expected: 3
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 0
Deck Card: 4, Expected: 4
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 0
Deck Card: 4, Expected: 4
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 0
Deck Card: 4, Expected: 4
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 0
Deck Card: 4, Expected: 4
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 0
Deck Card: 4, Expected: 4
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 0
Deck Card: 4, Expected: 4
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 0
Deck Card: 4, Expected: 4
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 0
Hand Card: 4, Expected: 4
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 0
Hand Card: 4, Expected: 4
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 0
Hand Card: 4, Expected: 4
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 0
Hand Card: 4, Expected: 4
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 0
Hand Card: 4, Expected: 4
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 0
Hand Card: 4, Expected: 4
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 0
Hand Card: 4, Expected: 4
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 0
Deck Card: 5, Expected: 5
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 0
Deck Card: 5, Expected: 5
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 0
Deck Card: 5, Expected: 5
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 0
Deck Card: 5, Expected: 5
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 0
Deck Card: 5, Expected: 5
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 0
Deck Card: 5, Expected: 5
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 0
Deck Card: 5, Expected: 5
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 0
Hand Card: 5, Expected: 5
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 0
Hand Card: 5, Expected: 5
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 0
Hand Card: 5, Expected: 5
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 0
Hand Card: 5, Expected: 5
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 0
Hand Card: 5, Expected: 5
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 0
Hand Card: 5, Expected: 5
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 0
Hand Card: 5, Expected: 5
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 0
Deck Card: 6, Expected: 6
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 0
Deck Card: 6, Expected: 6
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 0
Deck Card: 6, Expected: 6
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 0
Deck Card: 6, Expected: 6
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 0
Deck Card: 6, Expected: 6
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 0
Deck Card: 6, Expected: 6
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 0
Deck Card: 6, Expected: 6
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 0
Hand Card: 6, Expected: 6
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 0
Hand Card: 6, Expected: 6
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 0
Hand Card: 6, Expected: 6
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 0
Hand Card: 6, Expected: 6
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 0
Hand Card: 6, Expected: 6
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 0
Hand Card: 6, Expected: 6
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 0
Hand Card: 6, Expected: 6
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 0
Deck Card: 7, Expected: 7
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 0
Deck Card: 7, Expected: 7
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 0
Deck Card: 7, Expected: 7
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 0
Deck Card: 7, Expected: 7
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 0
Deck Card: 7, Expected: 7
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 0
Deck Card: 7, Expected: 7
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 0
Deck Card: 7, Expected: 7
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 0
Hand Card: 7, Expected: 7
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 0
Hand Card: 7, Expected: 7
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 0
Hand Card: 7, Expected: 7
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 0
Hand Card: 7, Expected: 7
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 0
Hand Card: 7, Expected: 7
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 0
Hand Card: 7, Expected: 7
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 0
Hand Card: 7, Expected: 7
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 0
Deck Card: 8, Expected: 8
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 0
Deck Card: 8, Expected: 8
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 0
Deck Card: 8, Expected: 8
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 0
Deck Card: 8, Expected: 8
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 0
Deck Card: 8, Expected: 8
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 0
Deck Card: 8, Expected: 8
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 0
Deck Card: 8, Expected: 8
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 0
Hand Card: 8, Expected: 8
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 0
Hand Card: 8, Expected: 8
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 0
Hand Card: 8, Expected: 8
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 0
Hand Card: 8, Expected: 8
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 0
Hand Card: 8, Expected: 8
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 0
Hand Card: 8, Expected: 8
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 0
Hand Card: 8, Expected: 8
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 0
Deck Card: 9, Expected: 9
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 0
Deck Card: 9, Expected: 9
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 0
Deck Card: 9, Expected: 9
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 0
Deck Card: 9, Expected: 9
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 0
Deck Card: 9, Expected: 9
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 0
Deck Card: 9, Expected: 9
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 0
Deck Card: 9, Expected: 9
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 0
Hand Card: 9, Expected: 9
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 0
Hand Card: 9, Expected: 9
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 0
Hand Card: 9, Expected: 9
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 0
Hand Card: 9, Expected: 9
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 0
Hand Card: 9, Expected: 9
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 0
Hand Card: 9, Expected: 9
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 0
Hand Card: 9, Expected: 9
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 0
Deck Card: 10, Expected: 10
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 0
Deck Card: 10, Expected: 10
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 0
Deck Card: 10, Expected: 10
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 0
Deck Card: 10, Expected: 10
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 0
Deck Card: 10, Expected: 10
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 0
Deck Card: 10, Expected: 10
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 0
Deck Card: 10, Expected: 10
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 0
Hand Card: 10, Expected: 10
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 0
Hand Card: 10, Expected: 10
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 0
Hand Card: 10, Expected: 10
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 0
Hand Card: 10, Expected: 10
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 0
Hand Card: 10, Expected: 10
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 0
Hand Card: 10, Expected: 10
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 0
Hand Card: 10, Expected: 10
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 0
Deck Card: 11, Expected: 11
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 0
Deck Card: 11, Expected: 11
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 0
Deck Card: 11, Expected: 11
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 0
Deck Card: 11, Expected: 11
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 0
Deck Card: 11, Expected: 11
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 0
Deck Card: 11, Expected: 11
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 0
Deck Card: 11, Expected: 11
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 0
Hand Card: 11, Expected: 11
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 0
Hand Card: 11, Expected: 11
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 0
Hand Card: 11, Expected: 11
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 0
Hand Card: 11, Expected: 11
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 0
Hand Card: 11, Expected: 11
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 0
Hand Card: 11, Expected: 11
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 0
Hand Card: 11, Expected: 11
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 0
Deck Card: 12, Expected: 12
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 0
Deck Card: 12, Expected: 12
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 0
Deck Card: 12, Expected: 12
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 0
Deck Card: 12, Expected: 12
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 0
Deck Card: 12, Expected: 12
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 0
Deck Card: 12, Expected: 12
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 0
Deck Card: 12, Expected: 12
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 0
Hand Card: 12, Expected: 12
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 0
Hand Card: 12, Expected: 12
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 0
Hand Card: 12, Expected: 12
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 0
Hand Card: 12, Expected: 12
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 0
Hand Card: 12, Expected: 12
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 0
Hand Card: 12, Expected: 12
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 0
Hand Card: 12, Expected: 12
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 0
Deck Card: 13, Expected: 13
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 0
Deck Card: 13, Expected: 13
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 0
Deck Card: 13, Expected: 13
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 0
Deck Card: 13, Expected: 13
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 0
Deck Card: 13, Expected: 13
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 0
Deck Card: 13, Expected: 13
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 0
Deck Card: 13, Expected: 13
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 0
Hand Card: 13, Expected: 13
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 0
Hand Card: 13, Expected: 13
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 0
Hand Card: 13, Expected: 13
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 0
Hand Card: 13, Expected: 13
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 0
Hand Card: 13, Expected: 13
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 0
Hand Card: 13, Expected: 13
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 0
Hand Card: 13, Expected: 13
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 0
Deck Card: 14, Expected: 14
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 0
Deck Card: 14, Expected: 14
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 0
Deck Card: 14, Expected: 14
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 0
Deck Card: 14, Expected: 14
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 0
Deck Card: 14, Expected: 14
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 0
Deck Card: 14, Expected: 14
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 0
Deck Card: 14, Expected: 14
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 0
Hand Card: 14, Expected: 14
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 0
Hand Card: 14, Expected: 14
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 0
Hand Card: 14, Expected: 14
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 0
Hand Card: 14, Expected: 14
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 0
Hand Card: 14, Expected: 14
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 0
Hand Card: 14, Expected: 14
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 0
Hand Card: 14, Expected: 14
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 0
Deck Card: 15, Expected: 15
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 0
Deck Card: 15, Expected: 15
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 0
Deck Card: 15, Expected: 15
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 0
Deck Card: 15, Expected: 15
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 0
Deck Card: 15, Expected: 15
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 0
Deck Card: 15, Expected: 15
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 0
Deck Card: 15, Expected: 15
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 0
Hand Card: 15, Expected: 15
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 0
Hand Card: 15, Expected: 15
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 0
Hand Card: 15, Expected: 15
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 0
Hand Card: 15, Expected: 15
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 0
Hand Card: 15, Expected: 15
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 0
Hand Card: 15, Expected: 15
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 0
Hand Card: 15, Expected: 15
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 0
Deck Card: 16, Expected: 16
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 0
Deck Card: 16, Expected: 16
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 0
Deck Card: 16, Expected: 16
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 0
Deck Card: 16, Expected: 16
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 0
Deck Card: 16, Expected: 16
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 0
Deck Card: 16, Expected: 16
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 0
Deck Card: 16, Expected: 16
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 0
Hand Card: 16, Expected: 16
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 0
Hand Card: 16, Expected: 16
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 0
Hand Card: 16, Expected: 16
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 0
Hand Card: 16, Expected: 16
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 0
Hand Card: 16, Expected: 16
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 0
Hand Card: 16, Expected: 16
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 0
Hand Card: 16, Expected: 16
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 1
Deck Card: 0, Expected: 0
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 1
Deck Card: 0, Expected: 0
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 1
Deck Card: 0, Expected: 0
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 1
Deck Card: 0, Expected: 0
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 1
Deck Card: 0, Expected: 0
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 1
Deck Card: 0, Expected: 0
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 1
Deck Card: 0, Expected: 0
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 1
Hand Card: 0, Expected: 0
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 1
Hand Card: 0, Expected: 0
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 1
Hand Card: 0, Expected: 0
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 1
Hand Card: 0, Expected: 0
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 1
Hand Card: 0, Expected: 0
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 1
Hand Card: 0, Expected: 0
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 1
Hand Card: 0, Expected: 0
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 1
Deck Card: 1, Expected: 1
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 1
Deck Card: 1, Expected: 1
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 1
Deck Card: 1, Expected: 1
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 1
Deck Card: 1, Expected: 1
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 1
Deck Card: 1, Expected: 1
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 1
Deck Card: 1, Expected: 1
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 1
Deck Card: 1, Expected: 1
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 1
Hand Card: 1, Expected: 1
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 1
Hand Card: 1, Expected: 1
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 1
Hand Card: 1, Expected: 1
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 1
Hand Card: 1, Expected: 1
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 1
Hand Card: 1, Expected: 1
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 1
Hand Card: 1, Expected: 1
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 1
Hand Card: 1, Expected: 1
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 1
Deck Card: 2, Expected: 2
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 1
Deck Card: 2, Expected: 2
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 1
Deck Card: 2, Expected: 2
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 1
Deck Card: 2, Expected: 2
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 1
Deck Card: 2, Expected: 2
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 1
Deck Card: 2, Expected: 2
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 1
Deck Card: 2, Expected: 2
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 1
Hand Card: 2, Expected: 2
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 1
Hand Card: 2, Expected: 2
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 1
Hand Card: 2, Expected: 2
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 1
Hand Card: 2, Expected: 2
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 1
Hand Card: 2, Expected: 2
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 1
Hand Card: 2, Expected: 2
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 1
Hand Card: 2, Expected: 2
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 1
Deck Card: 3, Expected: 3
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 1
Deck Card: 3, Expected: 3
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 1
Deck Card: 3, Expected: 3
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 1
Deck Card: 3, Expected: 3
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 1
Deck Card: 3, Expected: 3
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 1
Deck Card: 3, Expected: 3
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 1
Deck Card: 3, Expected: 3
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 1
Hand Card: 3, Expected: 3
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 1
Hand Card: 3, Expected: 3
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 1
Hand Card: 3, Expected: 3
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 1
Hand Card: 3, Expected: 3
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 1
Hand Card: 3, Expected: 3
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 1
Hand Card: 3, Expected: 3
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 1
Hand Card: 3, Expected: 3
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 1
Deck Card: 4, Expected: 4
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 1
Deck Card: 4, Expected: 4
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 1
Deck Card: 4, Expected: 4
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 1
Deck Card: 4, Expected: 4
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 1
Deck Card: 4, Expected: 4
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 1
Deck Card: 4, Expected: 4
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 1
Deck Card: 4, Expected: 4
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 1
Hand Card: 4, Expected: 4
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 1
Hand Card: 4, Expected: 4
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 1
Hand Card: 4, Expected: 4
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 1
Hand Card: 4, Expected: 4
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 1
Hand Card: 4, Expected: 4
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 1
Hand Card: 4, Expected: 4
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 1
Hand Card: 4, Expected: 4
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 1
Deck Card: 5, Expected: 5
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 1
Deck Card: 5, Expected: 5
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 1
Deck Card: 5, Expected: 5
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 1
Deck Card: 5, Expected: 5
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 1
Deck Card: 5, Expected: 5
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 1
Deck Card: 5, Expected: 5
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 1
Deck Card: 5, Expected: 5
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 1
Hand Card: 5, Expected: 5
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 1
Hand Card: 5, Expected: 5
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 1
Hand Card: 5, Expected: 5
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 1
Hand Card: 5, Expected: 5
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 1
Hand Card: 5, Expected: 5
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 1
Hand Card: 5, Expected: 5
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 1
Hand Card: 5, Expected: 5
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 1
Deck Card: 6, Expected: 6
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 1
Deck Card: 6, Expected: 6
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 1
Deck Card: 6, Expected: 6
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 1
Deck Card: 6, Expected: 6
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 1
Deck Card: 6, Expected: 6
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 1
Deck Card: 6, Expected: 6
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 1
Deck Card: 6, Expected: 6
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 1
Hand Card: 6, Expected: 6
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 1
Hand Card: 6, Expected: 6
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 1
Hand Card: 6, Expected: 6
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 1
Hand Card: 6, Expected: 6
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 1
Hand Card: 6, Expected: 6
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 1
Hand Card: 6, Expected: 6
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 1
Hand Card: 6, Expected: 6
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 1
Deck Card: 7, Expected: 7
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 1
Deck Card: 7, Expected: 7
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 1
Deck Card: 7, Expected: 7
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 1
Deck Card: 7, Expected: 7
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 1
Deck Card: 7, Expected: 7
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 1
Deck Card: 7, Expected: 7
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 1
Deck Card: 7, Expected: 7
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 1
Hand Card: 7, Expected: 7
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 1
Hand Card: 7, Expected: 7
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 1
Hand Card: 7, Expected: 7
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 1
Hand Card: 7, Expected: 7
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 1
Hand Card: 7, Expected: 7
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 1
Hand Card: 7, Expected: 7
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 1
Hand Card: 7, Expected: 7
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 1
Deck Card: 8, Expected: 8
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 1
Deck Card: 8, Expected: 8
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 1
Deck Card: 8, Expected: 8
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 1
Deck Card: 8, Expected: 8
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 1
Deck Card: 8, Expected: 8
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 1
Deck Card: 8, Expected: 8
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 1
Deck Card: 8, Expected: 8
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 1
Hand Card: 8, Expected: 8
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 1
Hand Card: 8, Expected: 8
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 1
Hand Card: 8, Expected: 8
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 1
Hand Card: 8, Expected: 8
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 1
Hand Card: 8, Expected: 8
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 1
Hand Card: 8, Expected: 8
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 1
Hand Card: 8, Expected: 8
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 1
Deck Card: 9, Expected: 9
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 1
Deck Card: 9, Expected: 9
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 1
Deck Card: 9, Expected: 9
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 1
Deck Card: 9, Expected: 9
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 1
Deck Card: 9, Expected: 9
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 1
Deck Card: 9, Expected: 9
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 1
Deck Card: 9, Expected: 9
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 1
Hand Card: 9, Expected: 9
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 1
Hand Card: 9, Expected: 9
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 1
Hand Card: 9, Expected: 9
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 1
Hand Card: 9, Expected: 9
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 1
Hand Card: 9, Expected: 9
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 1
Hand Card: 9, Expected: 9
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 1
Hand Card: 9, Expected: 9
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 1
Deck Card: 10, Expected: 10
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 1
Deck Card: 10, Expected: 10
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 1
Deck Card: 10, Expected: 10
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 1
Deck Card: 10, Expected: 10
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 1
Deck Card: 10, Expected: 10
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 1
Deck Card: 10, Expected: 10
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 1
Deck Card: 10, Expected: 10
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 1
Hand Card: 10, Expected: 10
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 1
Hand Card: 10, Expected: 10
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 1
Hand Card: 10, Expected: 10
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 1
Hand Card: 10, Expected: 10
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 1
Hand Card: 10, Expected: 10
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 1
Hand Card: 10, Expected: 10
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 1
Hand Card: 10, Expected: 10
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 1
Deck Card: 11, Expected: 11
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 1
Deck Card: 11, Expected: 11
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 1
Deck Card: 11, Expected: 11
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 1
Deck Card: 11, Expected: 11
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 1
Deck Card: 11, Expected: 11
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 1
Deck Card: 11, Expected: 11
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 1
Deck Card: 11, Expected: 11
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 1
Hand Card: 11, Expected: 11
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 1
Hand Card: 11, Expected: 11
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 1
Hand Card: 11, Expected: 11
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 1
Hand Card: 11, Expected: 11
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 1
Hand Card: 11, Expected: 11
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 1
Hand Card: 11, Expected: 11
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 1
Hand Card: 11, Expected: 11
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 1
Deck Card: 12, Expected: 12
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 1
Deck Card: 12, Expected: 12
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 1
Deck Card: 12, Expected: 12
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 1
Deck Card: 12, Expected: 12
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 1
Deck Card: 12, Expected: 12
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 1
Deck Card: 12, Expected: 12
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 1
Deck Card: 12, Expected: 12
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 1
Hand Card: 12, Expected: 12
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 1
Hand Card: 12, Expected: 12
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 1
Hand Card: 12, Expected: 12
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 1
Hand Card: 12, Expected: 12
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 1
Hand Card: 12, Expected: 12
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 1
Hand Card: 12, Expected: 12
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 1
Hand Card: 12, Expected: 12
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 1
Deck Card: 13, Expected: 13
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 1
Deck Card: 13, Expected: 13
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 1
Deck Card: 13, Expected: 13
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 1
Deck Card: 13, Expected: 13
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 1
Deck Card: 13, Expected: 13
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 1
Deck Card: 13, Expected: 13
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 1
Deck Card: 13, Expected: 13
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 1
Hand Card: 13, Expected: 13
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 1
Hand Card: 13, Expected: 13
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 1
Hand Card: 13, Expected: 13
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 1
Hand Card: 13, Expected: 13
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 1
Hand Card: 13, Expected: 13
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 1
Hand Card: 13, Expected: 13
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 1
Hand Card: 13, Expected: 13
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 1
Deck Card: 14, Expected: 14
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 1
Deck Card: 14, Expected: 14
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 1
Deck Card: 14, Expected: 14
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 1
Deck Card: 14, Expected: 14
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 1
Deck Card: 14, Expected: 14
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 1
Deck Card: 14, Expected: 14
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 1
Deck Card: 14, Expected: 14
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 1
Hand Card: 14, Expected: 14
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 1
Hand Card: 14, Expected: 14
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 1
Hand Card: 14, Expected: 14
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 1
Hand Card: 14, Expected: 14
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 1
Hand Card: 14, Expected: 14
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 1
Hand Card: 14, Expected: 14
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 1
Hand Card: 14, Expected: 14
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 1
Deck Card: 15, Expected: 15
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 1
Deck Card: 15, Expected: 15
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 1
Deck Card: 15, Expected: 15
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 1
Deck Card: 15, Expected: 15
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 1
Deck Card: 15, Expected: 15
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 1
Deck Card: 15, Expected: 15
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 1
Deck Card: 15, Expected: 15
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 1
Hand Card: 15, Expected: 15
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 1
Hand Card: 15, Expected: 15
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 1
Hand Card: 15, Expected: 15
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 1
Hand Card: 15, Expected: 15
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 1
Hand Card: 15, Expected: 15
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 1
Hand Card: 15, Expected: 15
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 1
Hand Card: 15, Expected: 15
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 1
Deck Card: 16, Expected: 16
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 1
Deck Card: 16, Expected: 16
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 1
Deck Card: 16, Expected: 16
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 1
Deck Card: 16, Expected: 16
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 1
Deck Card: 16, Expected: 16
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 1
Deck Card: 16, Expected: 16
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 1
Deck Card: 16, Expected: 16
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 1
Hand Card: 16, Expected: 16
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 1
Hand Card: 16, Expected: 16
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 1
Hand Card: 16, Expected: 16
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 1
Hand Card: 16, Expected: 16
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 1
Hand Card: 16, Expected: 16
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 1
Hand Card: 16, Expected: 16
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 1
Hand Card: 16, Expected: 16
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
All tests passed!
File 'dominion.c'
Lines executed:51.01% of 643
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:45
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
   151215:    9:  if (*(int*)a > *(int*)b)
      336:   10:    return 1;
   150879:   11:  if (*(int*)a < *(int*)b)
    53994:   12:    return -1;
    96885:   13:  return 0;
   151215:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     5361:   44:  SelectStream(1);
     5361:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
    10722:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     5361:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   117942:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
  1179420:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
  1018590:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
   536100:   65:        }
    53610:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     5361:   73:  if (numPlayers == 2)
        -:   74:    {
     5361:   75:      state->supplyCount[curse] = 10;
     5361:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     5361:   87:  if (numPlayers == 2)
        -:   88:    {
     5361:   89:      state->supplyCount[estate] = 8;
     5361:   90:      state->supplyCount[duchy] = 8;
     5361:   91:      state->supplyCount[province] = 8;
     5361:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     5361:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     5361:  102:  state->supplyCount[silver] = 40;
     5361:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   225162:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
  1769130:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
   830955:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
   101861:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    10720:  115:		  if (numPlayers == 2){ 
    10720:  116:		    state->supplyCount[i] = 8; 
    10720:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
    10720:  119:		}
        -:  120:	      else
        -:  121:		{
    42890:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    53610:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   777345:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
   777345:  130:	}
        -:  131:
   107220:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    32166:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
    10722:  140:      state->deckCount[i] = 0;
    85776:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    32166:  143:	  state->deck[i][j] = estate;
    32166:  144:	  state->deckCount[i]++;
    32166:  145:	}
   171552:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    75054:  148:	  state->deck[i][j] = copper;
    75054:  149:	  state->deckCount[i]++;		
    75054:  150:	}
    10722:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    32166:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
    10722:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
    10722:  160:    }
        -:  161:
        -:  162:  //draw player hands
    32166:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    10722:  166:      state->handCount[i] = 0;
    10722:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
    10722:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
   300216:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
   144747:  178:      state->embargoTokens[i] = 0;
   144747:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     5361:  182:  state->outpostPlayed = 0;
     5361:  183:  state->phase = 0;
     5361:  184:  state->numActions = 1;
     5361:  185:  state->numBuys = 1;
     5361:  186:  state->playedCardCount = 0;
     5361:  187:  state->whoseTurn = 0;
     5361:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    64332:  192:  for (it = 0; it < 5; it++){
    26805:  193:    drawCard(state->whoseTurn, state);
    26805:  194:  }
        -:  195:
     5361:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     5361:  198:  return 0;
     5361:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    21313:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    21313:  209:  if (state->deckCount[player] < 1)
    10556:  210:    return -1;
    10757:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   236914:  214:  while (state->deckCount[player] > 0) {
   107700:  215:    card = floor(Random() * state->deckCount[player]);
   107700:  216:    newDeck[newDeckPos] = state->deck[player][card];
   107700:  217:    newDeckPos++;
   754904:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   269752:  219:      state->deck[player][i] = state->deck[player][i+1];
   269752:  220:    }
   107700:  221:    state->deckCount[player]--;
        -:  222:  }
   236914:  223:  for (i = 0; i < newDeckPos; i++) {
   107700:  224:    state->deck[player][i] = newDeck[i];
   107700:  225:    state->deckCount[player]++;
   107700:  226:  }
        -:  227:
    10757:  228:  return 0;
    21313:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
       61:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       61:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
       61:  243:  if ( state->numActions < 1 )
        -:  244:    {
       36:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
       25:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
       32:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
       18:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
        7:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        7:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        7:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
        7:  269:  return 0;
       61:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
       73:  280:  who = state->whoseTurn;
        -:  281:
       73:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
       73:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
       73:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
       73:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
       73:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
       73:  299:    state->coins = (state->coins) - (getCost(supplyPos));
       73:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
       73:  308:  return 0;
       73:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
      536:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
     1128:  316:  int currentPlayer = whoseTurn(state);
     1128:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
     8111:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
      940:  326:  int count = 0;
        -:  327:
    14060:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
     7050:  330:      if (state->deck[player][i] == card) count++;
     6090:  331:    }
        -:  332:
    32872:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    18144:  335:      if (state->hand[player][i] == card) count++;
    15496:  336:    }
        -:  337:
    25400:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    13720:  340:      if (state->discard[player][i] == card) count++;
    11760:  341:    }
        -:  342:
      940:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
     1860:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
       77:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
      988:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
      417:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      417:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
      417:  359:  }
       77:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
       77:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
       39:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
       39:  365:  }
        -:  366:  else{
       38:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
       77:  370:  state->outpostPlayed = 0;
       77:  371:  state->phase = 0;
       77:  372:  state->numActions = 1;
       77:  373:  state->coins = 0;
       77:  374:  state->numBuys = 1;
       77:  375:  state->playedCardCount = 0;
       77:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
      924:  380:  for (k = 0; k < 5; k++){
      385:  381:    drawCard(state->whoseTurn, state);//Draw a card
      385:  382:  }
        -:  383:
        -:  384:  //Update money
       77:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
       77:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
      445:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
      152:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
      293:  401:  j = 0;
    15236:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
     7325:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
      432:  406:	  j++;
      432:  407:	}
     7325:  408:    }
      293:  409:  if ( j >= 3)
        -:  410:    {
       72:  411:      return 1;
        -:  412:    }
        -:  413:
      221:  414:  return 0;
      445:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
      184:  420:  int score = 0;
        -:  421:  //score from hand
     4708:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
     2546:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
     2515:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
     2518:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
     2523:  427:      if (state->hand[player][i] == province) { score = score + 6; };
     2526:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
     2530:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     2170:  430:    }
        -:  431:
        -:  432:  //score from discard
     2804:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
     1418:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
     1420:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
     1418:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
     1422:  438:      if (state->discard[player][i] == province) { score = score + 6; };
     1418:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
     1418:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     1218:  441:    }
        -:  442:
        -:  443:  //score from deck
     2804:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
     1418:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
     1421:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
     1418:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
     1420:  449:      if (state->deck[player][i] == province) { score = score + 6; };
     1418:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
     1418:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     1218:  452:    }
        -:  453:
      184:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    33307:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    12086:  533:    for (i = 0; i < state->discardCount[player];i++){
      480:  534:      state->deck[player][i] = state->discard[player][i];
      480:  535:      state->discard[player][i] = -1;
      480:  536:    }
        -:  537:
     5563:  538:    state->deckCount[player] = state->discardCount[player];
     5563:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     5563:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     5563:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     5563:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     5563:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     5563:  559:    if (deckCounter == 0)
     5528:  560:      return -1;
        -:  561:
       35:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       35:  563:    state->deckCount[player]--;
       35:  564:    state->handCount[player]++;//Increment hand count
       35:  565:  }
        -:  566:
        -:  567:  else{
    27744:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    27744:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    27744:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    27744:  576:    state->deckCount[player]--;
    27744:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    27779:  580:  return 0;
    33307:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
      146:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
       32:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
       70:  598:      return 3;
        -:  599:    case gold:
       28:  600:      return 6;
        -:  601:    case adventurer:
        8:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
        8:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
      146:  644:}
        -:  645:
        -:  646://smithy function to introduce a bug
        -:  647:int smithyfun(int currentPlayer, struct gameState *state, int handPos){
        -:  648:  //+3 Cards
        -:  649:  int i;
      428:  650:  for (i = 0; i <= 3; i++)
        -:  651:  {
      171:  652:    drawCard(currentPlayer, state);
      171:  653:  }
        -:  654:      
        -:  655:      //discard card from hand
       43:  656:      discardCard(handPos, currentPlayer, state, 0);
       43:  657:      return 0;
        -:  658:}
        -:  659:
        -:  660://adventurer function to introduce a bug
        -:  661:int adventurerfun(int currentPlayer, struct gameState *state){
        -:  662:    int cardDrawn;
        -:  663:    int temphand[MAX_HAND];
2291246309455167530:  664:    int drawntreasure = 0;
2291246309455167530:  665:    int z = 0;
        -:  666:
10104103169071346622:  667:  while(drawntreasure <= 2){
72057701412115419:  668:      if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
17981539514:  669:          shuffle(currentPlayer, state);
17981539514:  670:      }
7018965447127852258:  671:  drawCard(currentPlayer, state);
7018965447127852258:  672:  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
14469171020717092264:  673:  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    28331:  674:  drawntreasure++;
        -:  675:  else{
     4993:  676:  temphand[z]=cardDrawn;
     4993:  677:  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     4993:  678:  z++;
        -:  679:  }
        -:  680:}
        -:  681:    
    10114:  682:    while(z-1>=0){
     4993:  683:  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     4993:  684:      z=z-1;
        -:  685:    }
       64:  686:    return 0;
        -:  687:}
        -:  688:
        -:  689:int villagefun(int handPos, int currentPlayer, struct gameState *state){
        -:  690:        //+1 Card
        3:  691:        drawCard(currentPlayer, state);
        -:  692:        
        -:  693:        //+2 Actions
        3:  694:        state->numActions = state->numActions + 2;
        -:  695:        
        -:  696:        //discard played card from hand
        -:  697:        //discardCard(handPos, currentPlayer, state, 0);
        3:  698:        return 0;
        -:  699:}
        -:  700:
        -:  701:int great_hallfun(int currentPlayer, struct gameState *state, int handPos){
        -:  702:        //+1 Card
    #####:  703:        drawCard(currentPlayer, state);
        -:  704:        
        -:  705:        //+1 Actions
    #####:  706:        state->numActions++;
        -:  707:        
        -:  708:        //discard card from hand
    #####:  709:        discardCard(handPos, currentPlayer, state, 0);
    #####:  710:        return 0;
        -:  711:}
        -:  712:
        -:  713:int stewardfun(int choice1, int choice2, int choice3, int handPos, int currentPlayer, struct gameState *state){
        -:  714:
       90:  715:  if (choice1 == 1)
        -:  716:	{
        -:  717:	  //+2 cards
       30:  718:	  drawCard(currentPlayer, state);
       30:  719:	  drawCard(currentPlayer, state);
       30:  720:	}
       60:  721:      else if (choice2 == 2)
        -:  722:	{
        -:  723:	  //+2 coins
    #####:  724:	  state->coins = state->coins + 2;
    #####:  725:	}
        -:  726:      else
        -:  727:	{
        -:  728:	  //trash 2 cards in hand
       60:  729:	  discardCard(choice2, currentPlayer, state, 1);
       60:  730:	  discardCard(choice3, currentPlayer, state, 1);
        -:  731:	}
        -:  732:			
        -:  733:      //discard card from hand
       90:  734:      discardCard(handPos, currentPlayer, state, 0);
       90:  735:      return 0;
        -:  736:}
        -:  737:
        -:  738:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  739:{
        -:  740:  int i;
        -:  741:  int j;
        -:  742:  int k;
        -:  743:  int x;
        -:  744:  int index;
       42:  745:  int currentPlayer = whoseTurn(state);
       42:  746:  int nextPlayer = currentPlayer + 1;
        -:  747:
       42:  748:  int tributeRevealedCards[2] = {-1, -1};
        -:  749:  int temphand[MAX_HAND];// moved above the if statement
       42:  750:  if (nextPlayer > (state->numPlayers - 1)){
        4:  751:    nextPlayer = 0;
        4:  752:  }
        -:  753:  
        -:  754:	
        -:  755:  //uses switch to select card and perform actions
       52:  756:  switch( card ) 
        -:  757:    {
        -:  758:    case adventurer:
        4:  759:      adventurerfun(currentPlayer, state);
        -:  760:			
        -:  761:    case council_room:
        -:  762:      //+4 Cards
      390:  763:      for (i = 0; i < 4; i++)
        -:  764:	{
      156:  765:	  drawCard(currentPlayer, state);
      156:  766:	}
        -:  767:			
        -:  768:      //+1 Buy
       39:  769:      state->numBuys++;
        -:  770:			
        -:  771:      //Each other player draws a card
      234:  772:      for (i = 0; i < state->numPlayers; i++)
        -:  773:	{
       78:  774:	  if ( i != currentPlayer )
        -:  775:	    {
       39:  776:	      drawCard(i, state);
       39:  777:	    }
       78:  778:	}
        -:  779:			
        -:  780:      //put played card in played card pile
       39:  781:      discardCard(handPos, currentPlayer, state, 0);
        -:  782:			
       39:  783:      return 0;
        -:  784:			
        -:  785:    case feast:
        -:  786:      //gain card with cost up to 5
        -:  787:      //Backup hand
    #####:  788:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  789:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  790:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  791:      }
        -:  792:      //Backup hand
        -:  793:
        -:  794:      //Update Coins for Buy
    #####:  795:      updateCoins(currentPlayer, state, 5);
    #####:  796:      x = 1;//Condition to loop on
    #####:  797:      while( x == 1) {//Buy one card
    #####:  798:	if (supplyCount(choice1, state) <= 0){
        -:  799:	  if (DEBUG)
        -:  800:	    printf("None of that card left, sorry!\n");
        -:  801:
        -:  802:	  if (DEBUG){
        -:  803:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  804:	  }
    #####:  805:	}
    #####:  806:	else if (state->coins < getCost(choice1)){
    #####:  807:	  printf("That card is too expensive!\n");
        -:  808:
        -:  809:	  if (DEBUG){
        -:  810:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  811:	  }
    #####:  812:	}
        -:  813:	else{
        -:  814:
        -:  815:	  if (DEBUG){
        -:  816:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  817:	  }
        -:  818:
    #####:  819:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  820:	  x = 0;//No more buying cards
        -:  821:
        -:  822:	  if (DEBUG){
        -:  823:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  824:	  }
        -:  825:
        -:  826:	}
        -:  827:      }     
        -:  828:
        -:  829:      //Reset Hand
    #####:  830:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  831:	state->hand[currentPlayer][i] = temphand[i];
    #####:  832:	temphand[i] = -1;
    #####:  833:      }
        -:  834:      //Reset Hand
        -:  835:      			
    #####:  836:      return 0;
        -:  837:			
        -:  838:    case gardens:
    #####:  839:      return -1;
        -:  840:			
        -:  841:    case mine:
    #####:  842:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  843:
    #####:  844:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  845:	{
    #####:  846:	  return -1;
        -:  847:	}
        -:  848:		
    #####:  849:      if (choice2 > treasure_map || choice2 < curse)
        -:  850:	{
    #####:  851:	  return -1;
        -:  852:	}
        -:  853:
    #####:  854:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  855:	{
    #####:  856:	  return -1;
        -:  857:	}
        -:  858:
    #####:  859:      gainCard(choice2, state, 2, currentPlayer);
        -:  860:
        -:  861:      //discard card from hand
    #####:  862:      discardCard(handPos, currentPlayer, state, 0);
        -:  863:
        -:  864:      //discard trashed card
    #####:  865:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  866:	{
    #####:  867:	  if (state->hand[currentPlayer][i] == j)
        -:  868:	    {
    #####:  869:	      discardCard(i, currentPlayer, state, 0);			
    #####:  870:	      break;
        -:  871:	    }
    #####:  872:	}
        -:  873:			
    #####:  874:      return 0;
        -:  875:			
        -:  876:    case remodel:
    #####:  877:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  878:
    #####:  879:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  880:	{
    #####:  881:	  return -1;
        -:  882:	}
        -:  883:
    #####:  884:      gainCard(choice2, state, 0, currentPlayer);
        -:  885:
        -:  886:      //discard card from hand
    #####:  887:      discardCard(handPos, currentPlayer, state, 0);
        -:  888:
        -:  889:      //discard trashed card
    #####:  890:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  891:	{
    #####:  892:	  if (state->hand[currentPlayer][i] == j)
        -:  893:	    {
    #####:  894:	      discardCard(i, currentPlayer, state, 0);			
    #####:  895:	      break;
        -:  896:	    }
    #####:  897:	}
        -:  898:
        -:  899:
    #####:  900:      return 0;
        -:  901:		
        -:  902:    case smithy:
        -:  903:      //+3 Cards
        3:  904:      smithyfun(currentPlayer, state, handPos);
        -:  905:
        -:  906:    case village:
        3:  907:      villagefun(handPos, currentPlayer, state);
        -:  908:		
        -:  909:    case baron:
        3:  910:      state->numBuys++;//Increase buys by 1!
        3:  911:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  912:	int p = 0;//Iterator for hand!
    #####:  913:	int card_not_discarded = 1;//Flag for discard set!
    #####:  914:	while(card_not_discarded){
    #####:  915:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  916:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  917:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  918:	    state->discardCount[currentPlayer]++;
    #####:  919:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  920:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  921:	    }
    #####:  922:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  923:	    state->handCount[currentPlayer]--;
    #####:  924:	    card_not_discarded = 0;//Exit the loop
    #####:  925:	  }
    #####:  926:	  else if (p > state->handCount[currentPlayer]){
        -:  927:	    if(DEBUG) {
        -:  928:	      printf("No estate cards in your hand, invalid choice\n");
        -:  929:	      printf("Must gain an estate if there are any\n");
        -:  930:	    }
    #####:  931:	    if (supplyCount(estate, state) > 0){
    #####:  932:	      gainCard(estate, state, 0, currentPlayer);
    #####:  933:	      state->supplyCount[estate]--;//Decrement estates
    #####:  934:	      if (supplyCount(estate, state) == 0){
    #####:  935:		isGameOver(state);
    #####:  936:	      }
    #####:  937:	    }
    #####:  938:	    card_not_discarded = 0;//Exit the loop
    #####:  939:	  }
        -:  940:			    
        -:  941:	  else{
    #####:  942:	    p++;//Next card
        -:  943:	  }
        -:  944:	}
    #####:  945:      }
        -:  946:			    
        -:  947:      else{
        3:  948:	if (supplyCount(estate, state) > 0){
        3:  949:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
        3:  950:	  state->supplyCount[estate]--;//Decrement Estates
        3:  951:	  if (supplyCount(estate, state) == 0){
    #####:  952:	    isGameOver(state);
    #####:  953:	  }
        3:  954:	}
        -:  955:      }
        -:  956:	    
        -:  957:      
        3:  958:      return 0;
        -:  959:		
        -:  960:    case great_hall:
    #####:  961:      great_hallfun(currentPlayer, state, handPos);
        -:  962:		
        -:  963:    case minion:
        -:  964:      //+1 action
    #####:  965:      state->numActions++;
        -:  966:			
        -:  967:      //discard card from hand
    #####:  968:      discardCard(handPos, currentPlayer, state, 0);
        -:  969:			
    #####:  970:      if (choice1)		//+2 coins
        -:  971:	{
    #####:  972:	  state->coins = state->coins + 2;
    #####:  973:	}
        -:  974:			
    #####:  975:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  976:	{
        -:  977:	  //discard hand
    #####:  978:	  while(numHandCards(state) > 0)
        -:  979:	    {
    #####:  980:	      discardCard(handPos, currentPlayer, state, 0);
        -:  981:	    }
        -:  982:				
        -:  983:	  //draw 4
    #####:  984:	  for (i = 0; i < 4; i++)
        -:  985:	    {
    #####:  986:	      drawCard(currentPlayer, state);
    #####:  987:	    }
        -:  988:				
        -:  989:	  //other players discard hand and redraw if hand size > 4
    #####:  990:	  for (i = 0; i < state->numPlayers; i++)
        -:  991:	    {
    #####:  992:	      if (i != currentPlayer)
        -:  993:		{
    #####:  994:		  if ( state->handCount[i] > 4 )
        -:  995:		    {
        -:  996:		      //discard hand
    #####:  997:		      while( state->handCount[i] > 0 )
        -:  998:			{
    #####:  999:			  discardCard(handPos, i, state, 0);
        -: 1000:			}
        -: 1001:							
        -: 1002:		      //draw 4
    #####: 1003:		      for (j = 0; j < 4; j++)
        -: 1004:			{
    #####: 1005:			  drawCard(i, state);
    #####: 1006:			}
    #####: 1007:		    }
    #####: 1008:		}
    #####: 1009:	    }
        -: 1010:				
    #####: 1011:	}
    #####: 1012:      return 0;
        -: 1013:		
        -: 1014:    case steward:
    #####: 1015:      stewardfun(choice1, choice2, choice3, handPos, currentPlayer, state);
        -: 1016:
        -: 1017:		
        -: 1018:    case tribute:
    #####: 1019:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1020:	if (state->deckCount[nextPlayer] > 0){
    #####: 1021:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1022:	  state->deckCount[nextPlayer]--;
    #####: 1023:	}
    #####: 1024:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1025:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1026:	  state->discardCount[nextPlayer]--;
    #####: 1027:	}
        -: 1028:	else{
        -: 1029:	  //No Card to Reveal
        -: 1030:	  if (DEBUG){
        -: 1031:	    printf("No cards to reveal\n");
        -: 1032:	  }
        -: 1033:	}
    #####: 1034:      }
        -: 1035:	    
        -: 1036:      else{
    #####: 1037:	if (state->deckCount[nextPlayer] == 0){
    #####: 1038:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1039:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1040:	    state->deckCount[nextPlayer]++;
    #####: 1041:	    state->discard[nextPlayer][i] = -1;
    #####: 1042:	    state->discardCount[nextPlayer]--;
    #####: 1043:	  }
        -: 1044:			    
    #####: 1045:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1046:	} 
    #####: 1047:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1048:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1049:	state->deckCount[nextPlayer]--;
    #####: 1050:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1051:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1052:	state->deckCount[nextPlayer]--;
        -: 1053:      }    
        -: 1054:		       
    #####: 1055:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1056:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1057:	state->playedCardCount++;
    #####: 1058:	tributeRevealedCards[1] = -1;
    #####: 1059:      }
        -: 1060:
    #####: 1061:      for (i = 0; i <= 2; i ++){
    #####: 1062:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1063:	  state->coins += 2;
    #####: 1064:	}
        -: 1065:		    
    #####: 1066:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1067:	  drawCard(currentPlayer, state);
    #####: 1068:	  drawCard(currentPlayer, state);
    #####: 1069:	}
        -: 1070:	else{//Action Card
    #####: 1071:	  state->numActions = state->numActions + 2;
        -: 1072:	}
    #####: 1073:      }
        -: 1074:	    
    #####: 1075:      return 0;
        -: 1076:		
        -: 1077:    case ambassador:
    #####: 1078:      j = 0;		//used to check if player has enough cards to discard
        -: 1079:
    #####: 1080:      if (choice2 > 2 || choice2 < 0)
        -: 1081:	{
    #####: 1082:	  return -1;				
        -: 1083:	}
        -: 1084:
    #####: 1085:      if (choice1 == handPos)
        -: 1086:	{
    #####: 1087:	  return -1;
        -: 1088:	}
        -: 1089:
    #####: 1090:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1091:	{
    #####: 1092:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1093:	    {
    #####: 1094:	      j++;
    #####: 1095:	    }
    #####: 1096:	}
    #####: 1097:      if (j < choice2)
        -: 1098:	{
    #####: 1099:	  return -1;				
        -: 1100:	}
        -: 1101:
        -: 1102:      if (DEBUG) 
        -: 1103:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1104:
        -: 1105:      //increase supply count for choosen card by amount being discarded
    #####: 1106:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1107:			
        -: 1108:      //each other player gains a copy of revealed card
    #####: 1109:      for (i = 0; i < state->numPlayers; i++)
        -: 1110:	{
    #####: 1111:	  if (i != currentPlayer)
        -: 1112:	    {
    #####: 1113:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1114:	    }
    #####: 1115:	}
        -: 1116:
        -: 1117:      //discard played card from hand
    #####: 1118:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1119:
        -: 1120:      //trash copies of cards returned to supply
    #####: 1121:      for (j = 0; j < choice2; j++)
        -: 1122:	{
    #####: 1123:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1124:	    {
    #####: 1125:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1126:		{
    #####: 1127:		  discardCard(i, currentPlayer, state, 1);
    #####: 1128:		  break;
        -: 1129:		}
    #####: 1130:	    }
    #####: 1131:	}			
        -: 1132:
    #####: 1133:      return 0;
        -: 1134:		
        -: 1135:    case cutpurse:
        -: 1136:
    #####: 1137:      updateCoins(currentPlayer, state, 2);
    #####: 1138:      for (i = 0; i < state->numPlayers; i++)
        -: 1139:	{
    #####: 1140:	  if (i != currentPlayer)
        -: 1141:	    {
    #####: 1142:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1143:		{
    #####: 1144:		  if (state->hand[i][j] == copper)
        -: 1145:		    {
    #####: 1146:		      discardCard(j, i, state, 0);
    #####: 1147:		      break;
        -: 1148:		    }
    #####: 1149:		  if (j == state->handCount[i])
        -: 1150:		    {
    #####: 1151:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1152:			{
        -: 1153:			  if (DEBUG)
        -: 1154:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1155:			}	
    #####: 1156:		      break;
        -: 1157:		    }		
    #####: 1158:		}
        -: 1159:					
    #####: 1160:	    }
        -: 1161:				
    #####: 1162:	}				
        -: 1163:
        -: 1164:      //discard played card from hand
    #####: 1165:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1166:
    #####: 1167:      return 0;
        -: 1168:
        -: 1169:		
        -: 1170:    case embargo: 
        -: 1171:      //+2 Coins
    #####: 1172:      state->coins = state->coins + 2;
        -: 1173:			
        -: 1174:      //see if selected pile is in play
    #####: 1175:      if ( state->supplyCount[choice1] == -1 )
        -: 1176:	{
    #####: 1177:	  return -1;
        -: 1178:	}
        -: 1179:			
        -: 1180:      //add embargo token to selected supply pile
    #####: 1181:      state->embargoTokens[choice1]++;
        -: 1182:			
        -: 1183:      //trash card
    #####: 1184:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1185:      return 0;
        -: 1186:		
        -: 1187:    case outpost:
        -: 1188:      //set outpost flag
    #####: 1189:      state->outpostPlayed++;
        -: 1190:			
        -: 1191:      //discard card
    #####: 1192:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1193:      return 0;
        -: 1194:		
        -: 1195:    case salvager:
        -: 1196:      //+1 buy
    #####: 1197:      state->numBuys++;
        -: 1198:			
    #####: 1199:      if (choice1)
        -: 1200:	{
        -: 1201:	  //gain coins equal to trashed card
    #####: 1202:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1203:	  //trash card
    #####: 1204:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1205:	}
        -: 1206:			
        -: 1207:      //discard card
    #####: 1208:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1209:      return 0;
        -: 1210:		
        -: 1211:    case sea_hag:
    #####: 1212:      for (i = 0; i < state->numPlayers; i++){
    #####: 1213:	if (i != currentPlayer){
    #####: 1214:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1215:	  state->discardCount[i]++;
    #####: 1216:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1217:	}
    #####: 1218:      }
    #####: 1219:      return 0;
        -: 1220:		
        -: 1221:    case treasure_map:
        -: 1222:      //search hand for another treasure_map
    #####: 1223:      index = -1;
    #####: 1224:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1225:	{
    #####: 1226:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1227:	    {
    #####: 1228:	      index = i;
    #####: 1229:	      break;
        -: 1230:	    }
    #####: 1231:	}
    #####: 1232:      if (index > -1)
        -: 1233:	{
        -: 1234:	  //trash both treasure cards
    #####: 1235:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1236:	  discardCard(index, currentPlayer, state, 1);
        -: 1237:
        -: 1238:	  //gain 4 Gold cards
    #####: 1239:	  for (i = 0; i < 4; i++)
        -: 1240:	    {
    #####: 1241:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1242:	    }
        -: 1243:				
        -: 1244:	  //return success
    #####: 1245:	  return 1;
        -: 1246:	}
        -: 1247:			
        -: 1248:      //no second treasure_map found in hand
    #####: 1249:      return -1;
        -: 1250:    }
        -: 1251:	
    #####: 1252:  return -1;
       42: 1253:}
        -: 1254:
        -: 1255:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1256:{
        -: 1257:	
        -: 1258:  //if card is not trashed, added to Played pile 
      593: 1259:  if (trashFlag < 1)
        -: 1260:    {
        -: 1261:      //add card to played pile
      323: 1262:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      323: 1263:      state->playedCardCount++;
      323: 1264:    }
        -: 1265:	
        -: 1266:  //set played card to -1
      593: 1267:  state->hand[currentPlayer][handPos] = -1;
        -: 1268:	
        -: 1269:  //remove card from player's hand
      593: 1270:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1271:    {
        -: 1272:      //reduce number of cards in hand
       88: 1273:      state->handCount[currentPlayer]--;
       88: 1274:    }
      505: 1275:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1276:    {
        -: 1277:      //reduce number of cards in hand
       48: 1278:      state->handCount[currentPlayer]--;
       48: 1279:    }
        -: 1280:  else 	
        -: 1281:    {
        -: 1282:      //replace discarded card with last card in hand
      457: 1283:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1284:      //set last card to -1
      457: 1285:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1286:      //reduce number of cards in hand
      457: 1287:      state->handCount[currentPlayer]--;
        -: 1288:    }
        -: 1289:	
      593: 1290:  return 0;
        -: 1291:}
        -: 1292:
        -: 1293:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1294:{
        -: 1295:  //Note: supplyPos is enum of choosen card
        -: 1296:	
        -: 1297:  //check if supply pile is empty (0) or card is not used in game (-1)
     4224: 1298:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1299:    {
      578: 1300:      return -1;
        -: 1301:    }
        -: 1302:	
        -: 1303:  //added card for [whoseTurn] current player:
        -: 1304:  // toFlag = 0 : add to discard
        -: 1305:  // toFlag = 1 : add to deck
        -: 1306:  // toFlag = 2 : add to hand
        -: 1307:
     3646: 1308:  if (toFlag == 1)
        -: 1309:    {
     1428: 1310:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
     1428: 1311:      state->deckCount[player]++;
     1428: 1312:    }
     2218: 1313:  else if (toFlag == 2)
        -: 1314:    {
     1190: 1315:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
     1190: 1316:      state->handCount[player]++;
     1190: 1317:    }
        -: 1318:  else
        -: 1319:    {
     1028: 1320:      state->discard[player][ state->discardCount[player] ] = supplyPos;
     1028: 1321:      state->discardCount[player]++;
        -: 1322:    }
        -: 1323:	
        -: 1324:  //decrease number in supply pile
     3646: 1325:  state->supplyCount[supplyPos]--;
        -: 1326:	 
     3646: 1327:  return 0;
     4224: 1328:}
        -: 1329:
        -: 1330:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1331:{
        -: 1332:  int i;
        -: 1333:	
        -: 1334:  //reset coin count
     5775: 1335:  state->coins = 0;
        -: 1336:
        -: 1337:  //add coins for each Treasure card in player's hand
    68044: 1338:  for (i = 0; i < state->handCount[player]; i++)
        -: 1339:    {
    28247: 1340:      if (state->hand[player][i] == copper)
        -: 1341:	{
    21966: 1342:	  state->coins += 1;
    21966: 1343:	}
     6281: 1344:      else if (state->hand[player][i] == silver)
        -: 1345:	{
      433: 1346:	  state->coins += 2;
      433: 1347:	}
     5848: 1348:      else if (state->hand[player][i] == gold)
        -: 1349:	{
      353: 1350:	  state->coins += 3;
      353: 1351:	}	
    28247: 1352:    }	
        -: 1353:
        -: 1354:  //add bonus
     5775: 1355:  state->coins += bonus;
        -: 1356:
     5775: 1357:  return 0;
        -: 1358:}
        -: 1359:
        -: 1360:
        -: 1361://end of dominion.c
        -: 1362:
TESTING isGameOver():
Testing game with 0 province cards.
return value: 1, Expected: 1 
Testing game with 1 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 2 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 3 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 4 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 5 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 6 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 7 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 8 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 9 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 10 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 11 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 12 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 0 province cards.
return value: 1, Expected: 1 
Testing game with 1 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 2 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 3 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 4 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 5 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 6 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 7 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 8 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 9 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 10 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 11 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 12 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
All tests passed!
File 'dominion.c'
Lines executed:51.01% of 643
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:46
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
   151943:    9:  if (*(int*)a > *(int*)b)
      336:   10:    return 1;
   151607:   11:  if (*(int*)a < *(int*)b)
    54254:   12:    return -1;
    97353:   13:  return 0;
   151943:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     5387:   44:  SelectStream(1);
     5387:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
    10774:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     5387:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   118514:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
  1185140:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
  1023530:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
   538700:   65:        }
    53870:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     5387:   73:  if (numPlayers == 2)
        -:   74:    {
     5387:   75:      state->supplyCount[curse] = 10;
     5387:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     5387:   87:  if (numPlayers == 2)
        -:   88:    {
     5387:   89:      state->supplyCount[estate] = 8;
     5387:   90:      state->supplyCount[duchy] = 8;
     5387:   91:      state->supplyCount[province] = 8;
     5387:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     5387:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     5387:  102:  state->supplyCount[silver] = 40;
     5387:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   226254:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
  1777710:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
   834985:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
   102355:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    10772:  115:		  if (numPlayers == 2){ 
    10772:  116:		    state->supplyCount[i] = 8; 
    10772:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
    10772:  119:		}
        -:  120:	      else
        -:  121:		{
    43098:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    53870:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   781115:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
   781115:  130:	}
        -:  131:
   107740:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    32322:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
    10774:  140:      state->deckCount[i] = 0;
    86192:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    32322:  143:	  state->deck[i][j] = estate;
    32322:  144:	  state->deckCount[i]++;
    32322:  145:	}
   172384:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    75418:  148:	  state->deck[i][j] = copper;
    75418:  149:	  state->deckCount[i]++;		
    75418:  150:	}
    10774:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    32322:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
    10774:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
    10774:  160:    }
        -:  161:
        -:  162:  //draw player hands
    32322:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    10774:  166:      state->handCount[i] = 0;
    10774:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
    10774:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
   301672:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
   145449:  178:      state->embargoTokens[i] = 0;
   145449:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     5387:  182:  state->outpostPlayed = 0;
     5387:  183:  state->phase = 0;
     5387:  184:  state->numActions = 1;
     5387:  185:  state->numBuys = 1;
     5387:  186:  state->playedCardCount = 0;
     5387:  187:  state->whoseTurn = 0;
     5387:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    64644:  192:  for (it = 0; it < 5; it++){
    26935:  193:    drawCard(state->whoseTurn, state);
    26935:  194:  }
        -:  195:
     5387:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     5387:  198:  return 0;
     5387:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    21365:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    21365:  209:  if (state->deckCount[player] < 1)
    10556:  210:    return -1;
    10809:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   238058:  214:  while (state->deckCount[player] > 0) {
   108220:  215:    card = floor(Random() * state->deckCount[player]);
   108220:  216:    newDeck[newDeckPos] = state->deck[player][card];
   108220:  217:    newDeckPos++;
   758544:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   271052:  219:      state->deck[player][i] = state->deck[player][i+1];
   271052:  220:    }
   108220:  221:    state->deckCount[player]--;
        -:  222:  }
   238058:  223:  for (i = 0; i < newDeckPos; i++) {
   108220:  224:    state->deck[player][i] = newDeck[i];
   108220:  225:    state->deckCount[player]++;
   108220:  226:  }
        -:  227:
    10809:  228:  return 0;
    21365:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
       61:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       61:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
       61:  243:  if ( state->numActions < 1 )
        -:  244:    {
       36:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
       25:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
       32:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
       18:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
        7:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        7:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        7:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
        7:  269:  return 0;
       61:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
       73:  280:  who = state->whoseTurn;
        -:  281:
       73:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
       73:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
       73:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
       73:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
       73:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
       73:  299:    state->coins = (state->coins) - (getCost(supplyPos));
       73:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
       73:  308:  return 0;
       73:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
      536:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
     1128:  316:  int currentPlayer = whoseTurn(state);
     1128:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
     8111:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
      940:  326:  int count = 0;
        -:  327:
    14060:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
     7050:  330:      if (state->deck[player][i] == card) count++;
     6090:  331:    }
        -:  332:
    32872:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    18144:  335:      if (state->hand[player][i] == card) count++;
    15496:  336:    }
        -:  337:
    25400:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    13720:  340:      if (state->discard[player][i] == card) count++;
    11760:  341:    }
        -:  342:
      940:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
     1860:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
       77:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
      988:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
      417:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      417:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
      417:  359:  }
       77:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
       77:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
       39:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
       39:  365:  }
        -:  366:  else{
       38:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
       77:  370:  state->outpostPlayed = 0;
       77:  371:  state->phase = 0;
       77:  372:  state->numActions = 1;
       77:  373:  state->coins = 0;
       77:  374:  state->numBuys = 1;
       77:  375:  state->playedCardCount = 0;
       77:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
      924:  380:  for (k = 0; k < 5; k++){
      385:  381:    drawCard(state->whoseTurn, state);//Draw a card
      385:  382:  }
        -:  383:
        -:  384:  //Update money
       77:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
       77:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
      567:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
      202:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
      365:  401:  j = 0;
    18980:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
     9125:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
      576:  406:	  j++;
      576:  407:	}
     9125:  408:    }
      365:  409:  if ( j >= 3)
        -:  410:    {
       96:  411:      return 1;
        -:  412:    }
        -:  413:
      269:  414:  return 0;
      567:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
      184:  420:  int score = 0;
        -:  421:  //score from hand
     4708:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
     2546:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
     2515:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
     2518:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
     2523:  427:      if (state->hand[player][i] == province) { score = score + 6; };
     2526:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
     2530:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     2170:  430:    }
        -:  431:
        -:  432:  //score from discard
     2804:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
     1418:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
     1420:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
     1418:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
     1422:  438:      if (state->discard[player][i] == province) { score = score + 6; };
     1418:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
     1418:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     1218:  441:    }
        -:  442:
        -:  443:  //score from deck
     2804:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
     1418:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
     1421:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
     1418:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
     1420:  449:      if (state->deck[player][i] == province) { score = score + 6; };
     1418:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
     1418:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     1218:  452:    }
        -:  453:
      184:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    33437:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    12086:  533:    for (i = 0; i < state->discardCount[player];i++){
      480:  534:      state->deck[player][i] = state->discard[player][i];
      480:  535:      state->discard[player][i] = -1;
      480:  536:    }
        -:  537:
     5563:  538:    state->deckCount[player] = state->discardCount[player];
     5563:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     5563:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     5563:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     5563:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     5563:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     5563:  559:    if (deckCounter == 0)
     5528:  560:      return -1;
        -:  561:
       35:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       35:  563:    state->deckCount[player]--;
       35:  564:    state->handCount[player]++;//Increment hand count
       35:  565:  }
        -:  566:
        -:  567:  else{
    27874:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    27874:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    27874:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    27874:  576:    state->deckCount[player]--;
    27874:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    27909:  580:  return 0;
    33437:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
      146:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
       32:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
       70:  598:      return 3;
        -:  599:    case gold:
       28:  600:      return 6;
        -:  601:    case adventurer:
        8:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
        8:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
      146:  644:}
        -:  645:
        -:  646://smithy function to introduce a bug
        -:  647:int smithyfun(int currentPlayer, struct gameState *state, int handPos){
        -:  648:  //+3 Cards
        -:  649:  int i;
      428:  650:  for (i = 0; i <= 3; i++)
        -:  651:  {
      171:  652:    drawCard(currentPlayer, state);
      171:  653:  }
        -:  654:      
        -:  655:      //discard card from hand
       43:  656:      discardCard(handPos, currentPlayer, state, 0);
       43:  657:      return 0;
        -:  658:}
        -:  659:
        -:  660://adventurer function to introduce a bug
        -:  661:int adventurerfun(int currentPlayer, struct gameState *state){
        -:  662:    int cardDrawn;
        -:  663:    int temphand[MAX_HAND];
2291246309455167530:  664:    int drawntreasure = 0;
2291246309455167530:  665:    int z = 0;
        -:  666:
10104103169071346622:  667:  while(drawntreasure <= 2){
72057701412115419:  668:      if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
17981539514:  669:          shuffle(currentPlayer, state);
17981539514:  670:      }
7018965447127852258:  671:  drawCard(currentPlayer, state);
7018965447127852258:  672:  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
14469171020717092264:  673:  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    28331:  674:  drawntreasure++;
        -:  675:  else{
     4993:  676:  temphand[z]=cardDrawn;
     4993:  677:  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     4993:  678:  z++;
        -:  679:  }
        -:  680:}
        -:  681:    
    10114:  682:    while(z-1>=0){
     4993:  683:  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     4993:  684:      z=z-1;
        -:  685:    }
       64:  686:    return 0;
        -:  687:}
        -:  688:
        -:  689:int villagefun(int handPos, int currentPlayer, struct gameState *state){
        -:  690:        //+1 Card
        3:  691:        drawCard(currentPlayer, state);
        -:  692:        
        -:  693:        //+2 Actions
        3:  694:        state->numActions = state->numActions + 2;
        -:  695:        
        -:  696:        //discard played card from hand
        -:  697:        //discardCard(handPos, currentPlayer, state, 0);
        3:  698:        return 0;
        -:  699:}
        -:  700:
        -:  701:int great_hallfun(int currentPlayer, struct gameState *state, int handPos){
        -:  702:        //+1 Card
    #####:  703:        drawCard(currentPlayer, state);
        -:  704:        
        -:  705:        //+1 Actions
    #####:  706:        state->numActions++;
        -:  707:        
        -:  708:        //discard card from hand
    #####:  709:        discardCard(handPos, currentPlayer, state, 0);
    #####:  710:        return 0;
        -:  711:}
        -:  712:
        -:  713:int stewardfun(int choice1, int choice2, int choice3, int handPos, int currentPlayer, struct gameState *state){
        -:  714:
       90:  715:  if (choice1 == 1)
        -:  716:	{
        -:  717:	  //+2 cards
       30:  718:	  drawCard(currentPlayer, state);
       30:  719:	  drawCard(currentPlayer, state);
       30:  720:	}
       60:  721:      else if (choice2 == 2)
        -:  722:	{
        -:  723:	  //+2 coins
    #####:  724:	  state->coins = state->coins + 2;
    #####:  725:	}
        -:  726:      else
        -:  727:	{
        -:  728:	  //trash 2 cards in hand
       60:  729:	  discardCard(choice2, currentPlayer, state, 1);
       60:  730:	  discardCard(choice3, currentPlayer, state, 1);
        -:  731:	}
        -:  732:			
        -:  733:      //discard card from hand
       90:  734:      discardCard(handPos, currentPlayer, state, 0);
       90:  735:      return 0;
        -:  736:}
        -:  737:
        -:  738:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  739:{
        -:  740:  int i;
        -:  741:  int j;
        -:  742:  int k;
        -:  743:  int x;
        -:  744:  int index;
       42:  745:  int currentPlayer = whoseTurn(state);
       42:  746:  int nextPlayer = currentPlayer + 1;
        -:  747:
       42:  748:  int tributeRevealedCards[2] = {-1, -1};
        -:  749:  int temphand[MAX_HAND];// moved above the if statement
       42:  750:  if (nextPlayer > (state->numPlayers - 1)){
        4:  751:    nextPlayer = 0;
        4:  752:  }
        -:  753:  
        -:  754:	
        -:  755:  //uses switch to select card and perform actions
       52:  756:  switch( card ) 
        -:  757:    {
        -:  758:    case adventurer:
        4:  759:      adventurerfun(currentPlayer, state);
        -:  760:			
        -:  761:    case council_room:
        -:  762:      //+4 Cards
      390:  763:      for (i = 0; i < 4; i++)
        -:  764:	{
      156:  765:	  drawCard(currentPlayer, state);
      156:  766:	}
        -:  767:			
        -:  768:      //+1 Buy
       39:  769:      state->numBuys++;
        -:  770:			
        -:  771:      //Each other player draws a card
      234:  772:      for (i = 0; i < state->numPlayers; i++)
        -:  773:	{
       78:  774:	  if ( i != currentPlayer )
        -:  775:	    {
       39:  776:	      drawCard(i, state);
       39:  777:	    }
       78:  778:	}
        -:  779:			
        -:  780:      //put played card in played card pile
       39:  781:      discardCard(handPos, currentPlayer, state, 0);
        -:  782:			
       39:  783:      return 0;
        -:  784:			
        -:  785:    case feast:
        -:  786:      //gain card with cost up to 5
        -:  787:      //Backup hand
    #####:  788:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  789:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  790:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  791:      }
        -:  792:      //Backup hand
        -:  793:
        -:  794:      //Update Coins for Buy
    #####:  795:      updateCoins(currentPlayer, state, 5);
    #####:  796:      x = 1;//Condition to loop on
    #####:  797:      while( x == 1) {//Buy one card
    #####:  798:	if (supplyCount(choice1, state) <= 0){
        -:  799:	  if (DEBUG)
        -:  800:	    printf("None of that card left, sorry!\n");
        -:  801:
        -:  802:	  if (DEBUG){
        -:  803:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  804:	  }
    #####:  805:	}
    #####:  806:	else if (state->coins < getCost(choice1)){
    #####:  807:	  printf("That card is too expensive!\n");
        -:  808:
        -:  809:	  if (DEBUG){
        -:  810:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  811:	  }
    #####:  812:	}
        -:  813:	else{
        -:  814:
        -:  815:	  if (DEBUG){
        -:  816:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  817:	  }
        -:  818:
    #####:  819:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  820:	  x = 0;//No more buying cards
        -:  821:
        -:  822:	  if (DEBUG){
        -:  823:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  824:	  }
        -:  825:
        -:  826:	}
        -:  827:      }     
        -:  828:
        -:  829:      //Reset Hand
    #####:  830:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  831:	state->hand[currentPlayer][i] = temphand[i];
    #####:  832:	temphand[i] = -1;
    #####:  833:      }
        -:  834:      //Reset Hand
        -:  835:      			
    #####:  836:      return 0;
        -:  837:			
        -:  838:    case gardens:
    #####:  839:      return -1;
        -:  840:			
        -:  841:    case mine:
    #####:  842:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  843:
    #####:  844:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  845:	{
    #####:  846:	  return -1;
        -:  847:	}
        -:  848:		
    #####:  849:      if (choice2 > treasure_map || choice2 < curse)
        -:  850:	{
    #####:  851:	  return -1;
        -:  852:	}
        -:  853:
    #####:  854:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  855:	{
    #####:  856:	  return -1;
        -:  857:	}
        -:  858:
    #####:  859:      gainCard(choice2, state, 2, currentPlayer);
        -:  860:
        -:  861:      //discard card from hand
    #####:  862:      discardCard(handPos, currentPlayer, state, 0);
        -:  863:
        -:  864:      //discard trashed card
    #####:  865:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  866:	{
    #####:  867:	  if (state->hand[currentPlayer][i] == j)
        -:  868:	    {
    #####:  869:	      discardCard(i, currentPlayer, state, 0);			
    #####:  870:	      break;
        -:  871:	    }
    #####:  872:	}
        -:  873:			
    #####:  874:      return 0;
        -:  875:			
        -:  876:    case remodel:
    #####:  877:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  878:
    #####:  879:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  880:	{
    #####:  881:	  return -1;
        -:  882:	}
        -:  883:
    #####:  884:      gainCard(choice2, state, 0, currentPlayer);
        -:  885:
        -:  886:      //discard card from hand
    #####:  887:      discardCard(handPos, currentPlayer, state, 0);
        -:  888:
        -:  889:      //discard trashed card
    #####:  890:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  891:	{
    #####:  892:	  if (state->hand[currentPlayer][i] == j)
        -:  893:	    {
    #####:  894:	      discardCard(i, currentPlayer, state, 0);			
    #####:  895:	      break;
        -:  896:	    }
    #####:  897:	}
        -:  898:
        -:  899:
    #####:  900:      return 0;
        -:  901:		
        -:  902:    case smithy:
        -:  903:      //+3 Cards
        3:  904:      smithyfun(currentPlayer, state, handPos);
        -:  905:
        -:  906:    case village:
        3:  907:      villagefun(handPos, currentPlayer, state);
        -:  908:		
        -:  909:    case baron:
        3:  910:      state->numBuys++;//Increase buys by 1!
        3:  911:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  912:	int p = 0;//Iterator for hand!
    #####:  913:	int card_not_discarded = 1;//Flag for discard set!
    #####:  914:	while(card_not_discarded){
    #####:  915:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  916:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  917:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  918:	    state->discardCount[currentPlayer]++;
    #####:  919:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  920:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  921:	    }
    #####:  922:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  923:	    state->handCount[currentPlayer]--;
    #####:  924:	    card_not_discarded = 0;//Exit the loop
    #####:  925:	  }
    #####:  926:	  else if (p > state->handCount[currentPlayer]){
        -:  927:	    if(DEBUG) {
        -:  928:	      printf("No estate cards in your hand, invalid choice\n");
        -:  929:	      printf("Must gain an estate if there are any\n");
        -:  930:	    }
    #####:  931:	    if (supplyCount(estate, state) > 0){
    #####:  932:	      gainCard(estate, state, 0, currentPlayer);
    #####:  933:	      state->supplyCount[estate]--;//Decrement estates
    #####:  934:	      if (supplyCount(estate, state) == 0){
    #####:  935:		isGameOver(state);
    #####:  936:	      }
    #####:  937:	    }
    #####:  938:	    card_not_discarded = 0;//Exit the loop
    #####:  939:	  }
        -:  940:			    
        -:  941:	  else{
    #####:  942:	    p++;//Next card
        -:  943:	  }
        -:  944:	}
    #####:  945:      }
        -:  946:			    
        -:  947:      else{
        3:  948:	if (supplyCount(estate, state) > 0){
        3:  949:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
        3:  950:	  state->supplyCount[estate]--;//Decrement Estates
        3:  951:	  if (supplyCount(estate, state) == 0){
    #####:  952:	    isGameOver(state);
    #####:  953:	  }
        3:  954:	}
        -:  955:      }
        -:  956:	    
        -:  957:      
        3:  958:      return 0;
        -:  959:		
        -:  960:    case great_hall:
    #####:  961:      great_hallfun(currentPlayer, state, handPos);
        -:  962:		
        -:  963:    case minion:
        -:  964:      //+1 action
    #####:  965:      state->numActions++;
        -:  966:			
        -:  967:      //discard card from hand
    #####:  968:      discardCard(handPos, currentPlayer, state, 0);
        -:  969:			
    #####:  970:      if (choice1)		//+2 coins
        -:  971:	{
    #####:  972:	  state->coins = state->coins + 2;
    #####:  973:	}
        -:  974:			
    #####:  975:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  976:	{
        -:  977:	  //discard hand
    #####:  978:	  while(numHandCards(state) > 0)
        -:  979:	    {
    #####:  980:	      discardCard(handPos, currentPlayer, state, 0);
        -:  981:	    }
        -:  982:				
        -:  983:	  //draw 4
    #####:  984:	  for (i = 0; i < 4; i++)
        -:  985:	    {
    #####:  986:	      drawCard(currentPlayer, state);
    #####:  987:	    }
        -:  988:				
        -:  989:	  //other players discard hand and redraw if hand size > 4
    #####:  990:	  for (i = 0; i < state->numPlayers; i++)
        -:  991:	    {
    #####:  992:	      if (i != currentPlayer)
        -:  993:		{
    #####:  994:		  if ( state->handCount[i] > 4 )
        -:  995:		    {
        -:  996:		      //discard hand
    #####:  997:		      while( state->handCount[i] > 0 )
        -:  998:			{
    #####:  999:			  discardCard(handPos, i, state, 0);
        -: 1000:			}
        -: 1001:							
        -: 1002:		      //draw 4
    #####: 1003:		      for (j = 0; j < 4; j++)
        -: 1004:			{
    #####: 1005:			  drawCard(i, state);
    #####: 1006:			}
    #####: 1007:		    }
    #####: 1008:		}
    #####: 1009:	    }
        -: 1010:				
    #####: 1011:	}
    #####: 1012:      return 0;
        -: 1013:		
        -: 1014:    case steward:
    #####: 1015:      stewardfun(choice1, choice2, choice3, handPos, currentPlayer, state);
        -: 1016:
        -: 1017:		
        -: 1018:    case tribute:
    #####: 1019:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1020:	if (state->deckCount[nextPlayer] > 0){
    #####: 1021:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1022:	  state->deckCount[nextPlayer]--;
    #####: 1023:	}
    #####: 1024:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1025:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1026:	  state->discardCount[nextPlayer]--;
    #####: 1027:	}
        -: 1028:	else{
        -: 1029:	  //No Card to Reveal
        -: 1030:	  if (DEBUG){
        -: 1031:	    printf("No cards to reveal\n");
        -: 1032:	  }
        -: 1033:	}
    #####: 1034:      }
        -: 1035:	    
        -: 1036:      else{
    #####: 1037:	if (state->deckCount[nextPlayer] == 0){
    #####: 1038:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1039:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1040:	    state->deckCount[nextPlayer]++;
    #####: 1041:	    state->discard[nextPlayer][i] = -1;
    #####: 1042:	    state->discardCount[nextPlayer]--;
    #####: 1043:	  }
        -: 1044:			    
    #####: 1045:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1046:	} 
    #####: 1047:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1048:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1049:	state->deckCount[nextPlayer]--;
    #####: 1050:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1051:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1052:	state->deckCount[nextPlayer]--;
        -: 1053:      }    
        -: 1054:		       
    #####: 1055:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1056:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1057:	state->playedCardCount++;
    #####: 1058:	tributeRevealedCards[1] = -1;
    #####: 1059:      }
        -: 1060:
    #####: 1061:      for (i = 0; i <= 2; i ++){
    #####: 1062:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1063:	  state->coins += 2;
    #####: 1064:	}
        -: 1065:		    
    #####: 1066:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1067:	  drawCard(currentPlayer, state);
    #####: 1068:	  drawCard(currentPlayer, state);
    #####: 1069:	}
        -: 1070:	else{//Action Card
    #####: 1071:	  state->numActions = state->numActions + 2;
        -: 1072:	}
    #####: 1073:      }
        -: 1074:	    
    #####: 1075:      return 0;
        -: 1076:		
        -: 1077:    case ambassador:
    #####: 1078:      j = 0;		//used to check if player has enough cards to discard
        -: 1079:
    #####: 1080:      if (choice2 > 2 || choice2 < 0)
        -: 1081:	{
    #####: 1082:	  return -1;				
        -: 1083:	}
        -: 1084:
    #####: 1085:      if (choice1 == handPos)
        -: 1086:	{
    #####: 1087:	  return -1;
        -: 1088:	}
        -: 1089:
    #####: 1090:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1091:	{
    #####: 1092:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1093:	    {
    #####: 1094:	      j++;
    #####: 1095:	    }
    #####: 1096:	}
    #####: 1097:      if (j < choice2)
        -: 1098:	{
    #####: 1099:	  return -1;				
        -: 1100:	}
        -: 1101:
        -: 1102:      if (DEBUG) 
        -: 1103:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1104:
        -: 1105:      //increase supply count for choosen card by amount being discarded
    #####: 1106:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1107:			
        -: 1108:      //each other player gains a copy of revealed card
    #####: 1109:      for (i = 0; i < state->numPlayers; i++)
        -: 1110:	{
    #####: 1111:	  if (i != currentPlayer)
        -: 1112:	    {
    #####: 1113:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1114:	    }
    #####: 1115:	}
        -: 1116:
        -: 1117:      //discard played card from hand
    #####: 1118:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1119:
        -: 1120:      //trash copies of cards returned to supply
    #####: 1121:      for (j = 0; j < choice2; j++)
        -: 1122:	{
    #####: 1123:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1124:	    {
    #####: 1125:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1126:		{
    #####: 1127:		  discardCard(i, currentPlayer, state, 1);
    #####: 1128:		  break;
        -: 1129:		}
    #####: 1130:	    }
    #####: 1131:	}			
        -: 1132:
    #####: 1133:      return 0;
        -: 1134:		
        -: 1135:    case cutpurse:
        -: 1136:
    #####: 1137:      updateCoins(currentPlayer, state, 2);
    #####: 1138:      for (i = 0; i < state->numPlayers; i++)
        -: 1139:	{
    #####: 1140:	  if (i != currentPlayer)
        -: 1141:	    {
    #####: 1142:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1143:		{
    #####: 1144:		  if (state->hand[i][j] == copper)
        -: 1145:		    {
    #####: 1146:		      discardCard(j, i, state, 0);
    #####: 1147:		      break;
        -: 1148:		    }
    #####: 1149:		  if (j == state->handCount[i])
        -: 1150:		    {
    #####: 1151:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1152:			{
        -: 1153:			  if (DEBUG)
        -: 1154:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1155:			}	
    #####: 1156:		      break;
        -: 1157:		    }		
    #####: 1158:		}
        -: 1159:					
    #####: 1160:	    }
        -: 1161:				
    #####: 1162:	}				
        -: 1163:
        -: 1164:      //discard played card from hand
    #####: 1165:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1166:
    #####: 1167:      return 0;
        -: 1168:
        -: 1169:		
        -: 1170:    case embargo: 
        -: 1171:      //+2 Coins
    #####: 1172:      state->coins = state->coins + 2;
        -: 1173:			
        -: 1174:      //see if selected pile is in play
    #####: 1175:      if ( state->supplyCount[choice1] == -1 )
        -: 1176:	{
    #####: 1177:	  return -1;
        -: 1178:	}
        -: 1179:			
        -: 1180:      //add embargo token to selected supply pile
    #####: 1181:      state->embargoTokens[choice1]++;
        -: 1182:			
        -: 1183:      //trash card
    #####: 1184:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1185:      return 0;
        -: 1186:		
        -: 1187:    case outpost:
        -: 1188:      //set outpost flag
    #####: 1189:      state->outpostPlayed++;
        -: 1190:			
        -: 1191:      //discard card
    #####: 1192:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1193:      return 0;
        -: 1194:		
        -: 1195:    case salvager:
        -: 1196:      //+1 buy
    #####: 1197:      state->numBuys++;
        -: 1198:			
    #####: 1199:      if (choice1)
        -: 1200:	{
        -: 1201:	  //gain coins equal to trashed card
    #####: 1202:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1203:	  //trash card
    #####: 1204:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1205:	}
        -: 1206:			
        -: 1207:      //discard card
    #####: 1208:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1209:      return 0;
        -: 1210:		
        -: 1211:    case sea_hag:
    #####: 1212:      for (i = 0; i < state->numPlayers; i++){
    #####: 1213:	if (i != currentPlayer){
    #####: 1214:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1215:	  state->discardCount[i]++;
    #####: 1216:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1217:	}
    #####: 1218:      }
    #####: 1219:      return 0;
        -: 1220:		
        -: 1221:    case treasure_map:
        -: 1222:      //search hand for another treasure_map
    #####: 1223:      index = -1;
    #####: 1224:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1225:	{
    #####: 1226:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1227:	    {
    #####: 1228:	      index = i;
    #####: 1229:	      break;
        -: 1230:	    }
    #####: 1231:	}
    #####: 1232:      if (index > -1)
        -: 1233:	{
        -: 1234:	  //trash both treasure cards
    #####: 1235:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1236:	  discardCard(index, currentPlayer, state, 1);
        -: 1237:
        -: 1238:	  //gain 4 Gold cards
    #####: 1239:	  for (i = 0; i < 4; i++)
        -: 1240:	    {
    #####: 1241:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1242:	    }
        -: 1243:				
        -: 1244:	  //return success
    #####: 1245:	  return 1;
        -: 1246:	}
        -: 1247:			
        -: 1248:      //no second treasure_map found in hand
    #####: 1249:      return -1;
        -: 1250:    }
        -: 1251:	
    #####: 1252:  return -1;
       42: 1253:}
        -: 1254:
        -: 1255:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1256:{
        -: 1257:	
        -: 1258:  //if card is not trashed, added to Played pile 
      593: 1259:  if (trashFlag < 1)
        -: 1260:    {
        -: 1261:      //add card to played pile
      323: 1262:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      323: 1263:      state->playedCardCount++;
      323: 1264:    }
        -: 1265:	
        -: 1266:  //set played card to -1
      593: 1267:  state->hand[currentPlayer][handPos] = -1;
        -: 1268:	
        -: 1269:  //remove card from player's hand
      593: 1270:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1271:    {
        -: 1272:      //reduce number of cards in hand
       88: 1273:      state->handCount[currentPlayer]--;
       88: 1274:    }
      505: 1275:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1276:    {
        -: 1277:      //reduce number of cards in hand
       48: 1278:      state->handCount[currentPlayer]--;
       48: 1279:    }
        -: 1280:  else 	
        -: 1281:    {
        -: 1282:      //replace discarded card with last card in hand
      457: 1283:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1284:      //set last card to -1
      457: 1285:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1286:      //reduce number of cards in hand
      457: 1287:      state->handCount[currentPlayer]--;
        -: 1288:    }
        -: 1289:	
      593: 1290:  return 0;
        -: 1291:}
        -: 1292:
        -: 1293:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1294:{
        -: 1295:  //Note: supplyPos is enum of choosen card
        -: 1296:	
        -: 1297:  //check if supply pile is empty (0) or card is not used in game (-1)
     4224: 1298:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1299:    {
      578: 1300:      return -1;
        -: 1301:    }
        -: 1302:	
        -: 1303:  //added card for [whoseTurn] current player:
        -: 1304:  // toFlag = 0 : add to discard
        -: 1305:  // toFlag = 1 : add to deck
        -: 1306:  // toFlag = 2 : add to hand
        -: 1307:
     3646: 1308:  if (toFlag == 1)
        -: 1309:    {
     1428: 1310:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
     1428: 1311:      state->deckCount[player]++;
     1428: 1312:    }
     2218: 1313:  else if (toFlag == 2)
        -: 1314:    {
     1190: 1315:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
     1190: 1316:      state->handCount[player]++;
     1190: 1317:    }
        -: 1318:  else
        -: 1319:    {
     1028: 1320:      state->discard[player][ state->discardCount[player] ] = supplyPos;
     1028: 1321:      state->discardCount[player]++;
        -: 1322:    }
        -: 1323:	
        -: 1324:  //decrease number in supply pile
     3646: 1325:  state->supplyCount[supplyPos]--;
        -: 1326:	 
     3646: 1327:  return 0;
     4224: 1328:}
        -: 1329:
        -: 1330:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1331:{
        -: 1332:  int i;
        -: 1333:	
        -: 1334:  //reset coin count
     5801: 1335:  state->coins = 0;
        -: 1336:
        -: 1337:  //add coins for each Treasure card in player's hand
    68356: 1338:  for (i = 0; i < state->handCount[player]; i++)
        -: 1339:    {
    28377: 1340:      if (state->hand[player][i] == copper)
        -: 1341:	{
    22070: 1342:	  state->coins += 1;
    22070: 1343:	}
     6307: 1344:      else if (state->hand[player][i] == silver)
        -: 1345:	{
      433: 1346:	  state->coins += 2;
      433: 1347:	}
     5874: 1348:      else if (state->hand[player][i] == gold)
        -: 1349:	{
      353: 1350:	  state->coins += 3;
      353: 1351:	}	
    28377: 1352:    }	
        -: 1353:
        -: 1354:  //add bonus
     5801: 1355:  state->coins += bonus;
        -: 1356:
     5801: 1357:  return 0;
        -: 1358:}
        -: 1359:
        -: 1360:
        -: 1361://end of dominion.c
        -: 1362:
TESTING scoreTest():
Playing with player 0, handPos 0
HandCount: 8, Expected: 7
test FAILED
DeckCount: 1, Expected: 2
test FAILED
PlayedCardCount: 1, Expected: 1
test passed
Playing with player 0, handPos 1
HandCount: 8, Expected: 7
test FAILED
DeckCount: 1, Expected: 2
test FAILED
PlayedCardCount: 1, Expected: 1
test passed
Playing with player 0, handPos 2
HandCount: 8, Expected: 7
test FAILED
DeckCount: 1, Expected: 2
test FAILED
PlayedCardCount: 1, Expected: 1
test passed
Playing with player 0, handPos 3
HandCount: 8, Expected: 7
test FAILED
DeckCount: 1, Expected: 2
test FAILED
PlayedCardCount: 1, Expected: 1
test passed
Playing with player 0, handPos 4
HandCount: 8, Expected: 7
test FAILED
DeckCount: 1, Expected: 2
test FAILED
PlayedCardCount: 1, Expected: 1
test passed
Playing with player 1, handPos 0
HandCount: 3, Expected: 2
test FAILED
DeckCount: 6, Expected: 7
test FAILED
PlayedCardCount: 1, Expected: 1
test passed
Playing with player 1, handPos 1
HandCount: 3, Expected: 2
test FAILED
DeckCount: 6, Expected: 7
test FAILED
PlayedCardCount: 1, Expected: 1
test passed
Playing with player 1, handPos 2
HandCount: 3, Expected: 2
test FAILED
DeckCount: 6, Expected: 7
test FAILED
PlayedCardCount: 1, Expected: 1
test passed
Playing with player 1, handPos 3
HandCount: 3, Expected: 2
test FAILED
DeckCount: 6, Expected: 7
test FAILED
PlayedCardCount: 1, Expected: 1
test passed
Playing with player 1, handPos 4
HandCount: 3, Expected: 2
test FAILED
DeckCount: 6, Expected: 7
test FAILED
PlayedCardCount: 1, Expected: 1
test passed
Tests failed.
File 'dominion.c'
Lines executed:51.01% of 643
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:47
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
   152223:    9:  if (*(int*)a > *(int*)b)
      336:   10:    return 1;
   151887:   11:  if (*(int*)a < *(int*)b)
    54354:   12:    return -1;
    97533:   13:  return 0;
   152223:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     5397:   44:  SelectStream(1);
     5397:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
    10794:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     5397:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   118734:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
  1187340:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
  1025430:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
   539700:   65:        }
    53970:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     5397:   73:  if (numPlayers == 2)
        -:   74:    {
     5397:   75:      state->supplyCount[curse] = 10;
     5397:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     5397:   87:  if (numPlayers == 2)
        -:   88:    {
     5397:   89:      state->supplyCount[estate] = 8;
     5397:   90:      state->supplyCount[duchy] = 8;
     5397:   91:      state->supplyCount[province] = 8;
     5397:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     5397:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     5397:  102:  state->supplyCount[silver] = 40;
     5397:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   226674:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
  1781010:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
   836535:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
   102545:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    10792:  115:		  if (numPlayers == 2){ 
    10792:  116:		    state->supplyCount[i] = 8; 
    10792:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
    10792:  119:		}
        -:  120:	      else
        -:  121:		{
    43178:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    53970:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   782565:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
   782565:  130:	}
        -:  131:
   107940:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    32382:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
    10794:  140:      state->deckCount[i] = 0;
    86352:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    32382:  143:	  state->deck[i][j] = estate;
    32382:  144:	  state->deckCount[i]++;
    32382:  145:	}
   172704:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    75558:  148:	  state->deck[i][j] = copper;
    75558:  149:	  state->deckCount[i]++;		
    75558:  150:	}
    10794:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    32382:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
    10794:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
    10794:  160:    }
        -:  161:
        -:  162:  //draw player hands
    32382:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    10794:  166:      state->handCount[i] = 0;
    10794:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
    10794:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
   302232:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
   145719:  178:      state->embargoTokens[i] = 0;
   145719:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     5397:  182:  state->outpostPlayed = 0;
     5397:  183:  state->phase = 0;
     5397:  184:  state->numActions = 1;
     5397:  185:  state->numBuys = 1;
     5397:  186:  state->playedCardCount = 0;
     5397:  187:  state->whoseTurn = 0;
     5397:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    64764:  192:  for (it = 0; it < 5; it++){
    26985:  193:    drawCard(state->whoseTurn, state);
    26985:  194:  }
        -:  195:
     5397:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     5397:  198:  return 0;
     5397:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    21385:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    21385:  209:  if (state->deckCount[player] < 1)
    10556:  210:    return -1;
    10829:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   238498:  214:  while (state->deckCount[player] > 0) {
   108420:  215:    card = floor(Random() * state->deckCount[player]);
   108420:  216:    newDeck[newDeckPos] = state->deck[player][card];
   108420:  217:    newDeckPos++;
   759944:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   271552:  219:      state->deck[player][i] = state->deck[player][i+1];
   271552:  220:    }
   108420:  221:    state->deckCount[player]--;
        -:  222:  }
   238498:  223:  for (i = 0; i < newDeckPos; i++) {
   108420:  224:    state->deck[player][i] = newDeck[i];
   108420:  225:    state->deckCount[player]++;
   108420:  226:  }
        -:  227:
    10829:  228:  return 0;
    21385:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
       61:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       61:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
       61:  243:  if ( state->numActions < 1 )
        -:  244:    {
       36:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
       25:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
       32:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
       18:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
        7:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        7:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        7:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
        7:  269:  return 0;
       61:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
       73:  280:  who = state->whoseTurn;
        -:  281:
       73:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
       73:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
       73:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
       73:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
       73:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
       73:  299:    state->coins = (state->coins) - (getCost(supplyPos));
       73:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
       73:  308:  return 0;
       73:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
      536:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
     1128:  316:  int currentPlayer = whoseTurn(state);
     1128:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
     8111:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
      940:  326:  int count = 0;
        -:  327:
    14060:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
     7050:  330:      if (state->deck[player][i] == card) count++;
     6090:  331:    }
        -:  332:
    32872:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    18144:  335:      if (state->hand[player][i] == card) count++;
    15496:  336:    }
        -:  337:
    25400:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    13720:  340:      if (state->discard[player][i] == card) count++;
    11760:  341:    }
        -:  342:
      940:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
     1860:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
       77:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
      988:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
      417:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      417:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
      417:  359:  }
       77:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
       77:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
       39:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
       39:  365:  }
        -:  366:  else{
       38:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
       77:  370:  state->outpostPlayed = 0;
       77:  371:  state->phase = 0;
       77:  372:  state->numActions = 1;
       77:  373:  state->coins = 0;
       77:  374:  state->numBuys = 1;
       77:  375:  state->playedCardCount = 0;
       77:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
      924:  380:  for (k = 0; k < 5; k++){
      385:  381:    drawCard(state->whoseTurn, state);//Draw a card
      385:  382:  }
        -:  383:
        -:  384:  //Update money
       77:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
       77:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
      567:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
      202:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
      365:  401:  j = 0;
    18980:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
     9125:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
      576:  406:	  j++;
      576:  407:	}
     9125:  408:    }
      365:  409:  if ( j >= 3)
        -:  410:    {
       96:  411:      return 1;
        -:  412:    }
        -:  413:
      269:  414:  return 0;
      567:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
      184:  420:  int score = 0;
        -:  421:  //score from hand
     4708:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
     2546:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
     2515:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
     2518:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
     2523:  427:      if (state->hand[player][i] == province) { score = score + 6; };
     2526:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
     2530:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     2170:  430:    }
        -:  431:
        -:  432:  //score from discard
     2804:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
     1418:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
     1420:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
     1418:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
     1422:  438:      if (state->discard[player][i] == province) { score = score + 6; };
     1418:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
     1418:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     1218:  441:    }
        -:  442:
        -:  443:  //score from deck
     2804:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
     1418:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
     1421:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
     1418:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
     1420:  449:      if (state->deck[player][i] == province) { score = score + 6; };
     1418:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
     1418:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     1218:  452:    }
        -:  453:
      184:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    33527:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    12086:  533:    for (i = 0; i < state->discardCount[player];i++){
      480:  534:      state->deck[player][i] = state->discard[player][i];
      480:  535:      state->discard[player][i] = -1;
      480:  536:    }
        -:  537:
     5563:  538:    state->deckCount[player] = state->discardCount[player];
     5563:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     5563:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     5563:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     5563:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     5563:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     5563:  559:    if (deckCounter == 0)
     5528:  560:      return -1;
        -:  561:
       35:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       35:  563:    state->deckCount[player]--;
       35:  564:    state->handCount[player]++;//Increment hand count
       35:  565:  }
        -:  566:
        -:  567:  else{
    27964:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    27964:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    27964:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    27964:  576:    state->deckCount[player]--;
    27964:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    27999:  580:  return 0;
    33527:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
      146:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
       32:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
       70:  598:      return 3;
        -:  599:    case gold:
       28:  600:      return 6;
        -:  601:    case adventurer:
        8:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
        8:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
      146:  644:}
        -:  645:
        -:  646://smithy function to introduce a bug
        -:  647:int smithyfun(int currentPlayer, struct gameState *state, int handPos){
        -:  648:  //+3 Cards
        -:  649:  int i;
      528:  650:  for (i = 0; i <= 3; i++)
        -:  651:  {
      211:  652:    drawCard(currentPlayer, state);
      211:  653:  }
        -:  654:      
        -:  655:      //discard card from hand
       53:  656:      discardCard(handPos, currentPlayer, state, 0);
       53:  657:      return 0;
        -:  658:}
        -:  659:
        -:  660://adventurer function to introduce a bug
        -:  661:int adventurerfun(int currentPlayer, struct gameState *state){
        -:  662:    int cardDrawn;
        -:  663:    int temphand[MAX_HAND];
2291246309455167530:  664:    int drawntreasure = 0;
2291246309455167530:  665:    int z = 0;
        -:  666:
10104103169071346622:  667:  while(drawntreasure <= 2){
72057701412115419:  668:      if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
17981539514:  669:          shuffle(currentPlayer, state);
17981539514:  670:      }
7018965447127852258:  671:  drawCard(currentPlayer, state);
7018965447127852258:  672:  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
14469171020717092264:  673:  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    28331:  674:  drawntreasure++;
        -:  675:  else{
     4993:  676:  temphand[z]=cardDrawn;
     4993:  677:  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     4993:  678:  z++;
        -:  679:  }
        -:  680:}
        -:  681:    
    10114:  682:    while(z-1>=0){
     4993:  683:  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     4993:  684:      z=z-1;
        -:  685:    }
       64:  686:    return 0;
        -:  687:}
        -:  688:
        -:  689:int villagefun(int handPos, int currentPlayer, struct gameState *state){
        -:  690:        //+1 Card
        3:  691:        drawCard(currentPlayer, state);
        -:  692:        
        -:  693:        //+2 Actions
        3:  694:        state->numActions = state->numActions + 2;
        -:  695:        
        -:  696:        //discard played card from hand
        -:  697:        //discardCard(handPos, currentPlayer, state, 0);
        3:  698:        return 0;
        -:  699:}
        -:  700:
        -:  701:int great_hallfun(int currentPlayer, struct gameState *state, int handPos){
        -:  702:        //+1 Card
    #####:  703:        drawCard(currentPlayer, state);
        -:  704:        
        -:  705:        //+1 Actions
    #####:  706:        state->numActions++;
        -:  707:        
        -:  708:        //discard card from hand
    #####:  709:        discardCard(handPos, currentPlayer, state, 0);
    #####:  710:        return 0;
        -:  711:}
        -:  712:
        -:  713:int stewardfun(int choice1, int choice2, int choice3, int handPos, int currentPlayer, struct gameState *state){
        -:  714:
       90:  715:  if (choice1 == 1)
        -:  716:	{
        -:  717:	  //+2 cards
       30:  718:	  drawCard(currentPlayer, state);
       30:  719:	  drawCard(currentPlayer, state);
       30:  720:	}
       60:  721:      else if (choice2 == 2)
        -:  722:	{
        -:  723:	  //+2 coins
    #####:  724:	  state->coins = state->coins + 2;
    #####:  725:	}
        -:  726:      else
        -:  727:	{
        -:  728:	  //trash 2 cards in hand
       60:  729:	  discardCard(choice2, currentPlayer, state, 1);
       60:  730:	  discardCard(choice3, currentPlayer, state, 1);
        -:  731:	}
        -:  732:			
        -:  733:      //discard card from hand
       90:  734:      discardCard(handPos, currentPlayer, state, 0);
       90:  735:      return 0;
        -:  736:}
        -:  737:
        -:  738:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  739:{
        -:  740:  int i;
        -:  741:  int j;
        -:  742:  int k;
        -:  743:  int x;
        -:  744:  int index;
       42:  745:  int currentPlayer = whoseTurn(state);
       42:  746:  int nextPlayer = currentPlayer + 1;
        -:  747:
       42:  748:  int tributeRevealedCards[2] = {-1, -1};
        -:  749:  int temphand[MAX_HAND];// moved above the if statement
       42:  750:  if (nextPlayer > (state->numPlayers - 1)){
        4:  751:    nextPlayer = 0;
        4:  752:  }
        -:  753:  
        -:  754:	
        -:  755:  //uses switch to select card and perform actions
       52:  756:  switch( card ) 
        -:  757:    {
        -:  758:    case adventurer:
        4:  759:      adventurerfun(currentPlayer, state);
        -:  760:			
        -:  761:    case council_room:
        -:  762:      //+4 Cards
      390:  763:      for (i = 0; i < 4; i++)
        -:  764:	{
      156:  765:	  drawCard(currentPlayer, state);
      156:  766:	}
        -:  767:			
        -:  768:      //+1 Buy
       39:  769:      state->numBuys++;
        -:  770:			
        -:  771:      //Each other player draws a card
      234:  772:      for (i = 0; i < state->numPlayers; i++)
        -:  773:	{
       78:  774:	  if ( i != currentPlayer )
        -:  775:	    {
       39:  776:	      drawCard(i, state);
       39:  777:	    }
       78:  778:	}
        -:  779:			
        -:  780:      //put played card in played card pile
       39:  781:      discardCard(handPos, currentPlayer, state, 0);
        -:  782:			
       39:  783:      return 0;
        -:  784:			
        -:  785:    case feast:
        -:  786:      //gain card with cost up to 5
        -:  787:      //Backup hand
    #####:  788:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  789:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  790:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  791:      }
        -:  792:      //Backup hand
        -:  793:
        -:  794:      //Update Coins for Buy
    #####:  795:      updateCoins(currentPlayer, state, 5);
    #####:  796:      x = 1;//Condition to loop on
    #####:  797:      while( x == 1) {//Buy one card
    #####:  798:	if (supplyCount(choice1, state) <= 0){
        -:  799:	  if (DEBUG)
        -:  800:	    printf("None of that card left, sorry!\n");
        -:  801:
        -:  802:	  if (DEBUG){
        -:  803:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  804:	  }
    #####:  805:	}
    #####:  806:	else if (state->coins < getCost(choice1)){
    #####:  807:	  printf("That card is too expensive!\n");
        -:  808:
        -:  809:	  if (DEBUG){
        -:  810:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  811:	  }
    #####:  812:	}
        -:  813:	else{
        -:  814:
        -:  815:	  if (DEBUG){
        -:  816:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  817:	  }
        -:  818:
    #####:  819:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  820:	  x = 0;//No more buying cards
        -:  821:
        -:  822:	  if (DEBUG){
        -:  823:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  824:	  }
        -:  825:
        -:  826:	}
        -:  827:      }     
        -:  828:
        -:  829:      //Reset Hand
    #####:  830:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  831:	state->hand[currentPlayer][i] = temphand[i];
    #####:  832:	temphand[i] = -1;
    #####:  833:      }
        -:  834:      //Reset Hand
        -:  835:      			
    #####:  836:      return 0;
        -:  837:			
        -:  838:    case gardens:
    #####:  839:      return -1;
        -:  840:			
        -:  841:    case mine:
    #####:  842:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  843:
    #####:  844:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  845:	{
    #####:  846:	  return -1;
        -:  847:	}
        -:  848:		
    #####:  849:      if (choice2 > treasure_map || choice2 < curse)
        -:  850:	{
    #####:  851:	  return -1;
        -:  852:	}
        -:  853:
    #####:  854:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  855:	{
    #####:  856:	  return -1;
        -:  857:	}
        -:  858:
    #####:  859:      gainCard(choice2, state, 2, currentPlayer);
        -:  860:
        -:  861:      //discard card from hand
    #####:  862:      discardCard(handPos, currentPlayer, state, 0);
        -:  863:
        -:  864:      //discard trashed card
    #####:  865:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  866:	{
    #####:  867:	  if (state->hand[currentPlayer][i] == j)
        -:  868:	    {
    #####:  869:	      discardCard(i, currentPlayer, state, 0);			
    #####:  870:	      break;
        -:  871:	    }
    #####:  872:	}
        -:  873:			
    #####:  874:      return 0;
        -:  875:			
        -:  876:    case remodel:
    #####:  877:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  878:
    #####:  879:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  880:	{
    #####:  881:	  return -1;
        -:  882:	}
        -:  883:
    #####:  884:      gainCard(choice2, state, 0, currentPlayer);
        -:  885:
        -:  886:      //discard card from hand
    #####:  887:      discardCard(handPos, currentPlayer, state, 0);
        -:  888:
        -:  889:      //discard trashed card
    #####:  890:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  891:	{
    #####:  892:	  if (state->hand[currentPlayer][i] == j)
        -:  893:	    {
    #####:  894:	      discardCard(i, currentPlayer, state, 0);			
    #####:  895:	      break;
        -:  896:	    }
    #####:  897:	}
        -:  898:
        -:  899:
    #####:  900:      return 0;
        -:  901:		
        -:  902:    case smithy:
        -:  903:      //+3 Cards
        3:  904:      smithyfun(currentPlayer, state, handPos);
        -:  905:
        -:  906:    case village:
        3:  907:      villagefun(handPos, currentPlayer, state);
        -:  908:		
        -:  909:    case baron:
        3:  910:      state->numBuys++;//Increase buys by 1!
        3:  911:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  912:	int p = 0;//Iterator for hand!
    #####:  913:	int card_not_discarded = 1;//Flag for discard set!
    #####:  914:	while(card_not_discarded){
    #####:  915:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  916:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  917:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  918:	    state->discardCount[currentPlayer]++;
    #####:  919:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  920:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  921:	    }
    #####:  922:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  923:	    state->handCount[currentPlayer]--;
    #####:  924:	    card_not_discarded = 0;//Exit the loop
    #####:  925:	  }
    #####:  926:	  else if (p > state->handCount[currentPlayer]){
        -:  927:	    if(DEBUG) {
        -:  928:	      printf("No estate cards in your hand, invalid choice\n");
        -:  929:	      printf("Must gain an estate if there are any\n");
        -:  930:	    }
    #####:  931:	    if (supplyCount(estate, state) > 0){
    #####:  932:	      gainCard(estate, state, 0, currentPlayer);
    #####:  933:	      state->supplyCount[estate]--;//Decrement estates
    #####:  934:	      if (supplyCount(estate, state) == 0){
    #####:  935:		isGameOver(state);
    #####:  936:	      }
    #####:  937:	    }
    #####:  938:	    card_not_discarded = 0;//Exit the loop
    #####:  939:	  }
        -:  940:			    
        -:  941:	  else{
    #####:  942:	    p++;//Next card
        -:  943:	  }
        -:  944:	}
    #####:  945:      }
        -:  946:			    
        -:  947:      else{
        3:  948:	if (supplyCount(estate, state) > 0){
        3:  949:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
        3:  950:	  state->supplyCount[estate]--;//Decrement Estates
        3:  951:	  if (supplyCount(estate, state) == 0){
    #####:  952:	    isGameOver(state);
    #####:  953:	  }
        3:  954:	}
        -:  955:      }
        -:  956:	    
        -:  957:      
        3:  958:      return 0;
        -:  959:		
        -:  960:    case great_hall:
    #####:  961:      great_hallfun(currentPlayer, state, handPos);
        -:  962:		
        -:  963:    case minion:
        -:  964:      //+1 action
    #####:  965:      state->numActions++;
        -:  966:			
        -:  967:      //discard card from hand
    #####:  968:      discardCard(handPos, currentPlayer, state, 0);
        -:  969:			
    #####:  970:      if (choice1)		//+2 coins
        -:  971:	{
    #####:  972:	  state->coins = state->coins + 2;
    #####:  973:	}
        -:  974:			
    #####:  975:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  976:	{
        -:  977:	  //discard hand
    #####:  978:	  while(numHandCards(state) > 0)
        -:  979:	    {
    #####:  980:	      discardCard(handPos, currentPlayer, state, 0);
        -:  981:	    }
        -:  982:				
        -:  983:	  //draw 4
    #####:  984:	  for (i = 0; i < 4; i++)
        -:  985:	    {
    #####:  986:	      drawCard(currentPlayer, state);
    #####:  987:	    }
        -:  988:				
        -:  989:	  //other players discard hand and redraw if hand size > 4
    #####:  990:	  for (i = 0; i < state->numPlayers; i++)
        -:  991:	    {
    #####:  992:	      if (i != currentPlayer)
        -:  993:		{
    #####:  994:		  if ( state->handCount[i] > 4 )
        -:  995:		    {
        -:  996:		      //discard hand
    #####:  997:		      while( state->handCount[i] > 0 )
        -:  998:			{
    #####:  999:			  discardCard(handPos, i, state, 0);
        -: 1000:			}
        -: 1001:							
        -: 1002:		      //draw 4
    #####: 1003:		      for (j = 0; j < 4; j++)
        -: 1004:			{
    #####: 1005:			  drawCard(i, state);
    #####: 1006:			}
    #####: 1007:		    }
    #####: 1008:		}
    #####: 1009:	    }
        -: 1010:				
    #####: 1011:	}
    #####: 1012:      return 0;
        -: 1013:		
        -: 1014:    case steward:
    #####: 1015:      stewardfun(choice1, choice2, choice3, handPos, currentPlayer, state);
        -: 1016:
        -: 1017:		
        -: 1018:    case tribute:
    #####: 1019:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1020:	if (state->deckCount[nextPlayer] > 0){
    #####: 1021:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1022:	  state->deckCount[nextPlayer]--;
    #####: 1023:	}
    #####: 1024:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1025:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1026:	  state->discardCount[nextPlayer]--;
    #####: 1027:	}
        -: 1028:	else{
        -: 1029:	  //No Card to Reveal
        -: 1030:	  if (DEBUG){
        -: 1031:	    printf("No cards to reveal\n");
        -: 1032:	  }
        -: 1033:	}
    #####: 1034:      }
        -: 1035:	    
        -: 1036:      else{
    #####: 1037:	if (state->deckCount[nextPlayer] == 0){
    #####: 1038:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1039:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1040:	    state->deckCount[nextPlayer]++;
    #####: 1041:	    state->discard[nextPlayer][i] = -1;
    #####: 1042:	    state->discardCount[nextPlayer]--;
    #####: 1043:	  }
        -: 1044:			    
    #####: 1045:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1046:	} 
    #####: 1047:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1048:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1049:	state->deckCount[nextPlayer]--;
    #####: 1050:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1051:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1052:	state->deckCount[nextPlayer]--;
        -: 1053:      }    
        -: 1054:		       
    #####: 1055:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1056:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1057:	state->playedCardCount++;
    #####: 1058:	tributeRevealedCards[1] = -1;
    #####: 1059:      }
        -: 1060:
    #####: 1061:      for (i = 0; i <= 2; i ++){
    #####: 1062:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1063:	  state->coins += 2;
    #####: 1064:	}
        -: 1065:		    
    #####: 1066:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1067:	  drawCard(currentPlayer, state);
    #####: 1068:	  drawCard(currentPlayer, state);
    #####: 1069:	}
        -: 1070:	else{//Action Card
    #####: 1071:	  state->numActions = state->numActions + 2;
        -: 1072:	}
    #####: 1073:      }
        -: 1074:	    
    #####: 1075:      return 0;
        -: 1076:		
        -: 1077:    case ambassador:
    #####: 1078:      j = 0;		//used to check if player has enough cards to discard
        -: 1079:
    #####: 1080:      if (choice2 > 2 || choice2 < 0)
        -: 1081:	{
    #####: 1082:	  return -1;				
        -: 1083:	}
        -: 1084:
    #####: 1085:      if (choice1 == handPos)
        -: 1086:	{
    #####: 1087:	  return -1;
        -: 1088:	}
        -: 1089:
    #####: 1090:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1091:	{
    #####: 1092:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1093:	    {
    #####: 1094:	      j++;
    #####: 1095:	    }
    #####: 1096:	}
    #####: 1097:      if (j < choice2)
        -: 1098:	{
    #####: 1099:	  return -1;				
        -: 1100:	}
        -: 1101:
        -: 1102:      if (DEBUG) 
        -: 1103:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1104:
        -: 1105:      //increase supply count for choosen card by amount being discarded
    #####: 1106:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1107:			
        -: 1108:      //each other player gains a copy of revealed card
    #####: 1109:      for (i = 0; i < state->numPlayers; i++)
        -: 1110:	{
    #####: 1111:	  if (i != currentPlayer)
        -: 1112:	    {
    #####: 1113:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1114:	    }
    #####: 1115:	}
        -: 1116:
        -: 1117:      //discard played card from hand
    #####: 1118:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1119:
        -: 1120:      //trash copies of cards returned to supply
    #####: 1121:      for (j = 0; j < choice2; j++)
        -: 1122:	{
    #####: 1123:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1124:	    {
    #####: 1125:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1126:		{
    #####: 1127:		  discardCard(i, currentPlayer, state, 1);
    #####: 1128:		  break;
        -: 1129:		}
    #####: 1130:	    }
    #####: 1131:	}			
        -: 1132:
    #####: 1133:      return 0;
        -: 1134:		
        -: 1135:    case cutpurse:
        -: 1136:
    #####: 1137:      updateCoins(currentPlayer, state, 2);
    #####: 1138:      for (i = 0; i < state->numPlayers; i++)
        -: 1139:	{
    #####: 1140:	  if (i != currentPlayer)
        -: 1141:	    {
    #####: 1142:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1143:		{
    #####: 1144:		  if (state->hand[i][j] == copper)
        -: 1145:		    {
    #####: 1146:		      discardCard(j, i, state, 0);
    #####: 1147:		      break;
        -: 1148:		    }
    #####: 1149:		  if (j == state->handCount[i])
        -: 1150:		    {
    #####: 1151:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1152:			{
        -: 1153:			  if (DEBUG)
        -: 1154:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1155:			}	
    #####: 1156:		      break;
        -: 1157:		    }		
    #####: 1158:		}
        -: 1159:					
    #####: 1160:	    }
        -: 1161:				
    #####: 1162:	}				
        -: 1163:
        -: 1164:      //discard played card from hand
    #####: 1165:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1166:
    #####: 1167:      return 0;
        -: 1168:
        -: 1169:		
        -: 1170:    case embargo: 
        -: 1171:      //+2 Coins
    #####: 1172:      state->coins = state->coins + 2;
        -: 1173:			
        -: 1174:      //see if selected pile is in play
    #####: 1175:      if ( state->supplyCount[choice1] == -1 )
        -: 1176:	{
    #####: 1177:	  return -1;
        -: 1178:	}
        -: 1179:			
        -: 1180:      //add embargo token to selected supply pile
    #####: 1181:      state->embargoTokens[choice1]++;
        -: 1182:			
        -: 1183:      //trash card
    #####: 1184:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1185:      return 0;
        -: 1186:		
        -: 1187:    case outpost:
        -: 1188:      //set outpost flag
    #####: 1189:      state->outpostPlayed++;
        -: 1190:			
        -: 1191:      //discard card
    #####: 1192:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1193:      return 0;
        -: 1194:		
        -: 1195:    case salvager:
        -: 1196:      //+1 buy
    #####: 1197:      state->numBuys++;
        -: 1198:			
    #####: 1199:      if (choice1)
        -: 1200:	{
        -: 1201:	  //gain coins equal to trashed card
    #####: 1202:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1203:	  //trash card
    #####: 1204:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1205:	}
        -: 1206:			
        -: 1207:      //discard card
    #####: 1208:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1209:      return 0;
        -: 1210:		
        -: 1211:    case sea_hag:
    #####: 1212:      for (i = 0; i < state->numPlayers; i++){
    #####: 1213:	if (i != currentPlayer){
    #####: 1214:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1215:	  state->discardCount[i]++;
    #####: 1216:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1217:	}
    #####: 1218:      }
    #####: 1219:      return 0;
        -: 1220:		
        -: 1221:    case treasure_map:
        -: 1222:      //search hand for another treasure_map
    #####: 1223:      index = -1;
    #####: 1224:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1225:	{
    #####: 1226:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1227:	    {
    #####: 1228:	      index = i;
    #####: 1229:	      break;
        -: 1230:	    }
    #####: 1231:	}
    #####: 1232:      if (index > -1)
        -: 1233:	{
        -: 1234:	  //trash both treasure cards
    #####: 1235:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1236:	  discardCard(index, currentPlayer, state, 1);
        -: 1237:
        -: 1238:	  //gain 4 Gold cards
    #####: 1239:	  for (i = 0; i < 4; i++)
        -: 1240:	    {
    #####: 1241:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1242:	    }
        -: 1243:				
        -: 1244:	  //return success
    #####: 1245:	  return 1;
        -: 1246:	}
        -: 1247:			
        -: 1248:      //no second treasure_map found in hand
    #####: 1249:      return -1;
        -: 1250:    }
        -: 1251:	
    #####: 1252:  return -1;
       42: 1253:}
        -: 1254:
        -: 1255:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1256:{
        -: 1257:	
        -: 1258:  //if card is not trashed, added to Played pile 
      603: 1259:  if (trashFlag < 1)
        -: 1260:    {
        -: 1261:      //add card to played pile
      333: 1262:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      333: 1263:      state->playedCardCount++;
      333: 1264:    }
        -: 1265:	
        -: 1266:  //set played card to -1
      603: 1267:  state->hand[currentPlayer][handPos] = -1;
        -: 1268:	
        -: 1269:  //remove card from player's hand
      603: 1270:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1271:    {
        -: 1272:      //reduce number of cards in hand
       89: 1273:      state->handCount[currentPlayer]--;
       89: 1274:    }
      514: 1275:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1276:    {
        -: 1277:      //reduce number of cards in hand
       48: 1278:      state->handCount[currentPlayer]--;
       48: 1279:    }
        -: 1280:  else 	
        -: 1281:    {
        -: 1282:      //replace discarded card with last card in hand
      466: 1283:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1284:      //set last card to -1
      466: 1285:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1286:      //reduce number of cards in hand
      466: 1287:      state->handCount[currentPlayer]--;
        -: 1288:    }
        -: 1289:	
      603: 1290:  return 0;
        -: 1291:}
        -: 1292:
        -: 1293:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1294:{
        -: 1295:  //Note: supplyPos is enum of choosen card
        -: 1296:	
        -: 1297:  //check if supply pile is empty (0) or card is not used in game (-1)
     4224: 1298:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1299:    {
      578: 1300:      return -1;
        -: 1301:    }
        -: 1302:	
        -: 1303:  //added card for [whoseTurn] current player:
        -: 1304:  // toFlag = 0 : add to discard
        -: 1305:  // toFlag = 1 : add to deck
        -: 1306:  // toFlag = 2 : add to hand
        -: 1307:
     3646: 1308:  if (toFlag == 1)
        -: 1309:    {
     1428: 1310:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
     1428: 1311:      state->deckCount[player]++;
     1428: 1312:    }
     2218: 1313:  else if (toFlag == 2)
        -: 1314:    {
     1190: 1315:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
     1190: 1316:      state->handCount[player]++;
     1190: 1317:    }
        -: 1318:  else
        -: 1319:    {
     1028: 1320:      state->discard[player][ state->discardCount[player] ] = supplyPos;
     1028: 1321:      state->discardCount[player]++;
        -: 1322:    }
        -: 1323:	
        -: 1324:  //decrease number in supply pile
     3646: 1325:  state->supplyCount[supplyPos]--;
        -: 1326:	 
     3646: 1327:  return 0;
     4224: 1328:}
        -: 1329:
        -: 1330:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1331:{
        -: 1332:  int i;
        -: 1333:	
        -: 1334:  //reset coin count
     5811: 1335:  state->coins = 0;
        -: 1336:
        -: 1337:  //add coins for each Treasure card in player's hand
    68476: 1338:  for (i = 0; i < state->handCount[player]; i++)
        -: 1339:    {
    28427: 1340:      if (state->hand[player][i] == copper)
        -: 1341:	{
    22110: 1342:	  state->coins += 1;
    22110: 1343:	}
     6317: 1344:      else if (state->hand[player][i] == silver)
        -: 1345:	{
      433: 1346:	  state->coins += 2;
      433: 1347:	}
     5884: 1348:      else if (state->hand[player][i] == gold)
        -: 1349:	{
      353: 1350:	  state->coins += 3;
      353: 1351:	}	
    28427: 1352:    }	
        -: 1353:
        -: 1354:  //add bonus
     5811: 1355:  state->coins += bonus;
        -: 1356:
     5811: 1357:  return 0;
        -: 1358:}
        -: 1359:
        -: 1360:
        -: 1361://end of dominion.c
        -: 1362:
TESTING scoreTest():
Testing with choice1 = 0, choice2 = 1, choice3 = 1, handPos = 0
Handcount: 2, Expected: 2
test passed
Testing with choice1 = 1, choice2 = 2, choice3 = 2, handPos = 0
Handcount: 6, Expected: 6
test passed
Testing with choice1 = 2, choice2 = 3, choice3 = 3, handPos = 0
Coins: 4, Expected: 6
test FAILED
Handcount: 2, Expected: 4
test FAILED
Testing with choice1 = 0, choice2 = 1, choice3 = 1, handPos = 1
Handcount: 2, Expected: 2
test passed
Testing with choice1 = 1, choice2 = 2, choice3 = 2, handPos = 1
Handcount: 6, Expected: 6
test passed
Testing with choice1 = 2, choice2 = 3, choice3 = 3, handPos = 1
Coins: 4, Expected: 6
test FAILED
Handcount: 2, Expected: 4
test FAILED
Testing with choice1 = 0, choice2 = 1, choice3 = 1, handPos = 2
Handcount: 2, Expected: 2
test passed
Testing with choice1 = 1, choice2 = 2, choice3 = 2, handPos = 2
Handcount: 6, Expected: 6
test passed
Testing with choice1 = 2, choice2 = 3, choice3 = 3, handPos = 2
Coins: 4, Expected: 6
test FAILED
Handcount: 2, Expected: 4
test FAILED
Testing with choice1 = 0, choice2 = 1, choice3 = 1, handPos = 3
Handcount: 2, Expected: 2
test passed
Testing with choice1 = 1, choice2 = 2, choice3 = 2, handPos = 3
Handcount: 6, Expected: 6
test passed
Testing with choice1 = 2, choice2 = 3, choice3 = 3, handPos = 3
Coins: 4, Expected: 6
test FAILED
Handcount: 2, Expected: 4
test FAILED
Testing with choice1 = 0, choice2 = 1, choice3 = 1, handPos = 4
Handcount: 2, Expected: 2
test passed
Testing with choice1 = 1, choice2 = 2, choice3 = 2, handPos = 4
Handcount: 6, Expected: 6
test passed
Testing with choice1 = 2, choice2 = 3, choice3 = 3, handPos = 4
Coins: 4, Expected: 6
test FAILED
Handcount: 2, Expected: 4
test FAILED
Testing with choice1 = 0, choice2 = 1, choice3 = 1, handPos = 0
Handcount: -3, Expected: -3
test passed
Testing with choice1 = 1, choice2 = 2, choice3 = 2, handPos = 0
Handcount: 1, Expected: 1
test passed
Testing with choice1 = 2, choice2 = 3, choice3 = 3, handPos = 0
Coins: 4, Expected: 6
test FAILED
Handcount: -3, Expected: -1
test FAILED
Testing with choice1 = 0, choice2 = 1, choice3 = 1, handPos = 1
Handcount: -3, Expected: -3
test passed
Testing with choice1 = 1, choice2 = 2, choice3 = 2, handPos = 1
Handcount: 1, Expected: 1
test passed
Testing with choice1 = 2, choice2 = 3, choice3 = 3, handPos = 1
Coins: 4, Expected: 6
test FAILED
Handcount: -3, Expected: -1
test FAILED
Testing with choice1 = 0, choice2 = 1, choice3 = 1, handPos = 2
Handcount: -3, Expected: -3
test passed
Testing with choice1 = 1, choice2 = 2, choice3 = 2, handPos = 2
Handcount: 1, Expected: 1
test passed
Testing with choice1 = 2, choice2 = 3, choice3 = 3, handPos = 2
Coins: 4, Expected: 6
test FAILED
Handcount: -3, Expected: -1
test FAILED
Testing with choice1 = 0, choice2 = 1, choice3 = 1, handPos = 3
Handcount: -3, Expected: -3
test passed
Testing with choice1 = 1, choice2 = 2, choice3 = 2, handPos = 3
Handcount: 1, Expected: 1
test passed
Testing with choice1 = 2, choice2 = 3, choice3 = 3, handPos = 3
Coins: 4, Expected: 6
test FAILED
Handcount: -3, Expected: -1
test FAILED
Testing with choice1 = 0, choice2 = 1, choice3 = 1, handPos = 4
Handcount: -3, Expected: -3
test passed
Testing with choice1 = 1, choice2 = 2, choice3 = 2, handPos = 4
Handcount: 1, Expected: 1
test passed
Testing with choice1 = 2, choice2 = 3, choice3 = 3, handPos = 4
Coins: 4, Expected: 6
test FAILED
Handcount: -3, Expected: -1
test FAILED
Tests failed.
File 'dominion.c'
Lines executed:51.01% of 643
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:48
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
   153063:    9:  if (*(int*)a > *(int*)b)
      336:   10:    return 1;
   152727:   11:  if (*(int*)a < *(int*)b)
    54654:   12:    return -1;
    98073:   13:  return 0;
   153063:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     5427:   44:  SelectStream(1);
     5427:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
    10854:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     5427:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   119394:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
  1193940:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
  1031130:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
   542700:   65:        }
    54270:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     5427:   73:  if (numPlayers == 2)
        -:   74:    {
     5427:   75:      state->supplyCount[curse] = 10;
     5427:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     5427:   87:  if (numPlayers == 2)
        -:   88:    {
     5427:   89:      state->supplyCount[estate] = 8;
     5427:   90:      state->supplyCount[duchy] = 8;
     5427:   91:      state->supplyCount[province] = 8;
     5427:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     5427:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     5427:  102:  state->supplyCount[silver] = 40;
     5427:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   227934:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
  1790910:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
   841185:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
   103115:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    10852:  115:		  if (numPlayers == 2){ 
    10852:  116:		    state->supplyCount[i] = 8; 
    10852:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
    10852:  119:		}
        -:  120:	      else
        -:  121:		{
    43418:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    54270:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   786915:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
   786915:  130:	}
        -:  131:
   108540:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    32562:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
    10854:  140:      state->deckCount[i] = 0;
    86832:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    32562:  143:	  state->deck[i][j] = estate;
    32562:  144:	  state->deckCount[i]++;
    32562:  145:	}
   173664:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    75978:  148:	  state->deck[i][j] = copper;
    75978:  149:	  state->deckCount[i]++;		
    75978:  150:	}
    10854:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    32562:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
    10854:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
    10854:  160:    }
        -:  161:
        -:  162:  //draw player hands
    32562:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    10854:  166:      state->handCount[i] = 0;
    10854:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
    10854:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
   303912:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
   146529:  178:      state->embargoTokens[i] = 0;
   146529:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     5427:  182:  state->outpostPlayed = 0;
     5427:  183:  state->phase = 0;
     5427:  184:  state->numActions = 1;
     5427:  185:  state->numBuys = 1;
     5427:  186:  state->playedCardCount = 0;
     5427:  187:  state->whoseTurn = 0;
     5427:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    65124:  192:  for (it = 0; it < 5; it++){
    27135:  193:    drawCard(state->whoseTurn, state);
    27135:  194:  }
        -:  195:
     5427:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     5427:  198:  return 0;
     5427:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    21445:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    21445:  209:  if (state->deckCount[player] < 1)
    10556:  210:    return -1;
    10889:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   239818:  214:  while (state->deckCount[player] > 0) {
   109020:  215:    card = floor(Random() * state->deckCount[player]);
   109020:  216:    newDeck[newDeckPos] = state->deck[player][card];
   109020:  217:    newDeckPos++;
   764144:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   273052:  219:      state->deck[player][i] = state->deck[player][i+1];
   273052:  220:    }
   109020:  221:    state->deckCount[player]--;
        -:  222:  }
   239818:  223:  for (i = 0; i < newDeckPos; i++) {
   109020:  224:    state->deck[player][i] = newDeck[i];
   109020:  225:    state->deckCount[player]++;
   109020:  226:  }
        -:  227:
    10889:  228:  return 0;
    21445:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
       61:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       61:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
       61:  243:  if ( state->numActions < 1 )
        -:  244:    {
       36:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
       25:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
       32:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
       18:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
        7:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        7:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        7:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
        7:  269:  return 0;
       61:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
       73:  280:  who = state->whoseTurn;
        -:  281:
       73:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
       73:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
       73:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
       73:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
       73:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
       73:  299:    state->coins = (state->coins) - (getCost(supplyPos));
       73:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
       73:  308:  return 0;
       73:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
      536:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
     1128:  316:  int currentPlayer = whoseTurn(state);
     1128:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
     8111:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
      940:  326:  int count = 0;
        -:  327:
    14060:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
     7050:  330:      if (state->deck[player][i] == card) count++;
     6090:  331:    }
        -:  332:
    32872:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    18144:  335:      if (state->hand[player][i] == card) count++;
    15496:  336:    }
        -:  337:
    25400:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    13720:  340:      if (state->discard[player][i] == card) count++;
    11760:  341:    }
        -:  342:
      940:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
     1860:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
       77:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
      988:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
      417:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      417:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
      417:  359:  }
       77:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
       77:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
       39:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
       39:  365:  }
        -:  366:  else{
       38:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
       77:  370:  state->outpostPlayed = 0;
       77:  371:  state->phase = 0;
       77:  372:  state->numActions = 1;
       77:  373:  state->coins = 0;
       77:  374:  state->numBuys = 1;
       77:  375:  state->playedCardCount = 0;
       77:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
      924:  380:  for (k = 0; k < 5; k++){
      385:  381:    drawCard(state->whoseTurn, state);//Draw a card
      385:  382:  }
        -:  383:
        -:  384:  //Update money
       77:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
       77:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
      567:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
      202:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
      365:  401:  j = 0;
    18980:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
     9125:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
      576:  406:	  j++;
      576:  407:	}
     9125:  408:    }
      365:  409:  if ( j >= 3)
        -:  410:    {
       96:  411:      return 1;
        -:  412:    }
        -:  413:
      269:  414:  return 0;
      567:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
      184:  420:  int score = 0;
        -:  421:  //score from hand
     4708:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
     2546:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
     2515:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
     2518:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
     2523:  427:      if (state->hand[player][i] == province) { score = score + 6; };
     2526:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
     2530:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     2170:  430:    }
        -:  431:
        -:  432:  //score from discard
     2804:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
     1418:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
     1420:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
     1418:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
     1422:  438:      if (state->discard[player][i] == province) { score = score + 6; };
     1418:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
     1418:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     1218:  441:    }
        -:  442:
        -:  443:  //score from deck
     2804:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
     1418:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
     1421:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
     1418:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
     1420:  449:      if (state->deck[player][i] == province) { score = score + 6; };
     1418:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
     1418:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     1218:  452:    }
        -:  453:
      184:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    33697:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    12086:  533:    for (i = 0; i < state->discardCount[player];i++){
      480:  534:      state->deck[player][i] = state->discard[player][i];
      480:  535:      state->discard[player][i] = -1;
      480:  536:    }
        -:  537:
     5563:  538:    state->deckCount[player] = state->discardCount[player];
     5563:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     5563:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     5563:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     5563:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     5563:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     5563:  559:    if (deckCounter == 0)
     5528:  560:      return -1;
        -:  561:
       35:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       35:  563:    state->deckCount[player]--;
       35:  564:    state->handCount[player]++;//Increment hand count
       35:  565:  }
        -:  566:
        -:  567:  else{
    28134:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    28134:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    28134:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    28134:  576:    state->deckCount[player]--;
    28134:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    28169:  580:  return 0;
    33697:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
      146:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
       32:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
       70:  598:      return 3;
        -:  599:    case gold:
       28:  600:      return 6;
        -:  601:    case adventurer:
        8:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
        8:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
      146:  644:}
        -:  645:
        -:  646://smithy function to introduce a bug
        -:  647:int smithyfun(int currentPlayer, struct gameState *state, int handPos){
        -:  648:  //+3 Cards
        -:  649:  int i;
      528:  650:  for (i = 0; i <= 3; i++)
        -:  651:  {
      211:  652:    drawCard(currentPlayer, state);
      211:  653:  }
        -:  654:      
        -:  655:      //discard card from hand
       53:  656:      discardCard(handPos, currentPlayer, state, 0);
       53:  657:      return 0;
        -:  658:}
        -:  659:
        -:  660://adventurer function to introduce a bug
        -:  661:int adventurerfun(int currentPlayer, struct gameState *state){
        -:  662:    int cardDrawn;
        -:  663:    int temphand[MAX_HAND];
2291246309455167530:  664:    int drawntreasure = 0;
2291246309455167530:  665:    int z = 0;
        -:  666:
10104103169071346622:  667:  while(drawntreasure <= 2){
72057701412115419:  668:      if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
17981539514:  669:          shuffle(currentPlayer, state);
17981539514:  670:      }
7018965447127852258:  671:  drawCard(currentPlayer, state);
7018965447127852258:  672:  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
14469171020717092264:  673:  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    28331:  674:  drawntreasure++;
        -:  675:  else{
     4993:  676:  temphand[z]=cardDrawn;
     4993:  677:  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     4993:  678:  z++;
        -:  679:  }
        -:  680:}
        -:  681:    
    10114:  682:    while(z-1>=0){
     4993:  683:  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     4993:  684:      z=z-1;
        -:  685:    }
       64:  686:    return 0;
        -:  687:}
        -:  688:
        -:  689:int villagefun(int handPos, int currentPlayer, struct gameState *state){
        -:  690:        //+1 Card
        3:  691:        drawCard(currentPlayer, state);
        -:  692:        
        -:  693:        //+2 Actions
        3:  694:        state->numActions = state->numActions + 2;
        -:  695:        
        -:  696:        //discard played card from hand
        -:  697:        //discardCard(handPos, currentPlayer, state, 0);
        3:  698:        return 0;
        -:  699:}
        -:  700:
        -:  701:int great_hallfun(int currentPlayer, struct gameState *state, int handPos){
        -:  702:        //+1 Card
    #####:  703:        drawCard(currentPlayer, state);
        -:  704:        
        -:  705:        //+1 Actions
    #####:  706:        state->numActions++;
        -:  707:        
        -:  708:        //discard card from hand
    #####:  709:        discardCard(handPos, currentPlayer, state, 0);
    #####:  710:        return 0;
        -:  711:}
        -:  712:
        -:  713:int stewardfun(int choice1, int choice2, int choice3, int handPos, int currentPlayer, struct gameState *state){
        -:  714:
      120:  715:  if (choice1 == 1)
        -:  716:	{
        -:  717:	  //+2 cards
       40:  718:	  drawCard(currentPlayer, state);
       40:  719:	  drawCard(currentPlayer, state);
       40:  720:	}
       80:  721:      else if (choice2 == 2)
        -:  722:	{
        -:  723:	  //+2 coins
    #####:  724:	  state->coins = state->coins + 2;
    #####:  725:	}
        -:  726:      else
        -:  727:	{
        -:  728:	  //trash 2 cards in hand
       80:  729:	  discardCard(choice2, currentPlayer, state, 1);
       80:  730:	  discardCard(choice3, currentPlayer, state, 1);
        -:  731:	}
        -:  732:			
        -:  733:      //discard card from hand
      120:  734:      discardCard(handPos, currentPlayer, state, 0);
      120:  735:      return 0;
        -:  736:}
        -:  737:
        -:  738:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  739:{
        -:  740:  int i;
        -:  741:  int j;
        -:  742:  int k;
        -:  743:  int x;
        -:  744:  int index;
       42:  745:  int currentPlayer = whoseTurn(state);
       42:  746:  int nextPlayer = currentPlayer + 1;
        -:  747:
       42:  748:  int tributeRevealedCards[2] = {-1, -1};
        -:  749:  int temphand[MAX_HAND];// moved above the if statement
       42:  750:  if (nextPlayer > (state->numPlayers - 1)){
        4:  751:    nextPlayer = 0;
        4:  752:  }
        -:  753:  
        -:  754:	
        -:  755:  //uses switch to select card and perform actions
       52:  756:  switch( card ) 
        -:  757:    {
        -:  758:    case adventurer:
        4:  759:      adventurerfun(currentPlayer, state);
        -:  760:			
        -:  761:    case council_room:
        -:  762:      //+4 Cards
      390:  763:      for (i = 0; i < 4; i++)
        -:  764:	{
      156:  765:	  drawCard(currentPlayer, state);
      156:  766:	}
        -:  767:			
        -:  768:      //+1 Buy
       39:  769:      state->numBuys++;
        -:  770:			
        -:  771:      //Each other player draws a card
      234:  772:      for (i = 0; i < state->numPlayers; i++)
        -:  773:	{
       78:  774:	  if ( i != currentPlayer )
        -:  775:	    {
       39:  776:	      drawCard(i, state);
       39:  777:	    }
       78:  778:	}
        -:  779:			
        -:  780:      //put played card in played card pile
       39:  781:      discardCard(handPos, currentPlayer, state, 0);
        -:  782:			
       39:  783:      return 0;
        -:  784:			
        -:  785:    case feast:
        -:  786:      //gain card with cost up to 5
        -:  787:      //Backup hand
    #####:  788:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  789:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  790:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  791:      }
        -:  792:      //Backup hand
        -:  793:
        -:  794:      //Update Coins for Buy
    #####:  795:      updateCoins(currentPlayer, state, 5);
    #####:  796:      x = 1;//Condition to loop on
    #####:  797:      while( x == 1) {//Buy one card
    #####:  798:	if (supplyCount(choice1, state) <= 0){
        -:  799:	  if (DEBUG)
        -:  800:	    printf("None of that card left, sorry!\n");
        -:  801:
        -:  802:	  if (DEBUG){
        -:  803:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  804:	  }
    #####:  805:	}
    #####:  806:	else if (state->coins < getCost(choice1)){
    #####:  807:	  printf("That card is too expensive!\n");
        -:  808:
        -:  809:	  if (DEBUG){
        -:  810:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  811:	  }
    #####:  812:	}
        -:  813:	else{
        -:  814:
        -:  815:	  if (DEBUG){
        -:  816:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  817:	  }
        -:  818:
    #####:  819:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  820:	  x = 0;//No more buying cards
        -:  821:
        -:  822:	  if (DEBUG){
        -:  823:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  824:	  }
        -:  825:
        -:  826:	}
        -:  827:      }     
        -:  828:
        -:  829:      //Reset Hand
    #####:  830:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  831:	state->hand[currentPlayer][i] = temphand[i];
    #####:  832:	temphand[i] = -1;
    #####:  833:      }
        -:  834:      //Reset Hand
        -:  835:      			
    #####:  836:      return 0;
        -:  837:			
        -:  838:    case gardens:
    #####:  839:      return -1;
        -:  840:			
        -:  841:    case mine:
    #####:  842:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  843:
    #####:  844:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  845:	{
    #####:  846:	  return -1;
        -:  847:	}
        -:  848:		
    #####:  849:      if (choice2 > treasure_map || choice2 < curse)
        -:  850:	{
    #####:  851:	  return -1;
        -:  852:	}
        -:  853:
    #####:  854:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  855:	{
    #####:  856:	  return -1;
        -:  857:	}
        -:  858:
    #####:  859:      gainCard(choice2, state, 2, currentPlayer);
        -:  860:
        -:  861:      //discard card from hand
    #####:  862:      discardCard(handPos, currentPlayer, state, 0);
        -:  863:
        -:  864:      //discard trashed card
    #####:  865:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  866:	{
    #####:  867:	  if (state->hand[currentPlayer][i] == j)
        -:  868:	    {
    #####:  869:	      discardCard(i, currentPlayer, state, 0);			
    #####:  870:	      break;
        -:  871:	    }
    #####:  872:	}
        -:  873:			
    #####:  874:      return 0;
        -:  875:			
        -:  876:    case remodel:
    #####:  877:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  878:
    #####:  879:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  880:	{
    #####:  881:	  return -1;
        -:  882:	}
        -:  883:
    #####:  884:      gainCard(choice2, state, 0, currentPlayer);
        -:  885:
        -:  886:      //discard card from hand
    #####:  887:      discardCard(handPos, currentPlayer, state, 0);
        -:  888:
        -:  889:      //discard trashed card
    #####:  890:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  891:	{
    #####:  892:	  if (state->hand[currentPlayer][i] == j)
        -:  893:	    {
    #####:  894:	      discardCard(i, currentPlayer, state, 0);			
    #####:  895:	      break;
        -:  896:	    }
    #####:  897:	}
        -:  898:
        -:  899:
    #####:  900:      return 0;
        -:  901:		
        -:  902:    case smithy:
        -:  903:      //+3 Cards
        3:  904:      smithyfun(currentPlayer, state, handPos);
        -:  905:
        -:  906:    case village:
        3:  907:      villagefun(handPos, currentPlayer, state);
        -:  908:		
        -:  909:    case baron:
        3:  910:      state->numBuys++;//Increase buys by 1!
        3:  911:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  912:	int p = 0;//Iterator for hand!
    #####:  913:	int card_not_discarded = 1;//Flag for discard set!
    #####:  914:	while(card_not_discarded){
    #####:  915:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  916:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  917:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  918:	    state->discardCount[currentPlayer]++;
    #####:  919:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  920:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  921:	    }
    #####:  922:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  923:	    state->handCount[currentPlayer]--;
    #####:  924:	    card_not_discarded = 0;//Exit the loop
    #####:  925:	  }
    #####:  926:	  else if (p > state->handCount[currentPlayer]){
        -:  927:	    if(DEBUG) {
        -:  928:	      printf("No estate cards in your hand, invalid choice\n");
        -:  929:	      printf("Must gain an estate if there are any\n");
        -:  930:	    }
    #####:  931:	    if (supplyCount(estate, state) > 0){
    #####:  932:	      gainCard(estate, state, 0, currentPlayer);
    #####:  933:	      state->supplyCount[estate]--;//Decrement estates
    #####:  934:	      if (supplyCount(estate, state) == 0){
    #####:  935:		isGameOver(state);
    #####:  936:	      }
    #####:  937:	    }
    #####:  938:	    card_not_discarded = 0;//Exit the loop
    #####:  939:	  }
        -:  940:			    
        -:  941:	  else{
    #####:  942:	    p++;//Next card
        -:  943:	  }
        -:  944:	}
    #####:  945:      }
        -:  946:			    
        -:  947:      else{
        3:  948:	if (supplyCount(estate, state) > 0){
        3:  949:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
        3:  950:	  state->supplyCount[estate]--;//Decrement Estates
        3:  951:	  if (supplyCount(estate, state) == 0){
    #####:  952:	    isGameOver(state);
    #####:  953:	  }
        3:  954:	}
        -:  955:      }
        -:  956:	    
        -:  957:      
        3:  958:      return 0;
        -:  959:		
        -:  960:    case great_hall:
    #####:  961:      great_hallfun(currentPlayer, state, handPos);
        -:  962:		
        -:  963:    case minion:
        -:  964:      //+1 action
    #####:  965:      state->numActions++;
        -:  966:			
        -:  967:      //discard card from hand
    #####:  968:      discardCard(handPos, currentPlayer, state, 0);
        -:  969:			
    #####:  970:      if (choice1)		//+2 coins
        -:  971:	{
    #####:  972:	  state->coins = state->coins + 2;
    #####:  973:	}
        -:  974:			
    #####:  975:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  976:	{
        -:  977:	  //discard hand
    #####:  978:	  while(numHandCards(state) > 0)
        -:  979:	    {
    #####:  980:	      discardCard(handPos, currentPlayer, state, 0);
        -:  981:	    }
        -:  982:				
        -:  983:	  //draw 4
    #####:  984:	  for (i = 0; i < 4; i++)
        -:  985:	    {
    #####:  986:	      drawCard(currentPlayer, state);
    #####:  987:	    }
        -:  988:				
        -:  989:	  //other players discard hand and redraw if hand size > 4
    #####:  990:	  for (i = 0; i < state->numPlayers; i++)
        -:  991:	    {
    #####:  992:	      if (i != currentPlayer)
        -:  993:		{
    #####:  994:		  if ( state->handCount[i] > 4 )
        -:  995:		    {
        -:  996:		      //discard hand
    #####:  997:		      while( state->handCount[i] > 0 )
        -:  998:			{
    #####:  999:			  discardCard(handPos, i, state, 0);
        -: 1000:			}
        -: 1001:							
        -: 1002:		      //draw 4
    #####: 1003:		      for (j = 0; j < 4; j++)
        -: 1004:			{
    #####: 1005:			  drawCard(i, state);
    #####: 1006:			}
    #####: 1007:		    }
    #####: 1008:		}
    #####: 1009:	    }
        -: 1010:				
    #####: 1011:	}
    #####: 1012:      return 0;
        -: 1013:		
        -: 1014:    case steward:
    #####: 1015:      stewardfun(choice1, choice2, choice3, handPos, currentPlayer, state);
        -: 1016:
        -: 1017:		
        -: 1018:    case tribute:
    #####: 1019:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1020:	if (state->deckCount[nextPlayer] > 0){
    #####: 1021:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1022:	  state->deckCount[nextPlayer]--;
    #####: 1023:	}
    #####: 1024:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1025:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1026:	  state->discardCount[nextPlayer]--;
    #####: 1027:	}
        -: 1028:	else{
        -: 1029:	  //No Card to Reveal
        -: 1030:	  if (DEBUG){
        -: 1031:	    printf("No cards to reveal\n");
        -: 1032:	  }
        -: 1033:	}
    #####: 1034:      }
        -: 1035:	    
        -: 1036:      else{
    #####: 1037:	if (state->deckCount[nextPlayer] == 0){
    #####: 1038:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1039:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1040:	    state->deckCount[nextPlayer]++;
    #####: 1041:	    state->discard[nextPlayer][i] = -1;
    #####: 1042:	    state->discardCount[nextPlayer]--;
    #####: 1043:	  }
        -: 1044:			    
    #####: 1045:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1046:	} 
    #####: 1047:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1048:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1049:	state->deckCount[nextPlayer]--;
    #####: 1050:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1051:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1052:	state->deckCount[nextPlayer]--;
        -: 1053:      }    
        -: 1054:		       
    #####: 1055:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1056:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1057:	state->playedCardCount++;
    #####: 1058:	tributeRevealedCards[1] = -1;
    #####: 1059:      }
        -: 1060:
    #####: 1061:      for (i = 0; i <= 2; i ++){
    #####: 1062:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1063:	  state->coins += 2;
    #####: 1064:	}
        -: 1065:		    
    #####: 1066:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1067:	  drawCard(currentPlayer, state);
    #####: 1068:	  drawCard(currentPlayer, state);
    #####: 1069:	}
        -: 1070:	else{//Action Card
    #####: 1071:	  state->numActions = state->numActions + 2;
        -: 1072:	}
    #####: 1073:      }
        -: 1074:	    
    #####: 1075:      return 0;
        -: 1076:		
        -: 1077:    case ambassador:
    #####: 1078:      j = 0;		//used to check if player has enough cards to discard
        -: 1079:
    #####: 1080:      if (choice2 > 2 || choice2 < 0)
        -: 1081:	{
    #####: 1082:	  return -1;				
        -: 1083:	}
        -: 1084:
    #####: 1085:      if (choice1 == handPos)
        -: 1086:	{
    #####: 1087:	  return -1;
        -: 1088:	}
        -: 1089:
    #####: 1090:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1091:	{
    #####: 1092:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1093:	    {
    #####: 1094:	      j++;
    #####: 1095:	    }
    #####: 1096:	}
    #####: 1097:      if (j < choice2)
        -: 1098:	{
    #####: 1099:	  return -1;				
        -: 1100:	}
        -: 1101:
        -: 1102:      if (DEBUG) 
        -: 1103:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1104:
        -: 1105:      //increase supply count for choosen card by amount being discarded
    #####: 1106:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1107:			
        -: 1108:      //each other player gains a copy of revealed card
    #####: 1109:      for (i = 0; i < state->numPlayers; i++)
        -: 1110:	{
    #####: 1111:	  if (i != currentPlayer)
        -: 1112:	    {
    #####: 1113:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1114:	    }
    #####: 1115:	}
        -: 1116:
        -: 1117:      //discard played card from hand
    #####: 1118:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1119:
        -: 1120:      //trash copies of cards returned to supply
    #####: 1121:      for (j = 0; j < choice2; j++)
        -: 1122:	{
    #####: 1123:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1124:	    {
    #####: 1125:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1126:		{
    #####: 1127:		  discardCard(i, currentPlayer, state, 1);
    #####: 1128:		  break;
        -: 1129:		}
    #####: 1130:	    }
    #####: 1131:	}			
        -: 1132:
    #####: 1133:      return 0;
        -: 1134:		
        -: 1135:    case cutpurse:
        -: 1136:
    #####: 1137:      updateCoins(currentPlayer, state, 2);
    #####: 1138:      for (i = 0; i < state->numPlayers; i++)
        -: 1139:	{
    #####: 1140:	  if (i != currentPlayer)
        -: 1141:	    {
    #####: 1142:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1143:		{
    #####: 1144:		  if (state->hand[i][j] == copper)
        -: 1145:		    {
    #####: 1146:		      discardCard(j, i, state, 0);
    #####: 1147:		      break;
        -: 1148:		    }
    #####: 1149:		  if (j == state->handCount[i])
        -: 1150:		    {
    #####: 1151:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1152:			{
        -: 1153:			  if (DEBUG)
        -: 1154:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1155:			}	
    #####: 1156:		      break;
        -: 1157:		    }		
    #####: 1158:		}
        -: 1159:					
    #####: 1160:	    }
        -: 1161:				
    #####: 1162:	}				
        -: 1163:
        -: 1164:      //discard played card from hand
    #####: 1165:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1166:
    #####: 1167:      return 0;
        -: 1168:
        -: 1169:		
        -: 1170:    case embargo: 
        -: 1171:      //+2 Coins
    #####: 1172:      state->coins = state->coins + 2;
        -: 1173:			
        -: 1174:      //see if selected pile is in play
    #####: 1175:      if ( state->supplyCount[choice1] == -1 )
        -: 1176:	{
    #####: 1177:	  return -1;
        -: 1178:	}
        -: 1179:			
        -: 1180:      //add embargo token to selected supply pile
    #####: 1181:      state->embargoTokens[choice1]++;
        -: 1182:			
        -: 1183:      //trash card
    #####: 1184:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1185:      return 0;
        -: 1186:		
        -: 1187:    case outpost:
        -: 1188:      //set outpost flag
    #####: 1189:      state->outpostPlayed++;
        -: 1190:			
        -: 1191:      //discard card
    #####: 1192:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1193:      return 0;
        -: 1194:		
        -: 1195:    case salvager:
        -: 1196:      //+1 buy
    #####: 1197:      state->numBuys++;
        -: 1198:			
    #####: 1199:      if (choice1)
        -: 1200:	{
        -: 1201:	  //gain coins equal to trashed card
    #####: 1202:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1203:	  //trash card
    #####: 1204:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1205:	}
        -: 1206:			
        -: 1207:      //discard card
    #####: 1208:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1209:      return 0;
        -: 1210:		
        -: 1211:    case sea_hag:
    #####: 1212:      for (i = 0; i < state->numPlayers; i++){
    #####: 1213:	if (i != currentPlayer){
    #####: 1214:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1215:	  state->discardCount[i]++;
    #####: 1216:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1217:	}
    #####: 1218:      }
    #####: 1219:      return 0;
        -: 1220:		
        -: 1221:    case treasure_map:
        -: 1222:      //search hand for another treasure_map
    #####: 1223:      index = -1;
    #####: 1224:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1225:	{
    #####: 1226:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1227:	    {
    #####: 1228:	      index = i;
    #####: 1229:	      break;
        -: 1230:	    }
    #####: 1231:	}
    #####: 1232:      if (index > -1)
        -: 1233:	{
        -: 1234:	  //trash both treasure cards
    #####: 1235:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1236:	  discardCard(index, currentPlayer, state, 1);
        -: 1237:
        -: 1238:	  //gain 4 Gold cards
    #####: 1239:	  for (i = 0; i < 4; i++)
        -: 1240:	    {
    #####: 1241:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1242:	    }
        -: 1243:				
        -: 1244:	  //return success
    #####: 1245:	  return 1;
        -: 1246:	}
        -: 1247:			
        -: 1248:      //no second treasure_map found in hand
    #####: 1249:      return -1;
        -: 1250:    }
        -: 1251:	
    #####: 1252:  return -1;
       42: 1253:}
        -: 1254:
        -: 1255:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1256:{
        -: 1257:	
        -: 1258:  //if card is not trashed, added to Played pile 
      673: 1259:  if (trashFlag < 1)
        -: 1260:    {
        -: 1261:      //add card to played pile
      363: 1262:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      363: 1263:      state->playedCardCount++;
      363: 1264:    }
        -: 1265:	
        -: 1266:  //set played card to -1
      673: 1267:  state->hand[currentPlayer][handPos] = -1;
        -: 1268:	
        -: 1269:  //remove card from player's hand
      673: 1270:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1271:    {
        -: 1272:      //reduce number of cards in hand
       97: 1273:      state->handCount[currentPlayer]--;
       97: 1274:    }
      576: 1275:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1276:    {
        -: 1277:      //reduce number of cards in hand
       48: 1278:      state->handCount[currentPlayer]--;
       48: 1279:    }
        -: 1280:  else 	
        -: 1281:    {
        -: 1282:      //replace discarded card with last card in hand
      528: 1283:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1284:      //set last card to -1
      528: 1285:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1286:      //reduce number of cards in hand
      528: 1287:      state->handCount[currentPlayer]--;
        -: 1288:    }
        -: 1289:	
      673: 1290:  return 0;
        -: 1291:}
        -: 1292:
        -: 1293:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1294:{
        -: 1295:  //Note: supplyPos is enum of choosen card
        -: 1296:	
        -: 1297:  //check if supply pile is empty (0) or card is not used in game (-1)
     4224: 1298:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1299:    {
      578: 1300:      return -1;
        -: 1301:    }
        -: 1302:	
        -: 1303:  //added card for [whoseTurn] current player:
        -: 1304:  // toFlag = 0 : add to discard
        -: 1305:  // toFlag = 1 : add to deck
        -: 1306:  // toFlag = 2 : add to hand
        -: 1307:
     3646: 1308:  if (toFlag == 1)
        -: 1309:    {
     1428: 1310:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
     1428: 1311:      state->deckCount[player]++;
     1428: 1312:    }
     2218: 1313:  else if (toFlag == 2)
        -: 1314:    {
     1190: 1315:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
     1190: 1316:      state->handCount[player]++;
     1190: 1317:    }
        -: 1318:  else
        -: 1319:    {
     1028: 1320:      state->discard[player][ state->discardCount[player] ] = supplyPos;
     1028: 1321:      state->discardCount[player]++;
        -: 1322:    }
        -: 1323:	
        -: 1324:  //decrease number in supply pile
     3646: 1325:  state->supplyCount[supplyPos]--;
        -: 1326:	 
     3646: 1327:  return 0;
     4224: 1328:}
        -: 1329:
        -: 1330:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1331:{
        -: 1332:  int i;
        -: 1333:	
        -: 1334:  //reset coin count
     5841: 1335:  state->coins = 0;
        -: 1336:
        -: 1337:  //add coins for each Treasure card in player's hand
    68836: 1338:  for (i = 0; i < state->handCount[player]; i++)
        -: 1339:    {
    28577: 1340:      if (state->hand[player][i] == copper)
        -: 1341:	{
    22230: 1342:	  state->coins += 1;
    22230: 1343:	}
     6347: 1344:      else if (state->hand[player][i] == silver)
        -: 1345:	{
      433: 1346:	  state->coins += 2;
      433: 1347:	}
     5914: 1348:      else if (state->hand[player][i] == gold)
        -: 1349:	{
      353: 1350:	  state->coins += 3;
      353: 1351:	}	
    28577: 1352:    }	
        -: 1353:
        -: 1354:  //add bonus
     5841: 1355:  state->coins += bonus;
        -: 1356:
     5841: 1357:  return 0;
        -: 1358:}
        -: 1359:
        -: 1360:
        -: 1361://end of dominion.c
        -: 1362:
TESTING scoreTest():
Testing with 0 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 387389207
Test failed.
Card at position: 6
Card drawn: 387389207
Test failed.
Testing that 2 cards were drawn. 
HandCount: 5, Expected: 7
test FAILED
Testing with 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 8, Expected: 7
test FAILED
Testing with 10 deckcount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 8, Expected: 7
test FAILED
Testing with 0 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 387389207
Test failed.
Card at position: 1
Card drawn: 387389207
Test failed.
Testing that 2 cards were drawn. 
HandCount: -495, Expected: 2
test FAILED
Testing with 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 3, Expected: 2
test FAILED
Testing with 10 deckcount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 3, Expected: 2
test FAILED
Tests failed.
File 'dominion.c'
Lines executed:51.01% of 643
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:49
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
   153231:    9:  if (*(int*)a > *(int*)b)
      336:   10:    return 1;
   152895:   11:  if (*(int*)a < *(int*)b)
    54714:   12:    return -1;
    98181:   13:  return 0;
   153231:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     5433:   44:  SelectStream(1);
     5433:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
    10866:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     5433:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   119526:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
  1195260:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
  1032270:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
   543300:   65:        }
    54330:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     5433:   73:  if (numPlayers == 2)
        -:   74:    {
     5433:   75:      state->supplyCount[curse] = 10;
     5433:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     5433:   87:  if (numPlayers == 2)
        -:   88:    {
     5433:   89:      state->supplyCount[estate] = 8;
     5433:   90:      state->supplyCount[duchy] = 8;
     5433:   91:      state->supplyCount[province] = 8;
     5433:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     5433:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     5433:  102:  state->supplyCount[silver] = 40;
     5433:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   228186:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
  1792890:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
   842115:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
   103229:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    10864:  115:		  if (numPlayers == 2){ 
    10864:  116:		    state->supplyCount[i] = 8; 
    10864:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
    10864:  119:		}
        -:  120:	      else
        -:  121:		{
    43466:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    54330:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   787785:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
   787785:  130:	}
        -:  131:
   108660:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    32598:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
    10866:  140:      state->deckCount[i] = 0;
    86928:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    32598:  143:	  state->deck[i][j] = estate;
    32598:  144:	  state->deckCount[i]++;
    32598:  145:	}
   173856:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    76062:  148:	  state->deck[i][j] = copper;
    76062:  149:	  state->deckCount[i]++;		
    76062:  150:	}
    10866:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    32598:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
    10866:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
    10866:  160:    }
        -:  161:
        -:  162:  //draw player hands
    32598:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    10866:  166:      state->handCount[i] = 0;
    10866:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
    10866:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
   304248:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
   146691:  178:      state->embargoTokens[i] = 0;
   146691:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     5433:  182:  state->outpostPlayed = 0;
     5433:  183:  state->phase = 0;
     5433:  184:  state->numActions = 1;
     5433:  185:  state->numBuys = 1;
     5433:  186:  state->playedCardCount = 0;
     5433:  187:  state->whoseTurn = 0;
     5433:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    65196:  192:  for (it = 0; it < 5; it++){
    27165:  193:    drawCard(state->whoseTurn, state);
    27165:  194:  }
        -:  195:
     5433:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     5433:  198:  return 0;
     5433:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    22459:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    22459:  209:  if (state->deckCount[player] < 1)
    11558:  210:    return -1;
    10901:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   240082:  214:  while (state->deckCount[player] > 0) {
   109140:  215:    card = floor(Random() * state->deckCount[player]);
   109140:  216:    newDeck[newDeckPos] = state->deck[player][card];
   109140:  217:    newDeckPos++;
   764984:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   273352:  219:      state->deck[player][i] = state->deck[player][i+1];
   273352:  220:    }
   109140:  221:    state->deckCount[player]--;
        -:  222:  }
   240082:  223:  for (i = 0; i < newDeckPos; i++) {
   109140:  224:    state->deck[player][i] = newDeck[i];
   109140:  225:    state->deckCount[player]++;
   109140:  226:  }
        -:  227:
    10901:  228:  return 0;
    22459:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
       61:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       61:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
       61:  243:  if ( state->numActions < 1 )
        -:  244:    {
       36:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
       25:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
       32:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
       18:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
        7:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        7:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        7:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
        7:  269:  return 0;
       61:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
       73:  280:  who = state->whoseTurn;
        -:  281:
       73:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
       73:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
       73:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
       73:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
       73:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
       73:  299:    state->coins = (state->coins) - (getCost(supplyPos));
       73:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
       73:  308:  return 0;
       73:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
      536:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
     1128:  316:  int currentPlayer = whoseTurn(state);
     1128:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
     8111:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
      940:  326:  int count = 0;
        -:  327:
    14060:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
     7050:  330:      if (state->deck[player][i] == card) count++;
     6090:  331:    }
        -:  332:
    32872:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    18144:  335:      if (state->hand[player][i] == card) count++;
    15496:  336:    }
        -:  337:
    25400:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    13720:  340:      if (state->discard[player][i] == card) count++;
    11760:  341:    }
        -:  342:
      940:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
     1860:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
       77:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
      988:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
      417:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      417:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
      417:  359:  }
       77:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
       77:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
       39:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
       39:  365:  }
        -:  366:  else{
       38:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
       77:  370:  state->outpostPlayed = 0;
       77:  371:  state->phase = 0;
       77:  372:  state->numActions = 1;
       77:  373:  state->coins = 0;
       77:  374:  state->numBuys = 1;
       77:  375:  state->playedCardCount = 0;
       77:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
      924:  380:  for (k = 0; k < 5; k++){
      385:  381:    drawCard(state->whoseTurn, state);//Draw a card
      385:  382:  }
        -:  383:
        -:  384:  //Update money
       77:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
       77:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
      567:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
      202:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
      365:  401:  j = 0;
    18980:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
     9125:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
      576:  406:	  j++;
      576:  407:	}
     9125:  408:    }
      365:  409:  if ( j >= 3)
        -:  410:    {
       96:  411:      return 1;
        -:  412:    }
        -:  413:
      269:  414:  return 0;
      567:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
      184:  420:  int score = 0;
        -:  421:  //score from hand
     4708:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
     2546:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
     2515:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
     2518:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
     2523:  427:      if (state->hand[player][i] == province) { score = score + 6; };
     2526:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
     2530:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     2170:  430:    }
        -:  431:
        -:  432:  //score from discard
     2804:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
     1418:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
     1420:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
     1418:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
     1422:  438:      if (state->discard[player][i] == province) { score = score + 6; };
     1418:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
     1418:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     1218:  441:    }
        -:  442:
        -:  443:  //score from deck
     2804:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
     1418:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
     1421:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
     1418:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
     1420:  449:      if (state->deck[player][i] == province) { score = score + 6; };
     1418:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
     1418:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     1218:  452:    }
        -:  453:
      184:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    34244:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    13088:  533:    for (i = 0; i < state->discardCount[player];i++){
      480:  534:      state->deck[player][i] = state->discard[player][i];
      480:  535:      state->discard[player][i] = -1;
      480:  536:    }
        -:  537:
     6064:  538:    state->deckCount[player] = state->discardCount[player];
     6064:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     6064:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     6064:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     6064:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     6064:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     6064:  559:    if (deckCounter == 0)
     6029:  560:      return -1;
        -:  561:
       35:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       35:  563:    state->deckCount[player]--;
       35:  564:    state->handCount[player]++;//Increment hand count
       35:  565:  }
        -:  566:
        -:  567:  else{
    28180:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    28180:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    28180:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    28180:  576:    state->deckCount[player]--;
    28180:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    28215:  580:  return 0;
    34244:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
      146:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
       32:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
       70:  598:      return 3;
        -:  599:    case gold:
       28:  600:      return 6;
        -:  601:    case adventurer:
        8:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
        8:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
      146:  644:}
        -:  645:
        -:  646://smithy function to introduce a bug
        -:  647:int smithyfun(int currentPlayer, struct gameState *state, int handPos){
        -:  648:  //+3 Cards
        -:  649:  int i;
      528:  650:  for (i = 0; i <= 3; i++)
        -:  651:  {
      211:  652:    drawCard(currentPlayer, state);
      211:  653:  }
        -:  654:      
        -:  655:      //discard card from hand
       53:  656:      discardCard(handPos, currentPlayer, state, 0);
       53:  657:      return 0;
        -:  658:}
        -:  659:
        -:  660://adventurer function to introduce a bug
        -:  661:int adventurerfun(int currentPlayer, struct gameState *state){
        -:  662:    int cardDrawn;
        -:  663:    int temphand[MAX_HAND];
2291246309455167536:  664:    int drawntreasure = 0;
2291246309455167536:  665:    int z = 0;
        -:  666:
10104103169071347668:  667:  while(drawntreasure <= 2){
72057701412115936:  668:      if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
17981540015:  669:          shuffle(currentPlayer, state);
17981540015:  670:      }
7018965447127852775:  671:  drawCard(currentPlayer, state);
7018965447127852775:  672:  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
14469171020717093779:  673:  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    28349:  674:  drawntreasure++;
        -:  675:  else{
     5492:  676:  temphand[z]=cardDrawn;
     5492:  677:  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     5492:  678:  z++;
        -:  679:  }
        -:  680:}
        -:  681:    
    11124:  682:    while(z-1>=0){
     5492:  683:  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     5492:  684:      z=z-1;
        -:  685:    }
       70:  686:    return 0;
        -:  687:}
        -:  688:
        -:  689:int villagefun(int handPos, int currentPlayer, struct gameState *state){
        -:  690:        //+1 Card
        3:  691:        drawCard(currentPlayer, state);
        -:  692:        
        -:  693:        //+2 Actions
        3:  694:        state->numActions = state->numActions + 2;
        -:  695:        
        -:  696:        //discard played card from hand
        -:  697:        //discardCard(handPos, currentPlayer, state, 0);
        3:  698:        return 0;
        -:  699:}
        -:  700:
        -:  701:int great_hallfun(int currentPlayer, struct gameState *state, int handPos){
        -:  702:        //+1 Card
    #####:  703:        drawCard(currentPlayer, state);
        -:  704:        
        -:  705:        //+1 Actions
    #####:  706:        state->numActions++;
        -:  707:        
        -:  708:        //discard card from hand
    #####:  709:        discardCard(handPos, currentPlayer, state, 0);
    #####:  710:        return 0;
        -:  711:}
        -:  712:
        -:  713:int stewardfun(int choice1, int choice2, int choice3, int handPos, int currentPlayer, struct gameState *state){
        -:  714:
      120:  715:  if (choice1 == 1)
        -:  716:	{
        -:  717:	  //+2 cards
       40:  718:	  drawCard(currentPlayer, state);
       40:  719:	  drawCard(currentPlayer, state);
       40:  720:	}
       80:  721:      else if (choice2 == 2)
        -:  722:	{
        -:  723:	  //+2 coins
    #####:  724:	  state->coins = state->coins + 2;
    #####:  725:	}
        -:  726:      else
        -:  727:	{
        -:  728:	  //trash 2 cards in hand
       80:  729:	  discardCard(choice2, currentPlayer, state, 1);
       80:  730:	  discardCard(choice3, currentPlayer, state, 1);
        -:  731:	}
        -:  732:			
        -:  733:      //discard card from hand
      120:  734:      discardCard(handPos, currentPlayer, state, 0);
      120:  735:      return 0;
        -:  736:}
        -:  737:
        -:  738:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  739:{
        -:  740:  int i;
        -:  741:  int j;
        -:  742:  int k;
        -:  743:  int x;
        -:  744:  int index;
       42:  745:  int currentPlayer = whoseTurn(state);
       42:  746:  int nextPlayer = currentPlayer + 1;
        -:  747:
       42:  748:  int tributeRevealedCards[2] = {-1, -1};
        -:  749:  int temphand[MAX_HAND];// moved above the if statement
       42:  750:  if (nextPlayer > (state->numPlayers - 1)){
        4:  751:    nextPlayer = 0;
        4:  752:  }
        -:  753:  
        -:  754:	
        -:  755:  //uses switch to select card and perform actions
       52:  756:  switch( card ) 
        -:  757:    {
        -:  758:    case adventurer:
        4:  759:      adventurerfun(currentPlayer, state);
        -:  760:			
        -:  761:    case council_room:
        -:  762:      //+4 Cards
      390:  763:      for (i = 0; i < 4; i++)
        -:  764:	{
      156:  765:	  drawCard(currentPlayer, state);
      156:  766:	}
        -:  767:			
        -:  768:      //+1 Buy
       39:  769:      state->numBuys++;
        -:  770:			
        -:  771:      //Each other player draws a card
      234:  772:      for (i = 0; i < state->numPlayers; i++)
        -:  773:	{
       78:  774:	  if ( i != currentPlayer )
        -:  775:	    {
       39:  776:	      drawCard(i, state);
       39:  777:	    }
       78:  778:	}
        -:  779:			
        -:  780:      //put played card in played card pile
       39:  781:      discardCard(handPos, currentPlayer, state, 0);
        -:  782:			
       39:  783:      return 0;
        -:  784:			
        -:  785:    case feast:
        -:  786:      //gain card with cost up to 5
        -:  787:      //Backup hand
    #####:  788:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  789:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  790:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  791:      }
        -:  792:      //Backup hand
        -:  793:
        -:  794:      //Update Coins for Buy
    #####:  795:      updateCoins(currentPlayer, state, 5);
    #####:  796:      x = 1;//Condition to loop on
    #####:  797:      while( x == 1) {//Buy one card
    #####:  798:	if (supplyCount(choice1, state) <= 0){
        -:  799:	  if (DEBUG)
        -:  800:	    printf("None of that card left, sorry!\n");
        -:  801:
        -:  802:	  if (DEBUG){
        -:  803:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  804:	  }
    #####:  805:	}
    #####:  806:	else if (state->coins < getCost(choice1)){
    #####:  807:	  printf("That card is too expensive!\n");
        -:  808:
        -:  809:	  if (DEBUG){
        -:  810:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  811:	  }
    #####:  812:	}
        -:  813:	else{
        -:  814:
        -:  815:	  if (DEBUG){
        -:  816:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  817:	  }
        -:  818:
    #####:  819:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  820:	  x = 0;//No more buying cards
        -:  821:
        -:  822:	  if (DEBUG){
        -:  823:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  824:	  }
        -:  825:
        -:  826:	}
        -:  827:      }     
        -:  828:
        -:  829:      //Reset Hand
    #####:  830:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  831:	state->hand[currentPlayer][i] = temphand[i];
    #####:  832:	temphand[i] = -1;
    #####:  833:      }
        -:  834:      //Reset Hand
        -:  835:      			
    #####:  836:      return 0;
        -:  837:			
        -:  838:    case gardens:
    #####:  839:      return -1;
        -:  840:			
        -:  841:    case mine:
    #####:  842:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  843:
    #####:  844:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  845:	{
    #####:  846:	  return -1;
        -:  847:	}
        -:  848:		
    #####:  849:      if (choice2 > treasure_map || choice2 < curse)
        -:  850:	{
    #####:  851:	  return -1;
        -:  852:	}
        -:  853:
    #####:  854:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  855:	{
    #####:  856:	  return -1;
        -:  857:	}
        -:  858:
    #####:  859:      gainCard(choice2, state, 2, currentPlayer);
        -:  860:
        -:  861:      //discard card from hand
    #####:  862:      discardCard(handPos, currentPlayer, state, 0);
        -:  863:
        -:  864:      //discard trashed card
    #####:  865:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  866:	{
    #####:  867:	  if (state->hand[currentPlayer][i] == j)
        -:  868:	    {
    #####:  869:	      discardCard(i, currentPlayer, state, 0);			
    #####:  870:	      break;
        -:  871:	    }
    #####:  872:	}
        -:  873:			
    #####:  874:      return 0;
        -:  875:			
        -:  876:    case remodel:
    #####:  877:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  878:
    #####:  879:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  880:	{
    #####:  881:	  return -1;
        -:  882:	}
        -:  883:
    #####:  884:      gainCard(choice2, state, 0, currentPlayer);
        -:  885:
        -:  886:      //discard card from hand
    #####:  887:      discardCard(handPos, currentPlayer, state, 0);
        -:  888:
        -:  889:      //discard trashed card
    #####:  890:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  891:	{
    #####:  892:	  if (state->hand[currentPlayer][i] == j)
        -:  893:	    {
    #####:  894:	      discardCard(i, currentPlayer, state, 0);			
    #####:  895:	      break;
        -:  896:	    }
    #####:  897:	}
        -:  898:
        -:  899:
    #####:  900:      return 0;
        -:  901:		
        -:  902:    case smithy:
        -:  903:      //+3 Cards
        3:  904:      smithyfun(currentPlayer, state, handPos);
        -:  905:
        -:  906:    case village:
        3:  907:      villagefun(handPos, currentPlayer, state);
        -:  908:		
        -:  909:    case baron:
        3:  910:      state->numBuys++;//Increase buys by 1!
        3:  911:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  912:	int p = 0;//Iterator for hand!
    #####:  913:	int card_not_discarded = 1;//Flag for discard set!
    #####:  914:	while(card_not_discarded){
    #####:  915:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  916:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  917:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  918:	    state->discardCount[currentPlayer]++;
    #####:  919:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  920:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  921:	    }
    #####:  922:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  923:	    state->handCount[currentPlayer]--;
    #####:  924:	    card_not_discarded = 0;//Exit the loop
    #####:  925:	  }
    #####:  926:	  else if (p > state->handCount[currentPlayer]){
        -:  927:	    if(DEBUG) {
        -:  928:	      printf("No estate cards in your hand, invalid choice\n");
        -:  929:	      printf("Must gain an estate if there are any\n");
        -:  930:	    }
    #####:  931:	    if (supplyCount(estate, state) > 0){
    #####:  932:	      gainCard(estate, state, 0, currentPlayer);
    #####:  933:	      state->supplyCount[estate]--;//Decrement estates
    #####:  934:	      if (supplyCount(estate, state) == 0){
    #####:  935:		isGameOver(state);
    #####:  936:	      }
    #####:  937:	    }
    #####:  938:	    card_not_discarded = 0;//Exit the loop
    #####:  939:	  }
        -:  940:			    
        -:  941:	  else{
    #####:  942:	    p++;//Next card
        -:  943:	  }
        -:  944:	}
    #####:  945:      }
        -:  946:			    
        -:  947:      else{
        3:  948:	if (supplyCount(estate, state) > 0){
        3:  949:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
        3:  950:	  state->supplyCount[estate]--;//Decrement Estates
        3:  951:	  if (supplyCount(estate, state) == 0){
    #####:  952:	    isGameOver(state);
    #####:  953:	  }
        3:  954:	}
        -:  955:      }
        -:  956:	    
        -:  957:      
        3:  958:      return 0;
        -:  959:		
        -:  960:    case great_hall:
    #####:  961:      great_hallfun(currentPlayer, state, handPos);
        -:  962:		
        -:  963:    case minion:
        -:  964:      //+1 action
    #####:  965:      state->numActions++;
        -:  966:			
        -:  967:      //discard card from hand
    #####:  968:      discardCard(handPos, currentPlayer, state, 0);
        -:  969:			
    #####:  970:      if (choice1)		//+2 coins
        -:  971:	{
    #####:  972:	  state->coins = state->coins + 2;
    #####:  973:	}
        -:  974:			
    #####:  975:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  976:	{
        -:  977:	  //discard hand
    #####:  978:	  while(numHandCards(state) > 0)
        -:  979:	    {
    #####:  980:	      discardCard(handPos, currentPlayer, state, 0);
        -:  981:	    }
        -:  982:				
        -:  983:	  //draw 4
    #####:  984:	  for (i = 0; i < 4; i++)
        -:  985:	    {
    #####:  986:	      drawCard(currentPlayer, state);
    #####:  987:	    }
        -:  988:				
        -:  989:	  //other players discard hand and redraw if hand size > 4
    #####:  990:	  for (i = 0; i < state->numPlayers; i++)
        -:  991:	    {
    #####:  992:	      if (i != currentPlayer)
        -:  993:		{
    #####:  994:		  if ( state->handCount[i] > 4 )
        -:  995:		    {
        -:  996:		      //discard hand
    #####:  997:		      while( state->handCount[i] > 0 )
        -:  998:			{
    #####:  999:			  discardCard(handPos, i, state, 0);
        -: 1000:			}
        -: 1001:							
        -: 1002:		      //draw 4
    #####: 1003:		      for (j = 0; j < 4; j++)
        -: 1004:			{
    #####: 1005:			  drawCard(i, state);
    #####: 1006:			}
    #####: 1007:		    }
    #####: 1008:		}
    #####: 1009:	    }
        -: 1010:				
    #####: 1011:	}
    #####: 1012:      return 0;
        -: 1013:		
        -: 1014:    case steward:
    #####: 1015:      stewardfun(choice1, choice2, choice3, handPos, currentPlayer, state);
        -: 1016:
        -: 1017:		
        -: 1018:    case tribute:
    #####: 1019:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1020:	if (state->deckCount[nextPlayer] > 0){
    #####: 1021:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1022:	  state->deckCount[nextPlayer]--;
    #####: 1023:	}
    #####: 1024:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1025:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1026:	  state->discardCount[nextPlayer]--;
    #####: 1027:	}
        -: 1028:	else{
        -: 1029:	  //No Card to Reveal
        -: 1030:	  if (DEBUG){
        -: 1031:	    printf("No cards to reveal\n");
        -: 1032:	  }
        -: 1033:	}
    #####: 1034:      }
        -: 1035:	    
        -: 1036:      else{
    #####: 1037:	if (state->deckCount[nextPlayer] == 0){
    #####: 1038:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1039:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1040:	    state->deckCount[nextPlayer]++;
    #####: 1041:	    state->discard[nextPlayer][i] = -1;
    #####: 1042:	    state->discardCount[nextPlayer]--;
    #####: 1043:	  }
        -: 1044:			    
    #####: 1045:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1046:	} 
    #####: 1047:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1048:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1049:	state->deckCount[nextPlayer]--;
    #####: 1050:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1051:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1052:	state->deckCount[nextPlayer]--;
        -: 1053:      }    
        -: 1054:		       
    #####: 1055:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1056:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1057:	state->playedCardCount++;
    #####: 1058:	tributeRevealedCards[1] = -1;
    #####: 1059:      }
        -: 1060:
    #####: 1061:      for (i = 0; i <= 2; i ++){
    #####: 1062:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1063:	  state->coins += 2;
    #####: 1064:	}
        -: 1065:		    
    #####: 1066:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1067:	  drawCard(currentPlayer, state);
    #####: 1068:	  drawCard(currentPlayer, state);
    #####: 1069:	}
        -: 1070:	else{//Action Card
    #####: 1071:	  state->numActions = state->numActions + 2;
        -: 1072:	}
    #####: 1073:      }
        -: 1074:	    
    #####: 1075:      return 0;
        -: 1076:		
        -: 1077:    case ambassador:
    #####: 1078:      j = 0;		//used to check if player has enough cards to discard
        -: 1079:
    #####: 1080:      if (choice2 > 2 || choice2 < 0)
        -: 1081:	{
    #####: 1082:	  return -1;				
        -: 1083:	}
        -: 1084:
    #####: 1085:      if (choice1 == handPos)
        -: 1086:	{
    #####: 1087:	  return -1;
        -: 1088:	}
        -: 1089:
    #####: 1090:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1091:	{
    #####: 1092:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1093:	    {
    #####: 1094:	      j++;
    #####: 1095:	    }
    #####: 1096:	}
    #####: 1097:      if (j < choice2)
        -: 1098:	{
    #####: 1099:	  return -1;				
        -: 1100:	}
        -: 1101:
        -: 1102:      if (DEBUG) 
        -: 1103:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1104:
        -: 1105:      //increase supply count for choosen card by amount being discarded
    #####: 1106:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1107:			
        -: 1108:      //each other player gains a copy of revealed card
    #####: 1109:      for (i = 0; i < state->numPlayers; i++)
        -: 1110:	{
    #####: 1111:	  if (i != currentPlayer)
        -: 1112:	    {
    #####: 1113:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1114:	    }
    #####: 1115:	}
        -: 1116:
        -: 1117:      //discard played card from hand
    #####: 1118:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1119:
        -: 1120:      //trash copies of cards returned to supply
    #####: 1121:      for (j = 0; j < choice2; j++)
        -: 1122:	{
    #####: 1123:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1124:	    {
    #####: 1125:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1126:		{
    #####: 1127:		  discardCard(i, currentPlayer, state, 1);
    #####: 1128:		  break;
        -: 1129:		}
    #####: 1130:	    }
    #####: 1131:	}			
        -: 1132:
    #####: 1133:      return 0;
        -: 1134:		
        -: 1135:    case cutpurse:
        -: 1136:
    #####: 1137:      updateCoins(currentPlayer, state, 2);
    #####: 1138:      for (i = 0; i < state->numPlayers; i++)
        -: 1139:	{
    #####: 1140:	  if (i != currentPlayer)
        -: 1141:	    {
    #####: 1142:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1143:		{
    #####: 1144:		  if (state->hand[i][j] == copper)
        -: 1145:		    {
    #####: 1146:		      discardCard(j, i, state, 0);
    #####: 1147:		      break;
        -: 1148:		    }
    #####: 1149:		  if (j == state->handCount[i])
        -: 1150:		    {
    #####: 1151:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1152:			{
        -: 1153:			  if (DEBUG)
        -: 1154:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1155:			}	
    #####: 1156:		      break;
        -: 1157:		    }		
    #####: 1158:		}
        -: 1159:					
    #####: 1160:	    }
        -: 1161:				
    #####: 1162:	}				
        -: 1163:
        -: 1164:      //discard played card from hand
    #####: 1165:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1166:
    #####: 1167:      return 0;
        -: 1168:
        -: 1169:		
        -: 1170:    case embargo: 
        -: 1171:      //+2 Coins
    #####: 1172:      state->coins = state->coins + 2;
        -: 1173:			
        -: 1174:      //see if selected pile is in play
    #####: 1175:      if ( state->supplyCount[choice1] == -1 )
        -: 1176:	{
    #####: 1177:	  return -1;
        -: 1178:	}
        -: 1179:			
        -: 1180:      //add embargo token to selected supply pile
    #####: 1181:      state->embargoTokens[choice1]++;
        -: 1182:			
        -: 1183:      //trash card
    #####: 1184:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1185:      return 0;
        -: 1186:		
        -: 1187:    case outpost:
        -: 1188:      //set outpost flag
    #####: 1189:      state->outpostPlayed++;
        -: 1190:			
        -: 1191:      //discard card
    #####: 1192:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1193:      return 0;
        -: 1194:		
        -: 1195:    case salvager:
        -: 1196:      //+1 buy
    #####: 1197:      state->numBuys++;
        -: 1198:			
    #####: 1199:      if (choice1)
        -: 1200:	{
        -: 1201:	  //gain coins equal to trashed card
    #####: 1202:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1203:	  //trash card
    #####: 1204:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1205:	}
        -: 1206:			
        -: 1207:      //discard card
    #####: 1208:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1209:      return 0;
        -: 1210:		
        -: 1211:    case sea_hag:
    #####: 1212:      for (i = 0; i < state->numPlayers; i++){
    #####: 1213:	if (i != currentPlayer){
    #####: 1214:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1215:	  state->discardCount[i]++;
    #####: 1216:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1217:	}
    #####: 1218:      }
    #####: 1219:      return 0;
        -: 1220:		
        -: 1221:    case treasure_map:
        -: 1222:      //search hand for another treasure_map
    #####: 1223:      index = -1;
    #####: 1224:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1225:	{
    #####: 1226:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1227:	    {
    #####: 1228:	      index = i;
    #####: 1229:	      break;
        -: 1230:	    }
    #####: 1231:	}
    #####: 1232:      if (index > -1)
        -: 1233:	{
        -: 1234:	  //trash both treasure cards
    #####: 1235:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1236:	  discardCard(index, currentPlayer, state, 1);
        -: 1237:
        -: 1238:	  //gain 4 Gold cards
    #####: 1239:	  for (i = 0; i < 4; i++)
        -: 1240:	    {
    #####: 1241:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1242:	    }
        -: 1243:				
        -: 1244:	  //return success
    #####: 1245:	  return 1;
        -: 1246:	}
        -: 1247:			
        -: 1248:      //no second treasure_map found in hand
    #####: 1249:      return -1;
        -: 1250:    }
        -: 1251:	
    #####: 1252:  return -1;
       42: 1253:}
        -: 1254:
        -: 1255:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1256:{
        -: 1257:	
        -: 1258:  //if card is not trashed, added to Played pile 
      673: 1259:  if (trashFlag < 1)
        -: 1260:    {
        -: 1261:      //add card to played pile
      363: 1262:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      363: 1263:      state->playedCardCount++;
      363: 1264:    }
        -: 1265:	
        -: 1266:  //set played card to -1
      673: 1267:  state->hand[currentPlayer][handPos] = -1;
        -: 1268:	
        -: 1269:  //remove card from player's hand
      673: 1270:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1271:    {
        -: 1272:      //reduce number of cards in hand
       97: 1273:      state->handCount[currentPlayer]--;
       97: 1274:    }
      576: 1275:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1276:    {
        -: 1277:      //reduce number of cards in hand
       48: 1278:      state->handCount[currentPlayer]--;
       48: 1279:    }
        -: 1280:  else 	
        -: 1281:    {
        -: 1282:      //replace discarded card with last card in hand
      528: 1283:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1284:      //set last card to -1
      528: 1285:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1286:      //reduce number of cards in hand
      528: 1287:      state->handCount[currentPlayer]--;
        -: 1288:    }
        -: 1289:	
      673: 1290:  return 0;
        -: 1291:}
        -: 1292:
        -: 1293:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1294:{
        -: 1295:  //Note: supplyPos is enum of choosen card
        -: 1296:	
        -: 1297:  //check if supply pile is empty (0) or card is not used in game (-1)
     4224: 1298:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1299:    {
      578: 1300:      return -1;
        -: 1301:    }
        -: 1302:	
        -: 1303:  //added card for [whoseTurn] current player:
        -: 1304:  // toFlag = 0 : add to discard
        -: 1305:  // toFlag = 1 : add to deck
        -: 1306:  // toFlag = 2 : add to hand
        -: 1307:
     3646: 1308:  if (toFlag == 1)
        -: 1309:    {
     1428: 1310:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
     1428: 1311:      state->deckCount[player]++;
     1428: 1312:    }
     2218: 1313:  else if (toFlag == 2)
        -: 1314:    {
     1190: 1315:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
     1190: 1316:      state->handCount[player]++;
     1190: 1317:    }
        -: 1318:  else
        -: 1319:    {
     1028: 1320:      state->discard[player][ state->discardCount[player] ] = supplyPos;
     1028: 1321:      state->discardCount[player]++;
        -: 1322:    }
        -: 1323:	
        -: 1324:  //decrease number in supply pile
     3646: 1325:  state->supplyCount[supplyPos]--;
        -: 1326:	 
     3646: 1327:  return 0;
     4224: 1328:}
        -: 1329:
        -: 1330:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1331:{
        -: 1332:  int i;
        -: 1333:	
        -: 1334:  //reset coin count
     5847: 1335:  state->coins = 0;
        -: 1336:
        -: 1337:  //add coins for each Treasure card in player's hand
    68908: 1338:  for (i = 0; i < state->handCount[player]; i++)
        -: 1339:    {
    28607: 1340:      if (state->hand[player][i] == copper)
        -: 1341:	{
    22254: 1342:	  state->coins += 1;
    22254: 1343:	}
     6353: 1344:      else if (state->hand[player][i] == silver)
        -: 1345:	{
      433: 1346:	  state->coins += 2;
      433: 1347:	}
     5920: 1348:      else if (state->hand[player][i] == gold)
        -: 1349:	{
      353: 1350:	  state->coins += 3;
      353: 1351:	}	
    28607: 1352:    }	
        -: 1353:
        -: 1354:  //add bonus
     5847: 1355:  state->coins += bonus;
        -: 1356:
     5847: 1357:  return 0;
        -: 1358:}
        -: 1359:
        -: 1360:
        -: 1361://end of dominion.c
        -: 1362:
TESTING scoreTest():
Testing with handPos 0
HandCount for current player: 8, Expected: 8
test passed
Buys: 2, Expected: 2
test passed
HandCount for other player: 1, Expected: 1
test passed
Testing with handPos 1
HandCount for current player: 8, Expected: 8
test passed
Buys: 2, Expected: 2
test passed
HandCount for other player: 1, Expected: 1
test passed
Testing with handPos 2
HandCount for current player: 8, Expected: 8
test passed
Buys: 2, Expected: 2
test passed
HandCount for other player: 1, Expected: 1
test passed
Testing with handPos 3
HandCount for current player: 8, Expected: 8
test passed
Buys: 2, Expected: 2
test passed
HandCount for other player: 1, Expected: 1
test passed
Testing with handPos 4
HandCount for current player: 8, Expected: 8
test passed
Buys: 2, Expected: 2
test passed
HandCount for other player: 1, Expected: 1
test passed
All tests passed!
File 'dominion.c'
Lines executed:51.01% of 643
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:50
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
   153371:    9:  if (*(int*)a > *(int*)b)
      336:   10:    return 1;
   153035:   11:  if (*(int*)a < *(int*)b)
    54764:   12:    return -1;
    98271:   13:  return 0;
   153371:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     5438:   44:  SelectStream(1);
     5438:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
    10876:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     5438:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   119636:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
  1196360:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
  1033220:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
   543800:   65:        }
    54380:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     5438:   73:  if (numPlayers == 2)
        -:   74:    {
     5438:   75:      state->supplyCount[curse] = 10;
     5438:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     5438:   87:  if (numPlayers == 2)
        -:   88:    {
     5438:   89:      state->supplyCount[estate] = 8;
     5438:   90:      state->supplyCount[duchy] = 8;
     5438:   91:      state->supplyCount[province] = 8;
     5438:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     5438:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     5438:  102:  state->supplyCount[silver] = 40;
     5438:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   228396:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
  1794540:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
   842890:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
   103324:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    10874:  115:		  if (numPlayers == 2){ 
    10874:  116:		    state->supplyCount[i] = 8; 
    10874:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
    10874:  119:		}
        -:  120:	      else
        -:  121:		{
    43506:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    54380:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   788510:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
   788510:  130:	}
        -:  131:
   108760:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    32628:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
    10876:  140:      state->deckCount[i] = 0;
    87008:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    32628:  143:	  state->deck[i][j] = estate;
    32628:  144:	  state->deckCount[i]++;
    32628:  145:	}
   174016:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    76132:  148:	  state->deck[i][j] = copper;
    76132:  149:	  state->deckCount[i]++;		
    76132:  150:	}
    10876:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    32628:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
    10876:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
    10876:  160:    }
        -:  161:
        -:  162:  //draw player hands
    32628:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    10876:  166:      state->handCount[i] = 0;
    10876:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
    10876:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
   304528:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
   146826:  178:      state->embargoTokens[i] = 0;
   146826:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     5438:  182:  state->outpostPlayed = 0;
     5438:  183:  state->phase = 0;
     5438:  184:  state->numActions = 1;
     5438:  185:  state->numBuys = 1;
     5438:  186:  state->playedCardCount = 0;
     5438:  187:  state->whoseTurn = 0;
     5438:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    65256:  192:  for (it = 0; it < 5; it++){
    27190:  193:    drawCard(state->whoseTurn, state);
    27190:  194:  }
        -:  195:
     5438:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     5438:  198:  return 0;
     5438:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    22469:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    22469:  209:  if (state->deckCount[player] < 1)
    11558:  210:    return -1;
    10911:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   240302:  214:  while (state->deckCount[player] > 0) {
   109240:  215:    card = floor(Random() * state->deckCount[player]);
   109240:  216:    newDeck[newDeckPos] = state->deck[player][card];
   109240:  217:    newDeckPos++;
   765684:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   273602:  219:      state->deck[player][i] = state->deck[player][i+1];
   273602:  220:    }
   109240:  221:    state->deckCount[player]--;
        -:  222:  }
   240302:  223:  for (i = 0; i < newDeckPos; i++) {
   109240:  224:    state->deck[player][i] = newDeck[i];
   109240:  225:    state->deckCount[player]++;
   109240:  226:  }
        -:  227:
    10911:  228:  return 0;
    22469:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
       61:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       61:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
       61:  243:  if ( state->numActions < 1 )
        -:  244:    {
       36:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
       25:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
       32:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
       18:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
        7:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        7:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        7:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
        7:  269:  return 0;
       61:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
       73:  280:  who = state->whoseTurn;
        -:  281:
       73:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
       73:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
       73:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
       73:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
       73:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
       73:  299:    state->coins = (state->coins) - (getCost(supplyPos));
       73:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
       73:  308:  return 0;
       73:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
      536:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
     1128:  316:  int currentPlayer = whoseTurn(state);
     1128:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
     8111:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
      940:  326:  int count = 0;
        -:  327:
    14060:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
     7050:  330:      if (state->deck[player][i] == card) count++;
     6090:  331:    }
        -:  332:
    32872:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    18144:  335:      if (state->hand[player][i] == card) count++;
    15496:  336:    }
        -:  337:
    25400:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    13720:  340:      if (state->discard[player][i] == card) count++;
    11760:  341:    }
        -:  342:
      940:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
     1865:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
       77:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
      988:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
      417:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      417:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
      417:  359:  }
       77:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
       77:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
       39:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
       39:  365:  }
        -:  366:  else{
       38:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
       77:  370:  state->outpostPlayed = 0;
       77:  371:  state->phase = 0;
       77:  372:  state->numActions = 1;
       77:  373:  state->coins = 0;
       77:  374:  state->numBuys = 1;
       77:  375:  state->playedCardCount = 0;
       77:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
      924:  380:  for (k = 0; k < 5; k++){
      385:  381:    drawCard(state->whoseTurn, state);//Draw a card
      385:  382:  }
        -:  383:
        -:  384:  //Update money
       77:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
       77:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
      567:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
      202:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
      365:  401:  j = 0;
    18980:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
     9125:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
      576:  406:	  j++;
      576:  407:	}
     9125:  408:    }
      365:  409:  if ( j >= 3)
        -:  410:    {
       96:  411:      return 1;
        -:  412:    }
        -:  413:
      269:  414:  return 0;
      567:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
      184:  420:  int score = 0;
        -:  421:  //score from hand
     4708:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
     2546:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
     2515:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
     2518:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
     2523:  427:      if (state->hand[player][i] == province) { score = score + 6; };
     2526:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
     2530:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     2170:  430:    }
        -:  431:
        -:  432:  //score from discard
     2804:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
     1418:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
     1420:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
     1418:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
     1422:  438:      if (state->discard[player][i] == province) { score = score + 6; };
     1418:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
     1418:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     1218:  441:    }
        -:  442:
        -:  443:  //score from deck
     2804:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
     1418:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
     1421:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
     1418:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
     1420:  449:      if (state->deck[player][i] == province) { score = score + 6; };
     1418:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
     1418:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     1218:  452:    }
        -:  453:
      184:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    34294:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    13088:  533:    for (i = 0; i < state->discardCount[player];i++){
      480:  534:      state->deck[player][i] = state->discard[player][i];
      480:  535:      state->discard[player][i] = -1;
      480:  536:    }
        -:  537:
     6064:  538:    state->deckCount[player] = state->discardCount[player];
     6064:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     6064:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     6064:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     6064:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     6064:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     6064:  559:    if (deckCounter == 0)
     6029:  560:      return -1;
        -:  561:
       35:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       35:  563:    state->deckCount[player]--;
       35:  564:    state->handCount[player]++;//Increment hand count
       35:  565:  }
        -:  566:
        -:  567:  else{
    28230:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    28230:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    28230:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    28230:  576:    state->deckCount[player]--;
    28230:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    28265:  580:  return 0;
    34294:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
      146:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
       32:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
       70:  598:      return 3;
        -:  599:    case gold:
       28:  600:      return 6;
        -:  601:    case adventurer:
        8:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
        8:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
      146:  644:}
        -:  645:
        -:  646://smithy function to introduce a bug
        -:  647:int smithyfun(int currentPlayer, struct gameState *state, int handPos){
        -:  648:  //+3 Cards
        -:  649:  int i;
      528:  650:  for (i = 0; i <= 3; i++)
        -:  651:  {
      211:  652:    drawCard(currentPlayer, state);
      211:  653:  }
        -:  654:      
        -:  655:      //discard card from hand
       53:  656:      discardCard(handPos, currentPlayer, state, 0);
       53:  657:      return 0;
        -:  658:}
        -:  659:
        -:  660://adventurer function to introduce a bug
        -:  661:int adventurerfun(int currentPlayer, struct gameState *state){
        -:  662:    int cardDrawn;
        -:  663:    int temphand[MAX_HAND];
2291246309455167536:  664:    int drawntreasure = 0;
2291246309455167536:  665:    int z = 0;
        -:  666:
10104103169071347668:  667:  while(drawntreasure <= 2){
72057701412115936:  668:      if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
17981540015:  669:          shuffle(currentPlayer, state);
17981540015:  670:      }
7018965447127852775:  671:  drawCard(currentPlayer, state);
7018965447127852775:  672:  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
14469171020717093779:  673:  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    28349:  674:  drawntreasure++;
        -:  675:  else{
     5492:  676:  temphand[z]=cardDrawn;
     5492:  677:  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     5492:  678:  z++;
        -:  679:  }
        -:  680:}
        -:  681:    
    11124:  682:    while(z-1>=0){
     5492:  683:  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     5492:  684:      z=z-1;
        -:  685:    }
       70:  686:    return 0;
        -:  687:}
        -:  688:
        -:  689:int villagefun(int handPos, int currentPlayer, struct gameState *state){
        -:  690:        //+1 Card
        3:  691:        drawCard(currentPlayer, state);
        -:  692:        
        -:  693:        //+2 Actions
        3:  694:        state->numActions = state->numActions + 2;
        -:  695:        
        -:  696:        //discard played card from hand
        -:  697:        //discardCard(handPos, currentPlayer, state, 0);
        3:  698:        return 0;
        -:  699:}
        -:  700:
        -:  701:int great_hallfun(int currentPlayer, struct gameState *state, int handPos){
        -:  702:        //+1 Card
    #####:  703:        drawCard(currentPlayer, state);
        -:  704:        
        -:  705:        //+1 Actions
    #####:  706:        state->numActions++;
        -:  707:        
        -:  708:        //discard card from hand
    #####:  709:        discardCard(handPos, currentPlayer, state, 0);
    #####:  710:        return 0;
        -:  711:}
        -:  712:
        -:  713:int stewardfun(int choice1, int choice2, int choice3, int handPos, int currentPlayer, struct gameState *state){
        -:  714:
      120:  715:  if (choice1 == 1)
        -:  716:	{
        -:  717:	  //+2 cards
       40:  718:	  drawCard(currentPlayer, state);
       40:  719:	  drawCard(currentPlayer, state);
       40:  720:	}
       80:  721:      else if (choice2 == 2)
        -:  722:	{
        -:  723:	  //+2 coins
    #####:  724:	  state->coins = state->coins + 2;
    #####:  725:	}
        -:  726:      else
        -:  727:	{
        -:  728:	  //trash 2 cards in hand
       80:  729:	  discardCard(choice2, currentPlayer, state, 1);
       80:  730:	  discardCard(choice3, currentPlayer, state, 1);
        -:  731:	}
        -:  732:			
        -:  733:      //discard card from hand
      120:  734:      discardCard(handPos, currentPlayer, state, 0);
      120:  735:      return 0;
        -:  736:}
        -:  737:
        -:  738:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  739:{
        -:  740:  int i;
        -:  741:  int j;
        -:  742:  int k;
        -:  743:  int x;
        -:  744:  int index;
       47:  745:  int currentPlayer = whoseTurn(state);
       47:  746:  int nextPlayer = currentPlayer + 1;
        -:  747:
       47:  748:  int tributeRevealedCards[2] = {-1, -1};
        -:  749:  int temphand[MAX_HAND];// moved above the if statement
       47:  750:  if (nextPlayer > (state->numPlayers - 1)){
        4:  751:    nextPlayer = 0;
        4:  752:  }
        -:  753:  
        -:  754:	
        -:  755:  //uses switch to select card and perform actions
       57:  756:  switch( card ) 
        -:  757:    {
        -:  758:    case adventurer:
        4:  759:      adventurerfun(currentPlayer, state);
        -:  760:			
        -:  761:    case council_room:
        -:  762:      //+4 Cards
      440:  763:      for (i = 0; i < 4; i++)
        -:  764:	{
      176:  765:	  drawCard(currentPlayer, state);
      176:  766:	}
        -:  767:			
        -:  768:      //+1 Buy
       44:  769:      state->numBuys++;
        -:  770:			
        -:  771:      //Each other player draws a card
      264:  772:      for (i = 0; i < state->numPlayers; i++)
        -:  773:	{
       88:  774:	  if ( i != currentPlayer )
        -:  775:	    {
       44:  776:	      drawCard(i, state);
       44:  777:	    }
       88:  778:	}
        -:  779:			
        -:  780:      //put played card in played card pile
       44:  781:      discardCard(handPos, currentPlayer, state, 0);
        -:  782:			
       44:  783:      return 0;
        -:  784:			
        -:  785:    case feast:
        -:  786:      //gain card with cost up to 5
        -:  787:      //Backup hand
    #####:  788:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  789:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  790:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  791:      }
        -:  792:      //Backup hand
        -:  793:
        -:  794:      //Update Coins for Buy
    #####:  795:      updateCoins(currentPlayer, state, 5);
    #####:  796:      x = 1;//Condition to loop on
    #####:  797:      while( x == 1) {//Buy one card
    #####:  798:	if (supplyCount(choice1, state) <= 0){
        -:  799:	  if (DEBUG)
        -:  800:	    printf("None of that card left, sorry!\n");
        -:  801:
        -:  802:	  if (DEBUG){
        -:  803:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  804:	  }
    #####:  805:	}
    #####:  806:	else if (state->coins < getCost(choice1)){
    #####:  807:	  printf("That card is too expensive!\n");
        -:  808:
        -:  809:	  if (DEBUG){
        -:  810:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  811:	  }
    #####:  812:	}
        -:  813:	else{
        -:  814:
        -:  815:	  if (DEBUG){
        -:  816:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  817:	  }
        -:  818:
    #####:  819:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  820:	  x = 0;//No more buying cards
        -:  821:
        -:  822:	  if (DEBUG){
        -:  823:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  824:	  }
        -:  825:
        -:  826:	}
        -:  827:      }     
        -:  828:
        -:  829:      //Reset Hand
    #####:  830:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  831:	state->hand[currentPlayer][i] = temphand[i];
    #####:  832:	temphand[i] = -1;
    #####:  833:      }
        -:  834:      //Reset Hand
        -:  835:      			
    #####:  836:      return 0;
        -:  837:			
        -:  838:    case gardens:
    #####:  839:      return -1;
        -:  840:			
        -:  841:    case mine:
    #####:  842:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  843:
    #####:  844:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  845:	{
    #####:  846:	  return -1;
        -:  847:	}
        -:  848:		
    #####:  849:      if (choice2 > treasure_map || choice2 < curse)
        -:  850:	{
    #####:  851:	  return -1;
        -:  852:	}
        -:  853:
    #####:  854:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  855:	{
    #####:  856:	  return -1;
        -:  857:	}
        -:  858:
    #####:  859:      gainCard(choice2, state, 2, currentPlayer);
        -:  860:
        -:  861:      //discard card from hand
    #####:  862:      discardCard(handPos, currentPlayer, state, 0);
        -:  863:
        -:  864:      //discard trashed card
    #####:  865:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  866:	{
    #####:  867:	  if (state->hand[currentPlayer][i] == j)
        -:  868:	    {
    #####:  869:	      discardCard(i, currentPlayer, state, 0);			
    #####:  870:	      break;
        -:  871:	    }
    #####:  872:	}
        -:  873:			
    #####:  874:      return 0;
        -:  875:			
        -:  876:    case remodel:
    #####:  877:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  878:
    #####:  879:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  880:	{
    #####:  881:	  return -1;
        -:  882:	}
        -:  883:
    #####:  884:      gainCard(choice2, state, 0, currentPlayer);
        -:  885:
        -:  886:      //discard card from hand
    #####:  887:      discardCard(handPos, currentPlayer, state, 0);
        -:  888:
        -:  889:      //discard trashed card
    #####:  890:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  891:	{
    #####:  892:	  if (state->hand[currentPlayer][i] == j)
        -:  893:	    {
    #####:  894:	      discardCard(i, currentPlayer, state, 0);			
    #####:  895:	      break;
        -:  896:	    }
    #####:  897:	}
        -:  898:
        -:  899:
    #####:  900:      return 0;
        -:  901:		
        -:  902:    case smithy:
        -:  903:      //+3 Cards
        3:  904:      smithyfun(currentPlayer, state, handPos);
        -:  905:
        -:  906:    case village:
        3:  907:      villagefun(handPos, currentPlayer, state);
        -:  908:		
        -:  909:    case baron:
        3:  910:      state->numBuys++;//Increase buys by 1!
        3:  911:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  912:	int p = 0;//Iterator for hand!
    #####:  913:	int card_not_discarded = 1;//Flag for discard set!
    #####:  914:	while(card_not_discarded){
    #####:  915:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  916:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  917:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  918:	    state->discardCount[currentPlayer]++;
    #####:  919:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  920:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  921:	    }
    #####:  922:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  923:	    state->handCount[currentPlayer]--;
    #####:  924:	    card_not_discarded = 0;//Exit the loop
    #####:  925:	  }
    #####:  926:	  else if (p > state->handCount[currentPlayer]){
        -:  927:	    if(DEBUG) {
        -:  928:	      printf("No estate cards in your hand, invalid choice\n");
        -:  929:	      printf("Must gain an estate if there are any\n");
        -:  930:	    }
    #####:  931:	    if (supplyCount(estate, state) > 0){
    #####:  932:	      gainCard(estate, state, 0, currentPlayer);
    #####:  933:	      state->supplyCount[estate]--;//Decrement estates
    #####:  934:	      if (supplyCount(estate, state) == 0){
    #####:  935:		isGameOver(state);
    #####:  936:	      }
    #####:  937:	    }
    #####:  938:	    card_not_discarded = 0;//Exit the loop
    #####:  939:	  }
        -:  940:			    
        -:  941:	  else{
    #####:  942:	    p++;//Next card
        -:  943:	  }
        -:  944:	}
    #####:  945:      }
        -:  946:			    
        -:  947:      else{
        3:  948:	if (supplyCount(estate, state) > 0){
        3:  949:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
        3:  950:	  state->supplyCount[estate]--;//Decrement Estates
        3:  951:	  if (supplyCount(estate, state) == 0){
    #####:  952:	    isGameOver(state);
    #####:  953:	  }
        3:  954:	}
        -:  955:      }
        -:  956:	    
        -:  957:      
        3:  958:      return 0;
        -:  959:		
        -:  960:    case great_hall:
    #####:  961:      great_hallfun(currentPlayer, state, handPos);
        -:  962:		
        -:  963:    case minion:
        -:  964:      //+1 action
    #####:  965:      state->numActions++;
        -:  966:			
        -:  967:      //discard card from hand
    #####:  968:      discardCard(handPos, currentPlayer, state, 0);
        -:  969:			
    #####:  970:      if (choice1)		//+2 coins
        -:  971:	{
    #####:  972:	  state->coins = state->coins + 2;
    #####:  973:	}
        -:  974:			
    #####:  975:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  976:	{
        -:  977:	  //discard hand
    #####:  978:	  while(numHandCards(state) > 0)
        -:  979:	    {
    #####:  980:	      discardCard(handPos, currentPlayer, state, 0);
        -:  981:	    }
        -:  982:				
        -:  983:	  //draw 4
    #####:  984:	  for (i = 0; i < 4; i++)
        -:  985:	    {
    #####:  986:	      drawCard(currentPlayer, state);
    #####:  987:	    }
        -:  988:				
        -:  989:	  //other players discard hand and redraw if hand size > 4
    #####:  990:	  for (i = 0; i < state->numPlayers; i++)
        -:  991:	    {
    #####:  992:	      if (i != currentPlayer)
        -:  993:		{
    #####:  994:		  if ( state->handCount[i] > 4 )
        -:  995:		    {
        -:  996:		      //discard hand
    #####:  997:		      while( state->handCount[i] > 0 )
        -:  998:			{
    #####:  999:			  discardCard(handPos, i, state, 0);
        -: 1000:			}
        -: 1001:							
        -: 1002:		      //draw 4
    #####: 1003:		      for (j = 0; j < 4; j++)
        -: 1004:			{
    #####: 1005:			  drawCard(i, state);
    #####: 1006:			}
    #####: 1007:		    }
    #####: 1008:		}
    #####: 1009:	    }
        -: 1010:				
    #####: 1011:	}
    #####: 1012:      return 0;
        -: 1013:		
        -: 1014:    case steward:
    #####: 1015:      stewardfun(choice1, choice2, choice3, handPos, currentPlayer, state);
        -: 1016:
        -: 1017:		
        -: 1018:    case tribute:
    #####: 1019:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1020:	if (state->deckCount[nextPlayer] > 0){
    #####: 1021:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1022:	  state->deckCount[nextPlayer]--;
    #####: 1023:	}
    #####: 1024:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1025:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1026:	  state->discardCount[nextPlayer]--;
    #####: 1027:	}
        -: 1028:	else{
        -: 1029:	  //No Card to Reveal
        -: 1030:	  if (DEBUG){
        -: 1031:	    printf("No cards to reveal\n");
        -: 1032:	  }
        -: 1033:	}
    #####: 1034:      }
        -: 1035:	    
        -: 1036:      else{
    #####: 1037:	if (state->deckCount[nextPlayer] == 0){
    #####: 1038:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1039:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1040:	    state->deckCount[nextPlayer]++;
    #####: 1041:	    state->discard[nextPlayer][i] = -1;
    #####: 1042:	    state->discardCount[nextPlayer]--;
    #####: 1043:	  }
        -: 1044:			    
    #####: 1045:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1046:	} 
    #####: 1047:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1048:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1049:	state->deckCount[nextPlayer]--;
    #####: 1050:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1051:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1052:	state->deckCount[nextPlayer]--;
        -: 1053:      }    
        -: 1054:		       
    #####: 1055:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1056:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1057:	state->playedCardCount++;
    #####: 1058:	tributeRevealedCards[1] = -1;
    #####: 1059:      }
        -: 1060:
    #####: 1061:      for (i = 0; i <= 2; i ++){
    #####: 1062:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1063:	  state->coins += 2;
    #####: 1064:	}
        -: 1065:		    
    #####: 1066:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1067:	  drawCard(currentPlayer, state);
    #####: 1068:	  drawCard(currentPlayer, state);
    #####: 1069:	}
        -: 1070:	else{//Action Card
    #####: 1071:	  state->numActions = state->numActions + 2;
        -: 1072:	}
    #####: 1073:      }
        -: 1074:	    
    #####: 1075:      return 0;
        -: 1076:		
        -: 1077:    case ambassador:
    #####: 1078:      j = 0;		//used to check if player has enough cards to discard
        -: 1079:
    #####: 1080:      if (choice2 > 2 || choice2 < 0)
        -: 1081:	{
    #####: 1082:	  return -1;				
        -: 1083:	}
        -: 1084:
    #####: 1085:      if (choice1 == handPos)
        -: 1086:	{
    #####: 1087:	  return -1;
        -: 1088:	}
        -: 1089:
    #####: 1090:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1091:	{
    #####: 1092:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1093:	    {
    #####: 1094:	      j++;
    #####: 1095:	    }
    #####: 1096:	}
    #####: 1097:      if (j < choice2)
        -: 1098:	{
    #####: 1099:	  return -1;				
        -: 1100:	}
        -: 1101:
        -: 1102:      if (DEBUG) 
        -: 1103:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1104:
        -: 1105:      //increase supply count for choosen card by amount being discarded
    #####: 1106:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1107:			
        -: 1108:      //each other player gains a copy of revealed card
    #####: 1109:      for (i = 0; i < state->numPlayers; i++)
        -: 1110:	{
    #####: 1111:	  if (i != currentPlayer)
        -: 1112:	    {
    #####: 1113:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1114:	    }
    #####: 1115:	}
        -: 1116:
        -: 1117:      //discard played card from hand
    #####: 1118:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1119:
        -: 1120:      //trash copies of cards returned to supply
    #####: 1121:      for (j = 0; j < choice2; j++)
        -: 1122:	{
    #####: 1123:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1124:	    {
    #####: 1125:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1126:		{
    #####: 1127:		  discardCard(i, currentPlayer, state, 1);
    #####: 1128:		  break;
        -: 1129:		}
    #####: 1130:	    }
    #####: 1131:	}			
        -: 1132:
    #####: 1133:      return 0;
        -: 1134:		
        -: 1135:    case cutpurse:
        -: 1136:
    #####: 1137:      updateCoins(currentPlayer, state, 2);
    #####: 1138:      for (i = 0; i < state->numPlayers; i++)
        -: 1139:	{
    #####: 1140:	  if (i != currentPlayer)
        -: 1141:	    {
    #####: 1142:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1143:		{
    #####: 1144:		  if (state->hand[i][j] == copper)
        -: 1145:		    {
    #####: 1146:		      discardCard(j, i, state, 0);
    #####: 1147:		      break;
        -: 1148:		    }
    #####: 1149:		  if (j == state->handCount[i])
        -: 1150:		    {
    #####: 1151:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1152:			{
        -: 1153:			  if (DEBUG)
        -: 1154:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1155:			}	
    #####: 1156:		      break;
        -: 1157:		    }		
    #####: 1158:		}
        -: 1159:					
    #####: 1160:	    }
        -: 1161:				
    #####: 1162:	}				
        -: 1163:
        -: 1164:      //discard played card from hand
    #####: 1165:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1166:
    #####: 1167:      return 0;
        -: 1168:
        -: 1169:		
        -: 1170:    case embargo: 
        -: 1171:      //+2 Coins
    #####: 1172:      state->coins = state->coins + 2;
        -: 1173:			
        -: 1174:      //see if selected pile is in play
    #####: 1175:      if ( state->supplyCount[choice1] == -1 )
        -: 1176:	{
    #####: 1177:	  return -1;
        -: 1178:	}
        -: 1179:			
        -: 1180:      //add embargo token to selected supply pile
    #####: 1181:      state->embargoTokens[choice1]++;
        -: 1182:			
        -: 1183:      //trash card
    #####: 1184:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1185:      return 0;
        -: 1186:		
        -: 1187:    case outpost:
        -: 1188:      //set outpost flag
    #####: 1189:      state->outpostPlayed++;
        -: 1190:			
        -: 1191:      //discard card
    #####: 1192:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1193:      return 0;
        -: 1194:		
        -: 1195:    case salvager:
        -: 1196:      //+1 buy
    #####: 1197:      state->numBuys++;
        -: 1198:			
    #####: 1199:      if (choice1)
        -: 1200:	{
        -: 1201:	  //gain coins equal to trashed card
    #####: 1202:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1203:	  //trash card
    #####: 1204:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1205:	}
        -: 1206:			
        -: 1207:      //discard card
    #####: 1208:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1209:      return 0;
        -: 1210:		
        -: 1211:    case sea_hag:
    #####: 1212:      for (i = 0; i < state->numPlayers; i++){
    #####: 1213:	if (i != currentPlayer){
    #####: 1214:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1215:	  state->discardCount[i]++;
    #####: 1216:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1217:	}
    #####: 1218:      }
    #####: 1219:      return 0;
        -: 1220:		
        -: 1221:    case treasure_map:
        -: 1222:      //search hand for another treasure_map
    #####: 1223:      index = -1;
    #####: 1224:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1225:	{
    #####: 1226:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1227:	    {
    #####: 1228:	      index = i;
    #####: 1229:	      break;
        -: 1230:	    }
    #####: 1231:	}
    #####: 1232:      if (index > -1)
        -: 1233:	{
        -: 1234:	  //trash both treasure cards
    #####: 1235:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1236:	  discardCard(index, currentPlayer, state, 1);
        -: 1237:
        -: 1238:	  //gain 4 Gold cards
    #####: 1239:	  for (i = 0; i < 4; i++)
        -: 1240:	    {
    #####: 1241:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1242:	    }
        -: 1243:				
        -: 1244:	  //return success
    #####: 1245:	  return 1;
        -: 1246:	}
        -: 1247:			
        -: 1248:      //no second treasure_map found in hand
    #####: 1249:      return -1;
        -: 1250:    }
        -: 1251:	
    #####: 1252:  return -1;
       47: 1253:}
        -: 1254:
        -: 1255:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1256:{
        -: 1257:	
        -: 1258:  //if card is not trashed, added to Played pile 
      678: 1259:  if (trashFlag < 1)
        -: 1260:    {
        -: 1261:      //add card to played pile
      368: 1262:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      368: 1263:      state->playedCardCount++;
      368: 1264:    }
        -: 1265:	
        -: 1266:  //set played card to -1
      678: 1267:  state->hand[currentPlayer][handPos] = -1;
        -: 1268:	
        -: 1269:  //remove card from player's hand
      678: 1270:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1271:    {
        -: 1272:      //reduce number of cards in hand
       97: 1273:      state->handCount[currentPlayer]--;
       97: 1274:    }
      581: 1275:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1276:    {
        -: 1277:      //reduce number of cards in hand
       48: 1278:      state->handCount[currentPlayer]--;
       48: 1279:    }
        -: 1280:  else 	
        -: 1281:    {
        -: 1282:      //replace discarded card with last card in hand
      533: 1283:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1284:      //set last card to -1
      533: 1285:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1286:      //reduce number of cards in hand
      533: 1287:      state->handCount[currentPlayer]--;
        -: 1288:    }
        -: 1289:	
      678: 1290:  return 0;
        -: 1291:}
        -: 1292:
        -: 1293:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1294:{
        -: 1295:  //Note: supplyPos is enum of choosen card
        -: 1296:	
        -: 1297:  //check if supply pile is empty (0) or card is not used in game (-1)
     4224: 1298:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1299:    {
      578: 1300:      return -1;
        -: 1301:    }
        -: 1302:	
        -: 1303:  //added card for [whoseTurn] current player:
        -: 1304:  // toFlag = 0 : add to discard
        -: 1305:  // toFlag = 1 : add to deck
        -: 1306:  // toFlag = 2 : add to hand
        -: 1307:
     3646: 1308:  if (toFlag == 1)
        -: 1309:    {
     1428: 1310:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
     1428: 1311:      state->deckCount[player]++;
     1428: 1312:    }
     2218: 1313:  else if (toFlag == 2)
        -: 1314:    {
     1190: 1315:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
     1190: 1316:      state->handCount[player]++;
     1190: 1317:    }
        -: 1318:  else
        -: 1319:    {
     1028: 1320:      state->discard[player][ state->discardCount[player] ] = supplyPos;
     1028: 1321:      state->discardCount[player]++;
        -: 1322:    }
        -: 1323:	
        -: 1324:  //decrease number in supply pile
     3646: 1325:  state->supplyCount[supplyPos]--;
        -: 1326:	 
     3646: 1327:  return 0;
     4224: 1328:}
        -: 1329:
        -: 1330:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1331:{
        -: 1332:  int i;
        -: 1333:	
        -: 1334:  //reset coin count
     5852: 1335:  state->coins = 0;
        -: 1336:
        -: 1337:  //add coins for each Treasure card in player's hand
    68968: 1338:  for (i = 0; i < state->handCount[player]; i++)
        -: 1339:    {
    28632: 1340:      if (state->hand[player][i] == copper)
        -: 1341:	{
    22274: 1342:	  state->coins += 1;
    22274: 1343:	}
     6358: 1344:      else if (state->hand[player][i] == silver)
        -: 1345:	{
      433: 1346:	  state->coins += 2;
      433: 1347:	}
     5925: 1348:      else if (state->hand[player][i] == gold)
        -: 1349:	{
      353: 1350:	  state->coins += 3;
      353: 1351:	}	
    28632: 1352:    }	
        -: 1353:
        -: 1354:  //add bonus
     5852: 1355:  state->coins += bonus;
        -: 1356:
     5852: 1357:  return 0;
        -: 1358:}
        -: 1359:
        -: 1360:
        -: 1361://end of dominion.c
        -: 1362:
TESTING scoreTest():
Testing with handcount: 0, discardcount: 0, deckCount: 0, and 0 of each card
Score: 0, Expected: 0
test passed
Testing with handcount: 0, discardcount: 0, deckCount: 0, and 0 of each card
Score: 0, Expected: 0
test passed
Testing with handcount: 0, discardcount: 0, deckCount: 0, and 0 of each card
Score: 0, Expected: 0
test passed
Testing with handcount: 6, discardcount: 0, deckCount: 0, and 1 of each card
Score: 10, Expected: 10
test passed
Testing with handcount: 6, discardcount: 6, deckCount: 0, and 1 of each card
Score: 30, Expected: 20
test FAILED
Testing with handcount: 6, discardcount: 6, deckCount: 6, and 1 of each card
Score: 30, Expected: 30
test passed
Testing with handcount: 12, discardcount: 0, deckCount: 0, and 2 of each card
Score: 20, Expected: 20
test passed
Testing with handcount: 12, discardcount: 12, deckCount: 0, and 2 of each card
Score: 60, Expected: 40
test FAILED
Testing with handcount: 12, discardcount: 12, deckCount: 12, and 2 of each card
Score: 60, Expected: 60
test passed
Testing with handcount: 18, discardcount: 0, deckCount: 0, and 3 of each card
Score: 30, Expected: 30
test passed
Testing with handcount: 18, discardcount: 18, deckCount: 0, and 3 of each card
Score: 90, Expected: 60
test FAILED
Testing with handcount: 18, discardcount: 18, deckCount: 18, and 3 of each card
Score: 90, Expected: 90
test passed
Testing with handcount: 24, discardcount: 0, deckCount: 0, and 4 of each card
Score: 40, Expected: 40
test passed
Testing with handcount: 24, discardcount: 24, deckCount: 0, and 4 of each card
Score: 120, Expected: 80
test FAILED
Testing with handcount: 24, discardcount: 24, deckCount: 24, and 4 of each card
Score: 132, Expected: 120
test FAILED
Testing with handcount: 0, discardcount: 0, deckCount: 0, and 0 of each card
Score: 0, Expected: 0
test passed
Testing with handcount: 0, discardcount: 0, deckCount: 0, and 0 of each card
Score: 0, Expected: 0
test passed
Testing with handcount: 0, discardcount: 0, deckCount: 0, and 0 of each card
Score: 0, Expected: 0
test passed
Testing with handcount: 6, discardcount: 0, deckCount: 0, and 1 of each card
Score: 10, Expected: 10
test passed
Testing with handcount: 6, discardcount: 6, deckCount: 0, and 1 of each card
Score: 30, Expected: 20
test FAILED
Testing with handcount: 6, discardcount: 6, deckCount: 6, and 1 of each card
Score: 30, Expected: 30
test passed
Testing with handcount: 12, discardcount: 0, deckCount: 0, and 2 of each card
Score: 20, Expected: 20
test passed
Testing with handcount: 12, discardcount: 12, deckCount: 0, and 2 of each card
Score: 60, Expected: 40
test FAILED
Testing with handcount: 12, discardcount: 12, deckCount: 12, and 2 of each card
Score: 60, Expected: 60
test passed
Testing with handcount: 18, discardcount: 0, deckCount: 0, and 3 of each card
Score: 30, Expected: 30
test passed
Testing with handcount: 18, discardcount: 18, deckCount: 0, and 3 of each card
Score: 90, Expected: 60
test FAILED
Testing with handcount: 18, discardcount: 18, deckCount: 18, and 3 of each card
Score: 90, Expected: 90
test passed
Testing with handcount: 24, discardcount: 0, deckCount: 0, and 4 of each card
Score: 40, Expected: 40
test passed
Testing with handcount: 24, discardcount: 24, deckCount: 0, and 4 of each card
Score: 120, Expected: 80
test FAILED
Testing with handcount: 24, discardcount: 24, deckCount: 24, and 4 of each card
Score: 132, Expected: 120
test FAILED
Tests failed.
File 'dominion.c'
Lines executed:51.01% of 643
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:51
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
   153427:    9:  if (*(int*)a > *(int*)b)
      336:   10:    return 1;
   153091:   11:  if (*(int*)a < *(int*)b)
    54784:   12:    return -1;
    98307:   13:  return 0;
   153427:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     5440:   44:  SelectStream(1);
     5440:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
    10880:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     5440:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   119680:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
  1196800:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
  1033600:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
   544000:   65:        }
    54400:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     5440:   73:  if (numPlayers == 2)
        -:   74:    {
     5440:   75:      state->supplyCount[curse] = 10;
     5440:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     5440:   87:  if (numPlayers == 2)
        -:   88:    {
     5440:   89:      state->supplyCount[estate] = 8;
     5440:   90:      state->supplyCount[duchy] = 8;
     5440:   91:      state->supplyCount[province] = 8;
     5440:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     5440:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     5440:  102:  state->supplyCount[silver] = 40;
     5440:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   228480:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
  1795200:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
   843200:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
   103362:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    10878:  115:		  if (numPlayers == 2){ 
    10878:  116:		    state->supplyCount[i] = 8; 
    10878:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
    10878:  119:		}
        -:  120:	      else
        -:  121:		{
    43522:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    54400:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   788800:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
   788800:  130:	}
        -:  131:
   108800:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    32640:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
    10880:  140:      state->deckCount[i] = 0;
    87040:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    32640:  143:	  state->deck[i][j] = estate;
    32640:  144:	  state->deckCount[i]++;
    32640:  145:	}
   174080:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    76160:  148:	  state->deck[i][j] = copper;
    76160:  149:	  state->deckCount[i]++;		
    76160:  150:	}
    10880:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    32640:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
    10880:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
    10880:  160:    }
        -:  161:
        -:  162:  //draw player hands
    32640:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    10880:  166:      state->handCount[i] = 0;
    10880:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
    10880:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
   304640:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
   146880:  178:      state->embargoTokens[i] = 0;
   146880:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     5440:  182:  state->outpostPlayed = 0;
     5440:  183:  state->phase = 0;
     5440:  184:  state->numActions = 1;
     5440:  185:  state->numBuys = 1;
     5440:  186:  state->playedCardCount = 0;
     5440:  187:  state->whoseTurn = 0;
     5440:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    65280:  192:  for (it = 0; it < 5; it++){
    27200:  193:    drawCard(state->whoseTurn, state);
    27200:  194:  }
        -:  195:
     5440:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     5440:  198:  return 0;
     5440:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    22473:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    22473:  209:  if (state->deckCount[player] < 1)
    11558:  210:    return -1;
    10915:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   240390:  214:  while (state->deckCount[player] > 0) {
   109280:  215:    card = floor(Random() * state->deckCount[player]);
   109280:  216:    newDeck[newDeckPos] = state->deck[player][card];
   109280:  217:    newDeckPos++;
   765964:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   273702:  219:      state->deck[player][i] = state->deck[player][i+1];
   273702:  220:    }
   109280:  221:    state->deckCount[player]--;
        -:  222:  }
   240390:  223:  for (i = 0; i < newDeckPos; i++) {
   109280:  224:    state->deck[player][i] = newDeck[i];
   109280:  225:    state->deckCount[player]++;
   109280:  226:  }
        -:  227:
    10915:  228:  return 0;
    22473:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
       61:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       61:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
       61:  243:  if ( state->numActions < 1 )
        -:  244:    {
       36:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
       25:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
       32:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
       18:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
        7:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        7:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        7:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
        7:  269:  return 0;
       61:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
       73:  280:  who = state->whoseTurn;
        -:  281:
       73:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
       73:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
       73:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
       73:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
       73:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
       73:  299:    state->coins = (state->coins) - (getCost(supplyPos));
       73:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
       73:  308:  return 0;
       73:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
      536:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
     1128:  316:  int currentPlayer = whoseTurn(state);
     1128:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
     8111:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
     1110:  326:  int count = 0;
        -:  327:
    16734:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
     8409:  330:      if (state->deck[player][i] == card) count++;
     7257:  331:    }
        -:  332:
    38886:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    21454:  335:      if (state->hand[player][i] == card) count++;
    18333:  336:    }
        -:  337:
    30444:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    16464:  340:      if (state->discard[player][i] == card) count++;
    14112:  341:    }
        -:  342:
     1110:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
     1865:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
       77:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
      988:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
      417:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      417:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
      417:  359:  }
       77:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
       77:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
       39:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
       39:  365:  }
        -:  366:  else{
       38:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
       77:  370:  state->outpostPlayed = 0;
       77:  371:  state->phase = 0;
       77:  372:  state->numActions = 1;
       77:  373:  state->coins = 0;
       77:  374:  state->numBuys = 1;
       77:  375:  state->playedCardCount = 0;
       77:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
      924:  380:  for (k = 0; k < 5; k++){
      385:  381:    drawCard(state->whoseTurn, state);//Draw a card
      385:  382:  }
        -:  383:
        -:  384:  //Update money
       77:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
       77:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
      567:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
      202:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
      365:  401:  j = 0;
    18980:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
     9125:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
      576:  406:	  j++;
      576:  407:	}
     9125:  408:    }
      365:  409:  if ( j >= 3)
        -:  410:    {
       96:  411:      return 1;
        -:  412:    }
        -:  413:
      269:  414:  return 0;
      567:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
      214:  420:  int score = 0;
        -:  421:  //score from hand
     5488:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
     2966:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
     2935:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
     2938:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
     2943:  427:      if (state->hand[player][i] == province) { score = score + 6; };
     2946:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
     2950:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     2530:  430:    }
        -:  431:
        -:  432:  //score from discard
     3344:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
     1698:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
     1700:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
     1698:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
     1702:  438:      if (state->discard[player][i] == province) { score = score + 6; };
     1698:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
     1698:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     1458:  441:    }
        -:  442:
        -:  443:  //score from deck
     3344:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
     1698:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
     1701:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
     1698:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
     1700:  449:      if (state->deck[player][i] == province) { score = score + 6; };
     1698:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
     1698:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     1458:  452:    }
        -:  453:
      214:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    34304:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    13088:  533:    for (i = 0; i < state->discardCount[player];i++){
      480:  534:      state->deck[player][i] = state->discard[player][i];
      480:  535:      state->discard[player][i] = -1;
      480:  536:    }
        -:  537:
     6064:  538:    state->deckCount[player] = state->discardCount[player];
     6064:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     6064:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     6064:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     6064:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     6064:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     6064:  559:    if (deckCounter == 0)
     6029:  560:      return -1;
        -:  561:
       35:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       35:  563:    state->deckCount[player]--;
       35:  564:    state->handCount[player]++;//Increment hand count
       35:  565:  }
        -:  566:
        -:  567:  else{
    28240:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    28240:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    28240:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    28240:  576:    state->deckCount[player]--;
    28240:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    28275:  580:  return 0;
    34304:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
      146:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
       32:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
       70:  598:      return 3;
        -:  599:    case gold:
       28:  600:      return 6;
        -:  601:    case adventurer:
        8:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
        8:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
      146:  644:}
        -:  645:
        -:  646://smithy function to introduce a bug
        -:  647:int smithyfun(int currentPlayer, struct gameState *state, int handPos){
        -:  648:  //+3 Cards
        -:  649:  int i;
      528:  650:  for (i = 0; i <= 3; i++)
        -:  651:  {
      211:  652:    drawCard(currentPlayer, state);
      211:  653:  }
        -:  654:      
        -:  655:      //discard card from hand
       53:  656:      discardCard(handPos, currentPlayer, state, 0);
       53:  657:      return 0;
        -:  658:}
        -:  659:
        -:  660://adventurer function to introduce a bug
        -:  661:int adventurerfun(int currentPlayer, struct gameState *state){
        -:  662:    int cardDrawn;
        -:  663:    int temphand[MAX_HAND];
2291246309455167536:  664:    int drawntreasure = 0;
2291246309455167536:  665:    int z = 0;
        -:  666:
10104103169071347668:  667:  while(drawntreasure <= 2){
72057701412115936:  668:      if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
17981540015:  669:          shuffle(currentPlayer, state);
17981540015:  670:      }
7018965447127852775:  671:  drawCard(currentPlayer, state);
7018965447127852775:  672:  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
14469171020717093779:  673:  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    28349:  674:  drawntreasure++;
        -:  675:  else{
     5492:  676:  temphand[z]=cardDrawn;
     5492:  677:  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     5492:  678:  z++;
        -:  679:  }
        -:  680:}
        -:  681:    
    11124:  682:    while(z-1>=0){
     5492:  683:  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     5492:  684:      z=z-1;
        -:  685:    }
       70:  686:    return 0;
        -:  687:}
        -:  688:
        -:  689:int villagefun(int handPos, int currentPlayer, struct gameState *state){
        -:  690:        //+1 Card
        3:  691:        drawCard(currentPlayer, state);
        -:  692:        
        -:  693:        //+2 Actions
        3:  694:        state->numActions = state->numActions + 2;
        -:  695:        
        -:  696:        //discard played card from hand
        -:  697:        //discardCard(handPos, currentPlayer, state, 0);
        3:  698:        return 0;
        -:  699:}
        -:  700:
        -:  701:int great_hallfun(int currentPlayer, struct gameState *state, int handPos){
        -:  702:        //+1 Card
    #####:  703:        drawCard(currentPlayer, state);
        -:  704:        
        -:  705:        //+1 Actions
    #####:  706:        state->numActions++;
        -:  707:        
        -:  708:        //discard card from hand
    #####:  709:        discardCard(handPos, currentPlayer, state, 0);
    #####:  710:        return 0;
        -:  711:}
        -:  712:
        -:  713:int stewardfun(int choice1, int choice2, int choice3, int handPos, int currentPlayer, struct gameState *state){
        -:  714:
      120:  715:  if (choice1 == 1)
        -:  716:	{
        -:  717:	  //+2 cards
       40:  718:	  drawCard(currentPlayer, state);
       40:  719:	  drawCard(currentPlayer, state);
       40:  720:	}
       80:  721:      else if (choice2 == 2)
        -:  722:	{
        -:  723:	  //+2 coins
    #####:  724:	  state->coins = state->coins + 2;
    #####:  725:	}
        -:  726:      else
        -:  727:	{
        -:  728:	  //trash 2 cards in hand
       80:  729:	  discardCard(choice2, currentPlayer, state, 1);
       80:  730:	  discardCard(choice3, currentPlayer, state, 1);
        -:  731:	}
        -:  732:			
        -:  733:      //discard card from hand
      120:  734:      discardCard(handPos, currentPlayer, state, 0);
      120:  735:      return 0;
        -:  736:}
        -:  737:
        -:  738:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  739:{
        -:  740:  int i;
        -:  741:  int j;
        -:  742:  int k;
        -:  743:  int x;
        -:  744:  int index;
       47:  745:  int currentPlayer = whoseTurn(state);
       47:  746:  int nextPlayer = currentPlayer + 1;
        -:  747:
       47:  748:  int tributeRevealedCards[2] = {-1, -1};
        -:  749:  int temphand[MAX_HAND];// moved above the if statement
       47:  750:  if (nextPlayer > (state->numPlayers - 1)){
        4:  751:    nextPlayer = 0;
        4:  752:  }
        -:  753:  
        -:  754:	
        -:  755:  //uses switch to select card and perform actions
       57:  756:  switch( card ) 
        -:  757:    {
        -:  758:    case adventurer:
        4:  759:      adventurerfun(currentPlayer, state);
        -:  760:			
        -:  761:    case council_room:
        -:  762:      //+4 Cards
      440:  763:      for (i = 0; i < 4; i++)
        -:  764:	{
      176:  765:	  drawCard(currentPlayer, state);
      176:  766:	}
        -:  767:			
        -:  768:      //+1 Buy
       44:  769:      state->numBuys++;
        -:  770:			
        -:  771:      //Each other player draws a card
      264:  772:      for (i = 0; i < state->numPlayers; i++)
        -:  773:	{
       88:  774:	  if ( i != currentPlayer )
        -:  775:	    {
       44:  776:	      drawCard(i, state);
       44:  777:	    }
       88:  778:	}
        -:  779:			
        -:  780:      //put played card in played card pile
       44:  781:      discardCard(handPos, currentPlayer, state, 0);
        -:  782:			
       44:  783:      return 0;
        -:  784:			
        -:  785:    case feast:
        -:  786:      //gain card with cost up to 5
        -:  787:      //Backup hand
    #####:  788:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  789:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  790:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  791:      }
        -:  792:      //Backup hand
        -:  793:
        -:  794:      //Update Coins for Buy
    #####:  795:      updateCoins(currentPlayer, state, 5);
    #####:  796:      x = 1;//Condition to loop on
    #####:  797:      while( x == 1) {//Buy one card
    #####:  798:	if (supplyCount(choice1, state) <= 0){
        -:  799:	  if (DEBUG)
        -:  800:	    printf("None of that card left, sorry!\n");
        -:  801:
        -:  802:	  if (DEBUG){
        -:  803:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  804:	  }
    #####:  805:	}
    #####:  806:	else if (state->coins < getCost(choice1)){
    #####:  807:	  printf("That card is too expensive!\n");
        -:  808:
        -:  809:	  if (DEBUG){
        -:  810:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  811:	  }
    #####:  812:	}
        -:  813:	else{
        -:  814:
        -:  815:	  if (DEBUG){
        -:  816:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  817:	  }
        -:  818:
    #####:  819:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  820:	  x = 0;//No more buying cards
        -:  821:
        -:  822:	  if (DEBUG){
        -:  823:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  824:	  }
        -:  825:
        -:  826:	}
        -:  827:      }     
        -:  828:
        -:  829:      //Reset Hand
    #####:  830:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  831:	state->hand[currentPlayer][i] = temphand[i];
    #####:  832:	temphand[i] = -1;
    #####:  833:      }
        -:  834:      //Reset Hand
        -:  835:      			
    #####:  836:      return 0;
        -:  837:			
        -:  838:    case gardens:
    #####:  839:      return -1;
        -:  840:			
        -:  841:    case mine:
    #####:  842:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  843:
    #####:  844:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  845:	{
    #####:  846:	  return -1;
        -:  847:	}
        -:  848:		
    #####:  849:      if (choice2 > treasure_map || choice2 < curse)
        -:  850:	{
    #####:  851:	  return -1;
        -:  852:	}
        -:  853:
    #####:  854:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  855:	{
    #####:  856:	  return -1;
        -:  857:	}
        -:  858:
    #####:  859:      gainCard(choice2, state, 2, currentPlayer);
        -:  860:
        -:  861:      //discard card from hand
    #####:  862:      discardCard(handPos, currentPlayer, state, 0);
        -:  863:
        -:  864:      //discard trashed card
    #####:  865:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  866:	{
    #####:  867:	  if (state->hand[currentPlayer][i] == j)
        -:  868:	    {
    #####:  869:	      discardCard(i, currentPlayer, state, 0);			
    #####:  870:	      break;
        -:  871:	    }
    #####:  872:	}
        -:  873:			
    #####:  874:      return 0;
        -:  875:			
        -:  876:    case remodel:
    #####:  877:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  878:
    #####:  879:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  880:	{
    #####:  881:	  return -1;
        -:  882:	}
        -:  883:
    #####:  884:      gainCard(choice2, state, 0, currentPlayer);
        -:  885:
        -:  886:      //discard card from hand
    #####:  887:      discardCard(handPos, currentPlayer, state, 0);
        -:  888:
        -:  889:      //discard trashed card
    #####:  890:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  891:	{
    #####:  892:	  if (state->hand[currentPlayer][i] == j)
        -:  893:	    {
    #####:  894:	      discardCard(i, currentPlayer, state, 0);			
    #####:  895:	      break;
        -:  896:	    }
    #####:  897:	}
        -:  898:
        -:  899:
    #####:  900:      return 0;
        -:  901:		
        -:  902:    case smithy:
        -:  903:      //+3 Cards
        3:  904:      smithyfun(currentPlayer, state, handPos);
        -:  905:
        -:  906:    case village:
        3:  907:      villagefun(handPos, currentPlayer, state);
        -:  908:		
        -:  909:    case baron:
        3:  910:      state->numBuys++;//Increase buys by 1!
        3:  911:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  912:	int p = 0;//Iterator for hand!
    #####:  913:	int card_not_discarded = 1;//Flag for discard set!
    #####:  914:	while(card_not_discarded){
    #####:  915:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  916:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  917:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  918:	    state->discardCount[currentPlayer]++;
    #####:  919:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  920:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  921:	    }
    #####:  922:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  923:	    state->handCount[currentPlayer]--;
    #####:  924:	    card_not_discarded = 0;//Exit the loop
    #####:  925:	  }
    #####:  926:	  else if (p > state->handCount[currentPlayer]){
        -:  927:	    if(DEBUG) {
        -:  928:	      printf("No estate cards in your hand, invalid choice\n");
        -:  929:	      printf("Must gain an estate if there are any\n");
        -:  930:	    }
    #####:  931:	    if (supplyCount(estate, state) > 0){
    #####:  932:	      gainCard(estate, state, 0, currentPlayer);
    #####:  933:	      state->supplyCount[estate]--;//Decrement estates
    #####:  934:	      if (supplyCount(estate, state) == 0){
    #####:  935:		isGameOver(state);
    #####:  936:	      }
    #####:  937:	    }
    #####:  938:	    card_not_discarded = 0;//Exit the loop
    #####:  939:	  }
        -:  940:			    
        -:  941:	  else{
    #####:  942:	    p++;//Next card
        -:  943:	  }
        -:  944:	}
    #####:  945:      }
        -:  946:			    
        -:  947:      else{
        3:  948:	if (supplyCount(estate, state) > 0){
        3:  949:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
        3:  950:	  state->supplyCount[estate]--;//Decrement Estates
        3:  951:	  if (supplyCount(estate, state) == 0){
    #####:  952:	    isGameOver(state);
    #####:  953:	  }
        3:  954:	}
        -:  955:      }
        -:  956:	    
        -:  957:      
        3:  958:      return 0;
        -:  959:		
        -:  960:    case great_hall:
    #####:  961:      great_hallfun(currentPlayer, state, handPos);
        -:  962:		
        -:  963:    case minion:
        -:  964:      //+1 action
    #####:  965:      state->numActions++;
        -:  966:			
        -:  967:      //discard card from hand
    #####:  968:      discardCard(handPos, currentPlayer, state, 0);
        -:  969:			
    #####:  970:      if (choice1)		//+2 coins
        -:  971:	{
    #####:  972:	  state->coins = state->coins + 2;
    #####:  973:	}
        -:  974:			
    #####:  975:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  976:	{
        -:  977:	  //discard hand
    #####:  978:	  while(numHandCards(state) > 0)
        -:  979:	    {
    #####:  980:	      discardCard(handPos, currentPlayer, state, 0);
        -:  981:	    }
        -:  982:				
        -:  983:	  //draw 4
    #####:  984:	  for (i = 0; i < 4; i++)
        -:  985:	    {
    #####:  986:	      drawCard(currentPlayer, state);
    #####:  987:	    }
        -:  988:				
        -:  989:	  //other players discard hand and redraw if hand size > 4
    #####:  990:	  for (i = 0; i < state->numPlayers; i++)
        -:  991:	    {
    #####:  992:	      if (i != currentPlayer)
        -:  993:		{
    #####:  994:		  if ( state->handCount[i] > 4 )
        -:  995:		    {
        -:  996:		      //discard hand
    #####:  997:		      while( state->handCount[i] > 0 )
        -:  998:			{
    #####:  999:			  discardCard(handPos, i, state, 0);
        -: 1000:			}
        -: 1001:							
        -: 1002:		      //draw 4
    #####: 1003:		      for (j = 0; j < 4; j++)
        -: 1004:			{
    #####: 1005:			  drawCard(i, state);
    #####: 1006:			}
    #####: 1007:		    }
    #####: 1008:		}
    #####: 1009:	    }
        -: 1010:				
    #####: 1011:	}
    #####: 1012:      return 0;
        -: 1013:		
        -: 1014:    case steward:
    #####: 1015:      stewardfun(choice1, choice2, choice3, handPos, currentPlayer, state);
        -: 1016:
        -: 1017:		
        -: 1018:    case tribute:
    #####: 1019:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1020:	if (state->deckCount[nextPlayer] > 0){
    #####: 1021:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1022:	  state->deckCount[nextPlayer]--;
    #####: 1023:	}
    #####: 1024:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1025:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1026:	  state->discardCount[nextPlayer]--;
    #####: 1027:	}
        -: 1028:	else{
        -: 1029:	  //No Card to Reveal
        -: 1030:	  if (DEBUG){
        -: 1031:	    printf("No cards to reveal\n");
        -: 1032:	  }
        -: 1033:	}
    #####: 1034:      }
        -: 1035:	    
        -: 1036:      else{
    #####: 1037:	if (state->deckCount[nextPlayer] == 0){
    #####: 1038:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1039:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1040:	    state->deckCount[nextPlayer]++;
    #####: 1041:	    state->discard[nextPlayer][i] = -1;
    #####: 1042:	    state->discardCount[nextPlayer]--;
    #####: 1043:	  }
        -: 1044:			    
    #####: 1045:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1046:	} 
    #####: 1047:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1048:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1049:	state->deckCount[nextPlayer]--;
    #####: 1050:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1051:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1052:	state->deckCount[nextPlayer]--;
        -: 1053:      }    
        -: 1054:		       
    #####: 1055:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1056:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1057:	state->playedCardCount++;
    #####: 1058:	tributeRevealedCards[1] = -1;
    #####: 1059:      }
        -: 1060:
    #####: 1061:      for (i = 0; i <= 2; i ++){
    #####: 1062:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1063:	  state->coins += 2;
    #####: 1064:	}
        -: 1065:		    
    #####: 1066:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1067:	  drawCard(currentPlayer, state);
    #####: 1068:	  drawCard(currentPlayer, state);
    #####: 1069:	}
        -: 1070:	else{//Action Card
    #####: 1071:	  state->numActions = state->numActions + 2;
        -: 1072:	}
    #####: 1073:      }
        -: 1074:	    
    #####: 1075:      return 0;
        -: 1076:		
        -: 1077:    case ambassador:
    #####: 1078:      j = 0;		//used to check if player has enough cards to discard
        -: 1079:
    #####: 1080:      if (choice2 > 2 || choice2 < 0)
        -: 1081:	{
    #####: 1082:	  return -1;				
        -: 1083:	}
        -: 1084:
    #####: 1085:      if (choice1 == handPos)
        -: 1086:	{
    #####: 1087:	  return -1;
        -: 1088:	}
        -: 1089:
    #####: 1090:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1091:	{
    #####: 1092:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1093:	    {
    #####: 1094:	      j++;
    #####: 1095:	    }
    #####: 1096:	}
    #####: 1097:      if (j < choice2)
        -: 1098:	{
    #####: 1099:	  return -1;				
        -: 1100:	}
        -: 1101:
        -: 1102:      if (DEBUG) 
        -: 1103:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1104:
        -: 1105:      //increase supply count for choosen card by amount being discarded
    #####: 1106:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1107:			
        -: 1108:      //each other player gains a copy of revealed card
    #####: 1109:      for (i = 0; i < state->numPlayers; i++)
        -: 1110:	{
    #####: 1111:	  if (i != currentPlayer)
        -: 1112:	    {
    #####: 1113:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1114:	    }
    #####: 1115:	}
        -: 1116:
        -: 1117:      //discard played card from hand
    #####: 1118:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1119:
        -: 1120:      //trash copies of cards returned to supply
    #####: 1121:      for (j = 0; j < choice2; j++)
        -: 1122:	{
    #####: 1123:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1124:	    {
    #####: 1125:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1126:		{
    #####: 1127:		  discardCard(i, currentPlayer, state, 1);
    #####: 1128:		  break;
        -: 1129:		}
    #####: 1130:	    }
    #####: 1131:	}			
        -: 1132:
    #####: 1133:      return 0;
        -: 1134:		
        -: 1135:    case cutpurse:
        -: 1136:
    #####: 1137:      updateCoins(currentPlayer, state, 2);
    #####: 1138:      for (i = 0; i < state->numPlayers; i++)
        -: 1139:	{
    #####: 1140:	  if (i != currentPlayer)
        -: 1141:	    {
    #####: 1142:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1143:		{
    #####: 1144:		  if (state->hand[i][j] == copper)
        -: 1145:		    {
    #####: 1146:		      discardCard(j, i, state, 0);
    #####: 1147:		      break;
        -: 1148:		    }
    #####: 1149:		  if (j == state->handCount[i])
        -: 1150:		    {
    #####: 1151:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1152:			{
        -: 1153:			  if (DEBUG)
        -: 1154:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1155:			}	
    #####: 1156:		      break;
        -: 1157:		    }		
    #####: 1158:		}
        -: 1159:					
    #####: 1160:	    }
        -: 1161:				
    #####: 1162:	}				
        -: 1163:
        -: 1164:      //discard played card from hand
    #####: 1165:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1166:
    #####: 1167:      return 0;
        -: 1168:
        -: 1169:		
        -: 1170:    case embargo: 
        -: 1171:      //+2 Coins
    #####: 1172:      state->coins = state->coins + 2;
        -: 1173:			
        -: 1174:      //see if selected pile is in play
    #####: 1175:      if ( state->supplyCount[choice1] == -1 )
        -: 1176:	{
    #####: 1177:	  return -1;
        -: 1178:	}
        -: 1179:			
        -: 1180:      //add embargo token to selected supply pile
    #####: 1181:      state->embargoTokens[choice1]++;
        -: 1182:			
        -: 1183:      //trash card
    #####: 1184:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1185:      return 0;
        -: 1186:		
        -: 1187:    case outpost:
        -: 1188:      //set outpost flag
    #####: 1189:      state->outpostPlayed++;
        -: 1190:			
        -: 1191:      //discard card
    #####: 1192:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1193:      return 0;
        -: 1194:		
        -: 1195:    case salvager:
        -: 1196:      //+1 buy
    #####: 1197:      state->numBuys++;
        -: 1198:			
    #####: 1199:      if (choice1)
        -: 1200:	{
        -: 1201:	  //gain coins equal to trashed card
    #####: 1202:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1203:	  //trash card
    #####: 1204:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1205:	}
        -: 1206:			
        -: 1207:      //discard card
    #####: 1208:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1209:      return 0;
        -: 1210:		
        -: 1211:    case sea_hag:
    #####: 1212:      for (i = 0; i < state->numPlayers; i++){
    #####: 1213:	if (i != currentPlayer){
    #####: 1214:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1215:	  state->discardCount[i]++;
    #####: 1216:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1217:	}
    #####: 1218:      }
    #####: 1219:      return 0;
        -: 1220:		
        -: 1221:    case treasure_map:
        -: 1222:      //search hand for another treasure_map
    #####: 1223:      index = -1;
    #####: 1224:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1225:	{
    #####: 1226:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1227:	    {
    #####: 1228:	      index = i;
    #####: 1229:	      break;
        -: 1230:	    }
    #####: 1231:	}
    #####: 1232:      if (index > -1)
        -: 1233:	{
        -: 1234:	  //trash both treasure cards
    #####: 1235:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1236:	  discardCard(index, currentPlayer, state, 1);
        -: 1237:
        -: 1238:	  //gain 4 Gold cards
    #####: 1239:	  for (i = 0; i < 4; i++)
        -: 1240:	    {
    #####: 1241:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1242:	    }
        -: 1243:				
        -: 1244:	  //return success
    #####: 1245:	  return 1;
        -: 1246:	}
        -: 1247:			
        -: 1248:      //no second treasure_map found in hand
    #####: 1249:      return -1;
        -: 1250:    }
        -: 1251:	
    #####: 1252:  return -1;
       47: 1253:}
        -: 1254:
        -: 1255:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1256:{
        -: 1257:	
        -: 1258:  //if card is not trashed, added to Played pile 
      678: 1259:  if (trashFlag < 1)
        -: 1260:    {
        -: 1261:      //add card to played pile
      368: 1262:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      368: 1263:      state->playedCardCount++;
      368: 1264:    }
        -: 1265:	
        -: 1266:  //set played card to -1
      678: 1267:  state->hand[currentPlayer][handPos] = -1;
        -: 1268:	
        -: 1269:  //remove card from player's hand
      678: 1270:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1271:    {
        -: 1272:      //reduce number of cards in hand
       97: 1273:      state->handCount[currentPlayer]--;
       97: 1274:    }
      581: 1275:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1276:    {
        -: 1277:      //reduce number of cards in hand
       48: 1278:      state->handCount[currentPlayer]--;
       48: 1279:    }
        -: 1280:  else 	
        -: 1281:    {
        -: 1282:      //replace discarded card with last card in hand
      533: 1283:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1284:      //set last card to -1
      533: 1285:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1286:      //reduce number of cards in hand
      533: 1287:      state->handCount[currentPlayer]--;
        -: 1288:    }
        -: 1289:	
      678: 1290:  return 0;
        -: 1291:}
        -: 1292:
        -: 1293:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1294:{
        -: 1295:  //Note: supplyPos is enum of choosen card
        -: 1296:	
        -: 1297:  //check if supply pile is empty (0) or card is not used in game (-1)
     4224: 1298:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1299:    {
      578: 1300:      return -1;
        -: 1301:    }
        -: 1302:	
        -: 1303:  //added card for [whoseTurn] current player:
        -: 1304:  // toFlag = 0 : add to discard
        -: 1305:  // toFlag = 1 : add to deck
        -: 1306:  // toFlag = 2 : add to hand
        -: 1307:
     3646: 1308:  if (toFlag == 1)
        -: 1309:    {
     1428: 1310:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
     1428: 1311:      state->deckCount[player]++;
     1428: 1312:    }
     2218: 1313:  else if (toFlag == 2)
        -: 1314:    {
     1190: 1315:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
     1190: 1316:      state->handCount[player]++;
     1190: 1317:    }
        -: 1318:  else
        -: 1319:    {
     1028: 1320:      state->discard[player][ state->discardCount[player] ] = supplyPos;
     1028: 1321:      state->discardCount[player]++;
        -: 1322:    }
        -: 1323:	
        -: 1324:  //decrease number in supply pile
     3646: 1325:  state->supplyCount[supplyPos]--;
        -: 1326:	 
     3646: 1327:  return 0;
     4224: 1328:}
        -: 1329:
        -: 1330:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1331:{
        -: 1332:  int i;
        -: 1333:	
        -: 1334:  //reset coin count
     5854: 1335:  state->coins = 0;
        -: 1336:
        -: 1337:  //add coins for each Treasure card in player's hand
    68992: 1338:  for (i = 0; i < state->handCount[player]; i++)
        -: 1339:    {
    28642: 1340:      if (state->hand[player][i] == copper)
        -: 1341:	{
    22282: 1342:	  state->coins += 1;
    22282: 1343:	}
     6360: 1344:      else if (state->hand[player][i] == silver)
        -: 1345:	{
      433: 1346:	  state->coins += 2;
      433: 1347:	}
     5927: 1348:      else if (state->hand[player][i] == gold)
        -: 1349:	{
      353: 1350:	  state->coins += 3;
      353: 1351:	}	
    28642: 1352:    }	
        -: 1353:
        -: 1354:  //add bonus
     5854: 1355:  state->coins += bonus;
        -: 1356:
     5854: 1357:  return 0;
        -: 1358:}
        -: 1359:
        -: 1360:
        -: 1361://end of dominion.c
        -: 1362:
TESTING discardCard():
Test player 0 with 1 card(s) and 0 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 0, expected = 0
Test player 0 with 1 card(s) and 0 hand position.
handcount = 0, expected = 0
Test player 0 with 1 card(s) and 1 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 0, expected = 0
Test player 0 with 1 card(s) and 1 hand position.
handcount = 0, expected = 0
Test player 0 with 1 card(s) and 2 hand position.
playedCard = 1, expected = 1
playedCardCount = 1, expected = 1
handcount = 0, expected = 0
Test player 0 with 1 card(s) and 2 hand position.
handcount = 0, expected = 0
Test player 0 with 1 card(s) and 3 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 0, expected = 0
Test player 0 with 1 card(s) and 3 hand position.
handcount = 0, expected = 0
Test player 0 with 1 card(s) and 4 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 0, expected = 0
Test player 0 with 1 card(s) and 4 hand position.
handcount = 0, expected = 0
Test player 0 with 2 card(s) and 0 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 1, expected = 1
Test player 0 with 2 card(s) and 0 hand position.
handcount = 1, expected = 1
Test player 0 with 2 card(s) and 1 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 1, expected = 1
Test player 0 with 2 card(s) and 1 hand position.
handcount = 1, expected = 1
Test player 0 with 2 card(s) and 2 hand position.
playedCard = 1, expected = 1
playedCardCount = 1, expected = 1
handcount = 1, expected = 1
Test player 0 with 2 card(s) and 2 hand position.
handcount = 1, expected = 1
Test player 0 with 2 card(s) and 3 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 1, expected = 1
Test player 0 with 2 card(s) and 3 hand position.
handcount = 1, expected = 1
Test player 0 with 2 card(s) and 4 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 1, expected = 1
Test player 0 with 2 card(s) and 4 hand position.
handcount = 1, expected = 1
Test player 0 with 3 card(s) and 0 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 2, expected = 2
Test player 0 with 3 card(s) and 0 hand position.
handcount = 2, expected = 2
Test player 0 with 3 card(s) and 1 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 2, expected = 2
Test player 0 with 3 card(s) and 1 hand position.
handcount = 2, expected = 2
Test player 0 with 3 card(s) and 2 hand position.
playedCard = 1, expected = 1
playedCardCount = 1, expected = 1
handcount = 2, expected = 2
Test player 0 with 3 card(s) and 2 hand position.
handcount = 2, expected = 2
Test player 0 with 3 card(s) and 3 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 2, expected = 2
Test player 0 with 3 card(s) and 3 hand position.
handcount = 2, expected = 2
Test player 0 with 3 card(s) and 4 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 2, expected = 2
Test player 0 with 3 card(s) and 4 hand position.
handcount = 2, expected = 2
Test player 0 with 4 card(s) and 0 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 3, expected = 3
Test player 0 with 4 card(s) and 0 hand position.
handcount = 3, expected = 3
Test player 0 with 4 card(s) and 1 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 3, expected = 3
Test player 0 with 4 card(s) and 1 hand position.
handcount = 3, expected = 3
Test player 0 with 4 card(s) and 2 hand position.
playedCard = 1, expected = 1
playedCardCount = 1, expected = 1
handcount = 3, expected = 3
Test player 0 with 4 card(s) and 2 hand position.
handcount = 3, expected = 3
Test player 0 with 4 card(s) and 3 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 3, expected = 3
Test player 0 with 4 card(s) and 3 hand position.
handcount = 3, expected = 3
Test player 0 with 4 card(s) and 4 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 3, expected = 3
Test player 0 with 4 card(s) and 4 hand position.
handcount = 3, expected = 3
Test player 0 with 5 card(s) and 0 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 4, expected = 4
Test player 0 with 5 card(s) and 0 hand position.
handcount = 4, expected = 4
Test player 0 with 5 card(s) and 1 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 4, expected = 4
Test player 0 with 5 card(s) and 1 hand position.
handcount = 4, expected = 4
Test player 0 with 5 card(s) and 2 hand position.
playedCard = 1, expected = 1
playedCardCount = 1, expected = 1
handcount = 4, expected = 4
Test player 0 with 5 card(s) and 2 hand position.
handcount = 4, expected = 4
Test player 0 with 5 card(s) and 3 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 4, expected = 4
Test player 0 with 5 card(s) and 3 hand position.
handcount = 4, expected = 4
Test player 0 with 5 card(s) and 4 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 4, expected = 4
Test player 0 with 5 card(s) and 4 hand position.
handcount = 4, expected = 4
Test player 1 with 1 card(s) and 0 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 0, expected = 0
Test player 1 with 1 card(s) and 0 hand position.
handcount = 0, expected = 0
Test player 1 with 1 card(s) and 1 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 0, expected = 0
Test player 1 with 1 card(s) and 1 hand position.
handcount = 0, expected = 0
Test player 1 with 1 card(s) and 2 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 0, expected = 0
Test player 1 with 1 card(s) and 2 hand position.
handcount = 0, expected = 0
Test player 1 with 1 card(s) and 3 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 0, expected = 0
Test player 1 with 1 card(s) and 3 hand position.
handcount = 0, expected = 0
Test player 1 with 1 card(s) and 4 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 0, expected = 0
Test player 1 with 1 card(s) and 4 hand position.
handcount = 0, expected = 0
Test player 1 with 2 card(s) and 0 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 1, expected = 1
Test player 1 with 2 card(s) and 0 hand position.
handcount = 1, expected = 1
Test player 1 with 2 card(s) and 1 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 1, expected = 1
Test player 1 with 2 card(s) and 1 hand position.
handcount = 1, expected = 1
Test player 1 with 2 card(s) and 2 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 1, expected = 1
Test player 1 with 2 card(s) and 2 hand position.
handcount = 1, expected = 1
Test player 1 with 2 card(s) and 3 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 1, expected = 1
Test player 1 with 2 card(s) and 3 hand position.
handcount = 1, expected = 1
Test player 1 with 2 card(s) and 4 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 1, expected = 1
Test player 1 with 2 card(s) and 4 hand position.
handcount = 1, expected = 1
Test player 1 with 3 card(s) and 0 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 2, expected = 2
Test player 1 with 3 card(s) and 0 hand position.
handcount = 2, expected = 2
Test player 1 with 3 card(s) and 1 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 2, expected = 2
Test player 1 with 3 card(s) and 1 hand position.
handcount = 2, expected = 2
Test player 1 with 3 card(s) and 2 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 2, expected = 2
Test player 1 with 3 card(s) and 2 hand position.
handcount = 2, expected = 2
Test player 1 with 3 card(s) and 3 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 2, expected = 2
Test player 1 with 3 card(s) and 3 hand position.
handcount = 2, expected = 2
Test player 1 with 3 card(s) and 4 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 2, expected = 2
Test player 1 with 3 card(s) and 4 hand position.
handcount = 2, expected = 2
Test player 1 with 4 card(s) and 0 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 3, expected = 3
Test player 1 with 4 card(s) and 0 hand position.
handcount = 3, expected = 3
Test player 1 with 4 card(s) and 1 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 3, expected = 3
Test player 1 with 4 card(s) and 1 hand position.
handcount = 3, expected = 3
Test player 1 with 4 card(s) and 2 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 3, expected = 3
Test player 1 with 4 card(s) and 2 hand position.
handcount = 3, expected = 3
Test player 1 with 4 card(s) and 3 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 3, expected = 3
Test player 1 with 4 card(s) and 3 hand position.
handcount = 3, expected = 3
Test player 1 with 4 card(s) and 4 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 3, expected = 3
Test player 1 with 4 card(s) and 4 hand position.
handcount = 3, expected = 3
Test player 1 with 5 card(s) and 0 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 4, expected = 4
Test player 1 with 5 card(s) and 0 hand position.
handcount = 4, expected = 4
Test player 1 with 5 card(s) and 1 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 4, expected = 4
Test player 1 with 5 card(s) and 1 hand position.
handcount = 4, expected = 4
Test player 1 with 5 card(s) and 2 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 4, expected = 4
Test player 1 with 5 card(s) and 2 hand position.
handcount = 4, expected = 4
Test player 1 with 5 card(s) and 3 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 4, expected = 4
Test player 1 with 5 card(s) and 3 hand position.
handcount = 4, expected = 4
Test player 1 with 5 card(s) and 4 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 4, expected = 4
Test player 1 with 5 card(s) and 4 hand position.
handcount = 4, expected = 4
All tests passed!
File 'dominion.c'
Lines executed:51.01% of 643
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:52
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
   156227:    9:  if (*(int*)a > *(int*)b)
      336:   10:    return 1;
   155891:   11:  if (*(int*)a < *(int*)b)
    55784:   12:    return -1;
   100107:   13:  return 0;
   156227:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     5540:   44:  SelectStream(1);
     5540:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
    11080:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     5540:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   121880:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
  1218800:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
  1052600:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
   554000:   65:        }
    55400:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     5540:   73:  if (numPlayers == 2)
        -:   74:    {
     5540:   75:      state->supplyCount[curse] = 10;
     5540:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     5540:   87:  if (numPlayers == 2)
        -:   88:    {
     5540:   89:      state->supplyCount[estate] = 8;
     5540:   90:      state->supplyCount[duchy] = 8;
     5540:   91:      state->supplyCount[province] = 8;
     5540:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     5540:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     5540:  102:  state->supplyCount[silver] = 40;
     5540:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   232680:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
  1828200:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
   858700:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
   105262:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    11078:  115:		  if (numPlayers == 2){ 
    11078:  116:		    state->supplyCount[i] = 8; 
    11078:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
    11078:  119:		}
        -:  120:	      else
        -:  121:		{
    44322:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    55400:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   803300:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
   803300:  130:	}
        -:  131:
   110800:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    33240:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
    11080:  140:      state->deckCount[i] = 0;
    88640:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    33240:  143:	  state->deck[i][j] = estate;
    33240:  144:	  state->deckCount[i]++;
    33240:  145:	}
   177280:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    77560:  148:	  state->deck[i][j] = copper;
    77560:  149:	  state->deckCount[i]++;		
    77560:  150:	}
    11080:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    33240:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
    11080:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
    11080:  160:    }
        -:  161:
        -:  162:  //draw player hands
    33240:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    11080:  166:      state->handCount[i] = 0;
    11080:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
    11080:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
   310240:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
   149580:  178:      state->embargoTokens[i] = 0;
   149580:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     5540:  182:  state->outpostPlayed = 0;
     5540:  183:  state->phase = 0;
     5540:  184:  state->numActions = 1;
     5540:  185:  state->numBuys = 1;
     5540:  186:  state->playedCardCount = 0;
     5540:  187:  state->whoseTurn = 0;
     5540:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    66480:  192:  for (it = 0; it < 5; it++){
    27700:  193:    drawCard(state->whoseTurn, state);
    27700:  194:  }
        -:  195:
     5540:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     5540:  198:  return 0;
     5540:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    22673:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    22673:  209:  if (state->deckCount[player] < 1)
    11558:  210:    return -1;
    11115:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   244790:  214:  while (state->deckCount[player] > 0) {
   111280:  215:    card = floor(Random() * state->deckCount[player]);
   111280:  216:    newDeck[newDeckPos] = state->deck[player][card];
   111280:  217:    newDeckPos++;
   779964:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   278702:  219:      state->deck[player][i] = state->deck[player][i+1];
   278702:  220:    }
   111280:  221:    state->deckCount[player]--;
        -:  222:  }
   244790:  223:  for (i = 0; i < newDeckPos; i++) {
   111280:  224:    state->deck[player][i] = newDeck[i];
   111280:  225:    state->deckCount[player]++;
   111280:  226:  }
        -:  227:
    11115:  228:  return 0;
    22673:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
       61:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       61:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
       61:  243:  if ( state->numActions < 1 )
        -:  244:    {
       36:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
       25:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
       32:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
       18:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
        7:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        7:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        7:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
        7:  269:  return 0;
       61:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
       73:  280:  who = state->whoseTurn;
        -:  281:
       73:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
       73:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
       73:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
       73:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
       73:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
       73:  299:    state->coins = (state->coins) - (getCost(supplyPos));
       73:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
       73:  308:  return 0;
       73:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
      536:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
     1128:  316:  int currentPlayer = whoseTurn(state);
     1128:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
     8111:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
     1110:  326:  int count = 0;
        -:  327:
    16734:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
     8409:  330:      if (state->deck[player][i] == card) count++;
     7257:  331:    }
        -:  332:
    38886:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    21454:  335:      if (state->hand[player][i] == card) count++;
    18333:  336:    }
        -:  337:
    30444:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    16464:  340:      if (state->discard[player][i] == card) count++;
    14112:  341:    }
        -:  342:
     1110:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
     1865:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
       77:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
      988:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
      417:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      417:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
      417:  359:  }
       77:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
       77:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
       39:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
       39:  365:  }
        -:  366:  else{
       38:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
       77:  370:  state->outpostPlayed = 0;
       77:  371:  state->phase = 0;
       77:  372:  state->numActions = 1;
       77:  373:  state->coins = 0;
       77:  374:  state->numBuys = 1;
       77:  375:  state->playedCardCount = 0;
       77:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
      924:  380:  for (k = 0; k < 5; k++){
      385:  381:    drawCard(state->whoseTurn, state);//Draw a card
      385:  382:  }
        -:  383:
        -:  384:  //Update money
       77:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
       77:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
      567:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
      202:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
      365:  401:  j = 0;
    18980:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
     9125:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
      576:  406:	  j++;
      576:  407:	}
     9125:  408:    }
      365:  409:  if ( j >= 3)
        -:  410:    {
       96:  411:      return 1;
        -:  412:    }
        -:  413:
      269:  414:  return 0;
      567:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
      214:  420:  int score = 0;
        -:  421:  //score from hand
     5488:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
     2966:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
     2935:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
     2938:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
     2943:  427:      if (state->hand[player][i] == province) { score = score + 6; };
     2946:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
     2950:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     2530:  430:    }
        -:  431:
        -:  432:  //score from discard
     3344:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
     1698:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
     1700:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
     1698:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
     1702:  438:      if (state->discard[player][i] == province) { score = score + 6; };
     1698:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
     1698:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     1458:  441:    }
        -:  442:
        -:  443:  //score from deck
     3344:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
     1698:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
     1701:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
     1698:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
     1700:  449:      if (state->deck[player][i] == province) { score = score + 6; };
     1698:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
     1698:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     1458:  452:    }
        -:  453:
      214:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    34804:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    13088:  533:    for (i = 0; i < state->discardCount[player];i++){
      480:  534:      state->deck[player][i] = state->discard[player][i];
      480:  535:      state->discard[player][i] = -1;
      480:  536:    }
        -:  537:
     6064:  538:    state->deckCount[player] = state->discardCount[player];
     6064:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     6064:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     6064:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     6064:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     6064:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     6064:  559:    if (deckCounter == 0)
     6029:  560:      return -1;
        -:  561:
       35:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       35:  563:    state->deckCount[player]--;
       35:  564:    state->handCount[player]++;//Increment hand count
       35:  565:  }
        -:  566:
        -:  567:  else{
    28740:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    28740:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    28740:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    28740:  576:    state->deckCount[player]--;
    28740:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    28775:  580:  return 0;
    34804:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
      146:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
       32:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
       70:  598:      return 3;
        -:  599:    case gold:
       28:  600:      return 6;
        -:  601:    case adventurer:
        8:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
        8:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
      146:  644:}
        -:  645:
        -:  646://smithy function to introduce a bug
        -:  647:int smithyfun(int currentPlayer, struct gameState *state, int handPos){
        -:  648:  //+3 Cards
        -:  649:  int i;
      528:  650:  for (i = 0; i <= 3; i++)
        -:  651:  {
      211:  652:    drawCard(currentPlayer, state);
      211:  653:  }
        -:  654:      
        -:  655:      //discard card from hand
       53:  656:      discardCard(handPos, currentPlayer, state, 0);
       53:  657:      return 0;
        -:  658:}
        -:  659:
        -:  660://adventurer function to introduce a bug
        -:  661:int adventurerfun(int currentPlayer, struct gameState *state){
        -:  662:    int cardDrawn;
        -:  663:    int temphand[MAX_HAND];
2291246309455167536:  664:    int drawntreasure = 0;
2291246309455167536:  665:    int z = 0;
        -:  666:
10104103169071347668:  667:  while(drawntreasure <= 2){
72057701412115936:  668:      if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
17981540015:  669:          shuffle(currentPlayer, state);
17981540015:  670:      }
7018965447127852775:  671:  drawCard(currentPlayer, state);
7018965447127852775:  672:  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
14469171020717093779:  673:  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    28349:  674:  drawntreasure++;
        -:  675:  else{
     5492:  676:  temphand[z]=cardDrawn;
     5492:  677:  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     5492:  678:  z++;
        -:  679:  }
        -:  680:}
        -:  681:    
    11124:  682:    while(z-1>=0){
     5492:  683:  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     5492:  684:      z=z-1;
        -:  685:    }
       70:  686:    return 0;
        -:  687:}
        -:  688:
        -:  689:int villagefun(int handPos, int currentPlayer, struct gameState *state){
        -:  690:        //+1 Card
        3:  691:        drawCard(currentPlayer, state);
        -:  692:        
        -:  693:        //+2 Actions
        3:  694:        state->numActions = state->numActions + 2;
        -:  695:        
        -:  696:        //discard played card from hand
        -:  697:        //discardCard(handPos, currentPlayer, state, 0);
        3:  698:        return 0;
        -:  699:}
        -:  700:
        -:  701:int great_hallfun(int currentPlayer, struct gameState *state, int handPos){
        -:  702:        //+1 Card
    #####:  703:        drawCard(currentPlayer, state);
        -:  704:        
        -:  705:        //+1 Actions
    #####:  706:        state->numActions++;
        -:  707:        
        -:  708:        //discard card from hand
    #####:  709:        discardCard(handPos, currentPlayer, state, 0);
    #####:  710:        return 0;
        -:  711:}
        -:  712:
        -:  713:int stewardfun(int choice1, int choice2, int choice3, int handPos, int currentPlayer, struct gameState *state){
        -:  714:
      120:  715:  if (choice1 == 1)
        -:  716:	{
        -:  717:	  //+2 cards
       40:  718:	  drawCard(currentPlayer, state);
       40:  719:	  drawCard(currentPlayer, state);
       40:  720:	}
       80:  721:      else if (choice2 == 2)
        -:  722:	{
        -:  723:	  //+2 coins
    #####:  724:	  state->coins = state->coins + 2;
    #####:  725:	}
        -:  726:      else
        -:  727:	{
        -:  728:	  //trash 2 cards in hand
       80:  729:	  discardCard(choice2, currentPlayer, state, 1);
       80:  730:	  discardCard(choice3, currentPlayer, state, 1);
        -:  731:	}
        -:  732:			
        -:  733:      //discard card from hand
      120:  734:      discardCard(handPos, currentPlayer, state, 0);
      120:  735:      return 0;
        -:  736:}
        -:  737:
        -:  738:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  739:{
        -:  740:  int i;
        -:  741:  int j;
        -:  742:  int k;
        -:  743:  int x;
        -:  744:  int index;
       47:  745:  int currentPlayer = whoseTurn(state);
       47:  746:  int nextPlayer = currentPlayer + 1;
        -:  747:
       47:  748:  int tributeRevealedCards[2] = {-1, -1};
        -:  749:  int temphand[MAX_HAND];// moved above the if statement
       47:  750:  if (nextPlayer > (state->numPlayers - 1)){
        4:  751:    nextPlayer = 0;
        4:  752:  }
        -:  753:  
        -:  754:	
        -:  755:  //uses switch to select card and perform actions
       57:  756:  switch( card ) 
        -:  757:    {
        -:  758:    case adventurer:
        4:  759:      adventurerfun(currentPlayer, state);
        -:  760:			
        -:  761:    case council_room:
        -:  762:      //+4 Cards
      440:  763:      for (i = 0; i < 4; i++)
        -:  764:	{
      176:  765:	  drawCard(currentPlayer, state);
      176:  766:	}
        -:  767:			
        -:  768:      //+1 Buy
       44:  769:      state->numBuys++;
        -:  770:			
        -:  771:      //Each other player draws a card
      264:  772:      for (i = 0; i < state->numPlayers; i++)
        -:  773:	{
       88:  774:	  if ( i != currentPlayer )
        -:  775:	    {
       44:  776:	      drawCard(i, state);
       44:  777:	    }
       88:  778:	}
        -:  779:			
        -:  780:      //put played card in played card pile
       44:  781:      discardCard(handPos, currentPlayer, state, 0);
        -:  782:			
       44:  783:      return 0;
        -:  784:			
        -:  785:    case feast:
        -:  786:      //gain card with cost up to 5
        -:  787:      //Backup hand
    #####:  788:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  789:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  790:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  791:      }
        -:  792:      //Backup hand
        -:  793:
        -:  794:      //Update Coins for Buy
    #####:  795:      updateCoins(currentPlayer, state, 5);
    #####:  796:      x = 1;//Condition to loop on
    #####:  797:      while( x == 1) {//Buy one card
    #####:  798:	if (supplyCount(choice1, state) <= 0){
        -:  799:	  if (DEBUG)
        -:  800:	    printf("None of that card left, sorry!\n");
        -:  801:
        -:  802:	  if (DEBUG){
        -:  803:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  804:	  }
    #####:  805:	}
    #####:  806:	else if (state->coins < getCost(choice1)){
    #####:  807:	  printf("That card is too expensive!\n");
        -:  808:
        -:  809:	  if (DEBUG){
        -:  810:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  811:	  }
    #####:  812:	}
        -:  813:	else{
        -:  814:
        -:  815:	  if (DEBUG){
        -:  816:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  817:	  }
        -:  818:
    #####:  819:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  820:	  x = 0;//No more buying cards
        -:  821:
        -:  822:	  if (DEBUG){
        -:  823:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  824:	  }
        -:  825:
        -:  826:	}
        -:  827:      }     
        -:  828:
        -:  829:      //Reset Hand
    #####:  830:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  831:	state->hand[currentPlayer][i] = temphand[i];
    #####:  832:	temphand[i] = -1;
    #####:  833:      }
        -:  834:      //Reset Hand
        -:  835:      			
    #####:  836:      return 0;
        -:  837:			
        -:  838:    case gardens:
    #####:  839:      return -1;
        -:  840:			
        -:  841:    case mine:
    #####:  842:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  843:
    #####:  844:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  845:	{
    #####:  846:	  return -1;
        -:  847:	}
        -:  848:		
    #####:  849:      if (choice2 > treasure_map || choice2 < curse)
        -:  850:	{
    #####:  851:	  return -1;
        -:  852:	}
        -:  853:
    #####:  854:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  855:	{
    #####:  856:	  return -1;
        -:  857:	}
        -:  858:
    #####:  859:      gainCard(choice2, state, 2, currentPlayer);
        -:  860:
        -:  861:      //discard card from hand
    #####:  862:      discardCard(handPos, currentPlayer, state, 0);
        -:  863:
        -:  864:      //discard trashed card
    #####:  865:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  866:	{
    #####:  867:	  if (state->hand[currentPlayer][i] == j)
        -:  868:	    {
    #####:  869:	      discardCard(i, currentPlayer, state, 0);			
    #####:  870:	      break;
        -:  871:	    }
    #####:  872:	}
        -:  873:			
    #####:  874:      return 0;
        -:  875:			
        -:  876:    case remodel:
    #####:  877:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  878:
    #####:  879:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  880:	{
    #####:  881:	  return -1;
        -:  882:	}
        -:  883:
    #####:  884:      gainCard(choice2, state, 0, currentPlayer);
        -:  885:
        -:  886:      //discard card from hand
    #####:  887:      discardCard(handPos, currentPlayer, state, 0);
        -:  888:
        -:  889:      //discard trashed card
    #####:  890:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  891:	{
    #####:  892:	  if (state->hand[currentPlayer][i] == j)
        -:  893:	    {
    #####:  894:	      discardCard(i, currentPlayer, state, 0);			
    #####:  895:	      break;
        -:  896:	    }
    #####:  897:	}
        -:  898:
        -:  899:
    #####:  900:      return 0;
        -:  901:		
        -:  902:    case smithy:
        -:  903:      //+3 Cards
        3:  904:      smithyfun(currentPlayer, state, handPos);
        -:  905:
        -:  906:    case village:
        3:  907:      villagefun(handPos, currentPlayer, state);
        -:  908:		
        -:  909:    case baron:
        3:  910:      state->numBuys++;//Increase buys by 1!
        3:  911:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  912:	int p = 0;//Iterator for hand!
    #####:  913:	int card_not_discarded = 1;//Flag for discard set!
    #####:  914:	while(card_not_discarded){
    #####:  915:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  916:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  917:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  918:	    state->discardCount[currentPlayer]++;
    #####:  919:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  920:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  921:	    }
    #####:  922:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  923:	    state->handCount[currentPlayer]--;
    #####:  924:	    card_not_discarded = 0;//Exit the loop
    #####:  925:	  }
    #####:  926:	  else if (p > state->handCount[currentPlayer]){
        -:  927:	    if(DEBUG) {
        -:  928:	      printf("No estate cards in your hand, invalid choice\n");
        -:  929:	      printf("Must gain an estate if there are any\n");
        -:  930:	    }
    #####:  931:	    if (supplyCount(estate, state) > 0){
    #####:  932:	      gainCard(estate, state, 0, currentPlayer);
    #####:  933:	      state->supplyCount[estate]--;//Decrement estates
    #####:  934:	      if (supplyCount(estate, state) == 0){
    #####:  935:		isGameOver(state);
    #####:  936:	      }
    #####:  937:	    }
    #####:  938:	    card_not_discarded = 0;//Exit the loop
    #####:  939:	  }
        -:  940:			    
        -:  941:	  else{
    #####:  942:	    p++;//Next card
        -:  943:	  }
        -:  944:	}
    #####:  945:      }
        -:  946:			    
        -:  947:      else{
        3:  948:	if (supplyCount(estate, state) > 0){
        3:  949:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
        3:  950:	  state->supplyCount[estate]--;//Decrement Estates
        3:  951:	  if (supplyCount(estate, state) == 0){
    #####:  952:	    isGameOver(state);
    #####:  953:	  }
        3:  954:	}
        -:  955:      }
        -:  956:	    
        -:  957:      
        3:  958:      return 0;
        -:  959:		
        -:  960:    case great_hall:
    #####:  961:      great_hallfun(currentPlayer, state, handPos);
        -:  962:		
        -:  963:    case minion:
        -:  964:      //+1 action
    #####:  965:      state->numActions++;
        -:  966:			
        -:  967:      //discard card from hand
    #####:  968:      discardCard(handPos, currentPlayer, state, 0);
        -:  969:			
    #####:  970:      if (choice1)		//+2 coins
        -:  971:	{
    #####:  972:	  state->coins = state->coins + 2;
    #####:  973:	}
        -:  974:			
    #####:  975:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  976:	{
        -:  977:	  //discard hand
    #####:  978:	  while(numHandCards(state) > 0)
        -:  979:	    {
    #####:  980:	      discardCard(handPos, currentPlayer, state, 0);
        -:  981:	    }
        -:  982:				
        -:  983:	  //draw 4
    #####:  984:	  for (i = 0; i < 4; i++)
        -:  985:	    {
    #####:  986:	      drawCard(currentPlayer, state);
    #####:  987:	    }
        -:  988:				
        -:  989:	  //other players discard hand and redraw if hand size > 4
    #####:  990:	  for (i = 0; i < state->numPlayers; i++)
        -:  991:	    {
    #####:  992:	      if (i != currentPlayer)
        -:  993:		{
    #####:  994:		  if ( state->handCount[i] > 4 )
        -:  995:		    {
        -:  996:		      //discard hand
    #####:  997:		      while( state->handCount[i] > 0 )
        -:  998:			{
    #####:  999:			  discardCard(handPos, i, state, 0);
        -: 1000:			}
        -: 1001:							
        -: 1002:		      //draw 4
    #####: 1003:		      for (j = 0; j < 4; j++)
        -: 1004:			{
    #####: 1005:			  drawCard(i, state);
    #####: 1006:			}
    #####: 1007:		    }
    #####: 1008:		}
    #####: 1009:	    }
        -: 1010:				
    #####: 1011:	}
    #####: 1012:      return 0;
        -: 1013:		
        -: 1014:    case steward:
    #####: 1015:      stewardfun(choice1, choice2, choice3, handPos, currentPlayer, state);
        -: 1016:
        -: 1017:		
        -: 1018:    case tribute:
    #####: 1019:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1020:	if (state->deckCount[nextPlayer] > 0){
    #####: 1021:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1022:	  state->deckCount[nextPlayer]--;
    #####: 1023:	}
    #####: 1024:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1025:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1026:	  state->discardCount[nextPlayer]--;
    #####: 1027:	}
        -: 1028:	else{
        -: 1029:	  //No Card to Reveal
        -: 1030:	  if (DEBUG){
        -: 1031:	    printf("No cards to reveal\n");
        -: 1032:	  }
        -: 1033:	}
    #####: 1034:      }
        -: 1035:	    
        -: 1036:      else{
    #####: 1037:	if (state->deckCount[nextPlayer] == 0){
    #####: 1038:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1039:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1040:	    state->deckCount[nextPlayer]++;
    #####: 1041:	    state->discard[nextPlayer][i] = -1;
    #####: 1042:	    state->discardCount[nextPlayer]--;
    #####: 1043:	  }
        -: 1044:			    
    #####: 1045:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1046:	} 
    #####: 1047:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1048:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1049:	state->deckCount[nextPlayer]--;
    #####: 1050:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1051:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1052:	state->deckCount[nextPlayer]--;
        -: 1053:      }    
        -: 1054:		       
    #####: 1055:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1056:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1057:	state->playedCardCount++;
    #####: 1058:	tributeRevealedCards[1] = -1;
    #####: 1059:      }
        -: 1060:
    #####: 1061:      for (i = 0; i <= 2; i ++){
    #####: 1062:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1063:	  state->coins += 2;
    #####: 1064:	}
        -: 1065:		    
    #####: 1066:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1067:	  drawCard(currentPlayer, state);
    #####: 1068:	  drawCard(currentPlayer, state);
    #####: 1069:	}
        -: 1070:	else{//Action Card
    #####: 1071:	  state->numActions = state->numActions + 2;
        -: 1072:	}
    #####: 1073:      }
        -: 1074:	    
    #####: 1075:      return 0;
        -: 1076:		
        -: 1077:    case ambassador:
    #####: 1078:      j = 0;		//used to check if player has enough cards to discard
        -: 1079:
    #####: 1080:      if (choice2 > 2 || choice2 < 0)
        -: 1081:	{
    #####: 1082:	  return -1;				
        -: 1083:	}
        -: 1084:
    #####: 1085:      if (choice1 == handPos)
        -: 1086:	{
    #####: 1087:	  return -1;
        -: 1088:	}
        -: 1089:
    #####: 1090:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1091:	{
    #####: 1092:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1093:	    {
    #####: 1094:	      j++;
    #####: 1095:	    }
    #####: 1096:	}
    #####: 1097:      if (j < choice2)
        -: 1098:	{
    #####: 1099:	  return -1;				
        -: 1100:	}
        -: 1101:
        -: 1102:      if (DEBUG) 
        -: 1103:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1104:
        -: 1105:      //increase supply count for choosen card by amount being discarded
    #####: 1106:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1107:			
        -: 1108:      //each other player gains a copy of revealed card
    #####: 1109:      for (i = 0; i < state->numPlayers; i++)
        -: 1110:	{
    #####: 1111:	  if (i != currentPlayer)
        -: 1112:	    {
    #####: 1113:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1114:	    }
    #####: 1115:	}
        -: 1116:
        -: 1117:      //discard played card from hand
    #####: 1118:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1119:
        -: 1120:      //trash copies of cards returned to supply
    #####: 1121:      for (j = 0; j < choice2; j++)
        -: 1122:	{
    #####: 1123:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1124:	    {
    #####: 1125:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1126:		{
    #####: 1127:		  discardCard(i, currentPlayer, state, 1);
    #####: 1128:		  break;
        -: 1129:		}
    #####: 1130:	    }
    #####: 1131:	}			
        -: 1132:
    #####: 1133:      return 0;
        -: 1134:		
        -: 1135:    case cutpurse:
        -: 1136:
    #####: 1137:      updateCoins(currentPlayer, state, 2);
    #####: 1138:      for (i = 0; i < state->numPlayers; i++)
        -: 1139:	{
    #####: 1140:	  if (i != currentPlayer)
        -: 1141:	    {
    #####: 1142:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1143:		{
    #####: 1144:		  if (state->hand[i][j] == copper)
        -: 1145:		    {
    #####: 1146:		      discardCard(j, i, state, 0);
    #####: 1147:		      break;
        -: 1148:		    }
    #####: 1149:		  if (j == state->handCount[i])
        -: 1150:		    {
    #####: 1151:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1152:			{
        -: 1153:			  if (DEBUG)
        -: 1154:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1155:			}	
    #####: 1156:		      break;
        -: 1157:		    }		
    #####: 1158:		}
        -: 1159:					
    #####: 1160:	    }
        -: 1161:				
    #####: 1162:	}				
        -: 1163:
        -: 1164:      //discard played card from hand
    #####: 1165:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1166:
    #####: 1167:      return 0;
        -: 1168:
        -: 1169:		
        -: 1170:    case embargo: 
        -: 1171:      //+2 Coins
    #####: 1172:      state->coins = state->coins + 2;
        -: 1173:			
        -: 1174:      //see if selected pile is in play
    #####: 1175:      if ( state->supplyCount[choice1] == -1 )
        -: 1176:	{
    #####: 1177:	  return -1;
        -: 1178:	}
        -: 1179:			
        -: 1180:      //add embargo token to selected supply pile
    #####: 1181:      state->embargoTokens[choice1]++;
        -: 1182:			
        -: 1183:      //trash card
    #####: 1184:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1185:      return 0;
        -: 1186:		
        -: 1187:    case outpost:
        -: 1188:      //set outpost flag
    #####: 1189:      state->outpostPlayed++;
        -: 1190:			
        -: 1191:      //discard card
    #####: 1192:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1193:      return 0;
        -: 1194:		
        -: 1195:    case salvager:
        -: 1196:      //+1 buy
    #####: 1197:      state->numBuys++;
        -: 1198:			
    #####: 1199:      if (choice1)
        -: 1200:	{
        -: 1201:	  //gain coins equal to trashed card
    #####: 1202:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1203:	  //trash card
    #####: 1204:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1205:	}
        -: 1206:			
        -: 1207:      //discard card
    #####: 1208:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1209:      return 0;
        -: 1210:		
        -: 1211:    case sea_hag:
    #####: 1212:      for (i = 0; i < state->numPlayers; i++){
    #####: 1213:	if (i != currentPlayer){
    #####: 1214:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1215:	  state->discardCount[i]++;
    #####: 1216:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1217:	}
    #####: 1218:      }
    #####: 1219:      return 0;
        -: 1220:		
        -: 1221:    case treasure_map:
        -: 1222:      //search hand for another treasure_map
    #####: 1223:      index = -1;
    #####: 1224:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1225:	{
    #####: 1226:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1227:	    {
    #####: 1228:	      index = i;
    #####: 1229:	      break;
        -: 1230:	    }
    #####: 1231:	}
    #####: 1232:      if (index > -1)
        -: 1233:	{
        -: 1234:	  //trash both treasure cards
    #####: 1235:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1236:	  discardCard(index, currentPlayer, state, 1);
        -: 1237:
        -: 1238:	  //gain 4 Gold cards
    #####: 1239:	  for (i = 0; i < 4; i++)
        -: 1240:	    {
    #####: 1241:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1242:	    }
        -: 1243:				
        -: 1244:	  //return success
    #####: 1245:	  return 1;
        -: 1246:	}
        -: 1247:			
        -: 1248:      //no second treasure_map found in hand
    #####: 1249:      return -1;
        -: 1250:    }
        -: 1251:	
    #####: 1252:  return -1;
       47: 1253:}
        -: 1254:
        -: 1255:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1256:{
        -: 1257:	
        -: 1258:  //if card is not trashed, added to Played pile 
      778: 1259:  if (trashFlag < 1)
        -: 1260:    {
        -: 1261:      //add card to played pile
      418: 1262:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      418: 1263:      state->playedCardCount++;
      418: 1264:    }
        -: 1265:	
        -: 1266:  //set played card to -1
      778: 1267:  state->hand[currentPlayer][handPos] = -1;
        -: 1268:	
        -: 1269:  //remove card from player's hand
      778: 1270:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1271:    {
        -: 1272:      //reduce number of cards in hand
      117: 1273:      state->handCount[currentPlayer]--;
      117: 1274:    }
      661: 1275:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1276:    {
        -: 1277:      //reduce number of cards in hand
       64: 1278:      state->handCount[currentPlayer]--;
       64: 1279:    }
        -: 1280:  else 	
        -: 1281:    {
        -: 1282:      //replace discarded card with last card in hand
      597: 1283:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1284:      //set last card to -1
      597: 1285:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1286:      //reduce number of cards in hand
      597: 1287:      state->handCount[currentPlayer]--;
        -: 1288:    }
        -: 1289:	
      778: 1290:  return 0;
        -: 1291:}
        -: 1292:
        -: 1293:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1294:{
        -: 1295:  //Note: supplyPos is enum of choosen card
        -: 1296:	
        -: 1297:  //check if supply pile is empty (0) or card is not used in game (-1)
     4224: 1298:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1299:    {
      578: 1300:      return -1;
        -: 1301:    }
        -: 1302:	
        -: 1303:  //added card for [whoseTurn] current player:
        -: 1304:  // toFlag = 0 : add to discard
        -: 1305:  // toFlag = 1 : add to deck
        -: 1306:  // toFlag = 2 : add to hand
        -: 1307:
     3646: 1308:  if (toFlag == 1)
        -: 1309:    {
     1428: 1310:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
     1428: 1311:      state->deckCount[player]++;
     1428: 1312:    }
     2218: 1313:  else if (toFlag == 2)
        -: 1314:    {
     1190: 1315:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
     1190: 1316:      state->handCount[player]++;
     1190: 1317:    }
        -: 1318:  else
        -: 1319:    {
     1028: 1320:      state->discard[player][ state->discardCount[player] ] = supplyPos;
     1028: 1321:      state->discardCount[player]++;
        -: 1322:    }
        -: 1323:	
        -: 1324:  //decrease number in supply pile
     3646: 1325:  state->supplyCount[supplyPos]--;
        -: 1326:	 
     3646: 1327:  return 0;
     4224: 1328:}
        -: 1329:
        -: 1330:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1331:{
        -: 1332:  int i;
        -: 1333:	
        -: 1334:  //reset coin count
     5954: 1335:  state->coins = 0;
        -: 1336:
        -: 1337:  //add coins for each Treasure card in player's hand
    70192: 1338:  for (i = 0; i < state->handCount[player]; i++)
        -: 1339:    {
    29142: 1340:      if (state->hand[player][i] == copper)
        -: 1341:	{
    22682: 1342:	  state->coins += 1;
    22682: 1343:	}
     6460: 1344:      else if (state->hand[player][i] == silver)
        -: 1345:	{
      433: 1346:	  state->coins += 2;
      433: 1347:	}
     6027: 1348:      else if (state->hand[player][i] == gold)
        -: 1349:	{
      353: 1350:	  state->coins += 3;
      353: 1351:	}	
    29142: 1352:    }	
        -: 1353:
        -: 1354:  //add bonus
     5954: 1355:  state->coins += bonus;
        -: 1356:
     5954: 1357:  return 0;
        -: 1358:}
        -: 1359:
        -: 1360:
        -: 1361://end of dominion.c
        -: 1362:
TESTING gainCard():
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 0
Deck Card: 0, Expected: 0
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 0
Deck Card: 0, Expected: 0
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 0
Deck Card: 0, Expected: 0
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 0
Deck Card: 0, Expected: 0
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 0
Deck Card: 0, Expected: 0
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 0
Deck Card: 0, Expected: 0
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 0
Deck Card: 0, Expected: 0
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 0
Hand Card: 0, Expected: 0
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 0
Hand Card: 0, Expected: 0
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 0
Hand Card: 0, Expected: 0
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 0
Hand Card: 0, Expected: 0
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 0
Hand Card: 0, Expected: 0
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 0
Hand Card: 0, Expected: 0
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 0
Hand Card: 0, Expected: 0
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 0
Deck Card: 1, Expected: 1
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 0
Deck Card: 1, Expected: 1
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 0
Deck Card: 1, Expected: 1
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 0
Deck Card: 1, Expected: 1
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 0
Deck Card: 1, Expected: 1
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 0
Deck Card: 1, Expected: 1
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 0
Deck Card: 1, Expected: 1
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 0
Hand Card: 1, Expected: 1
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 0
Hand Card: 1, Expected: 1
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 0
Hand Card: 1, Expected: 1
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 0
Hand Card: 1, Expected: 1
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 0
Hand Card: 1, Expected: 1
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 0
Hand Card: 1, Expected: 1
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 0
Hand Card: 1, Expected: 1
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 0
Deck Card: 2, Expected: 2
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 0
Deck Card: 2, Expected: 2
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 0
Deck Card: 2, Expected: 2
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 0
Deck Card: 2, Expected: 2
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 0
Deck Card: 2, Expected: 2
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 0
Deck Card: 2, Expected: 2
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 0
Deck Card: 2, Expected: 2
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 0
Hand Card: 2, Expected: 2
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 0
Hand Card: 2, Expected: 2
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 0
Hand Card: 2, Expected: 2
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 0
Hand Card: 2, Expected: 2
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 0
Hand Card: 2, Expected: 2
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 0
Hand Card: 2, Expected: 2
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 0
Hand Card: 2, Expected: 2
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 0
Deck Card: 3, Expected: 3
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 0
Deck Card: 3, Expected: 3
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 0
Deck Card: 3, Expected: 3
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 0
Deck Card: 3, Expected: 3
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 0
Deck Card: 3, Expected: 3
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 0
Deck Card: 3, Expected: 3
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 0
Deck Card: 3, Expected: 3
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 0
Hand Card: 3, Expected: 3
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 0
Hand Card: 3, Expected: 3
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 0
Hand Card: 3, Expected: 3
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 0
Hand Card: 3, Expected: 3
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 0
Hand Card: 3, Expected: 3
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 0
Hand Card: 3, Expected: 3
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 0
Hand Card: 3, Expected: 3
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 0
Deck Card: 4, Expected: 4
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 0
Deck Card: 4, Expected: 4
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 0
Deck Card: 4, Expected: 4
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 0
Deck Card: 4, Expected: 4
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 0
Deck Card: 4, Expected: 4
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 0
Deck Card: 4, Expected: 4
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 0
Deck Card: 4, Expected: 4
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 0
Hand Card: 4, Expected: 4
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 0
Hand Card: 4, Expected: 4
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 0
Hand Card: 4, Expected: 4
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 0
Hand Card: 4, Expected: 4
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 0
Hand Card: 4, Expected: 4
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 0
Hand Card: 4, Expected: 4
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 0
Hand Card: 4, Expected: 4
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 0
Deck Card: 5, Expected: 5
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 0
Deck Card: 5, Expected: 5
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 0
Deck Card: 5, Expected: 5
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 0
Deck Card: 5, Expected: 5
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 0
Deck Card: 5, Expected: 5
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 0
Deck Card: 5, Expected: 5
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 0
Deck Card: 5, Expected: 5
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 0
Hand Card: 5, Expected: 5
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 0
Hand Card: 5, Expected: 5
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 0
Hand Card: 5, Expected: 5
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 0
Hand Card: 5, Expected: 5
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 0
Hand Card: 5, Expected: 5
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 0
Hand Card: 5, Expected: 5
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 0
Hand Card: 5, Expected: 5
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 0
Deck Card: 6, Expected: 6
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 0
Deck Card: 6, Expected: 6
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 0
Deck Card: 6, Expected: 6
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 0
Deck Card: 6, Expected: 6
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 0
Deck Card: 6, Expected: 6
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 0
Deck Card: 6, Expected: 6
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 0
Deck Card: 6, Expected: 6
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 0
Hand Card: 6, Expected: 6
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 0
Hand Card: 6, Expected: 6
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 0
Hand Card: 6, Expected: 6
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 0
Hand Card: 6, Expected: 6
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 0
Hand Card: 6, Expected: 6
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 0
Hand Card: 6, Expected: 6
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 0
Hand Card: 6, Expected: 6
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 0
Deck Card: 7, Expected: 7
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 0
Deck Card: 7, Expected: 7
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 0
Deck Card: 7, Expected: 7
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 0
Deck Card: 7, Expected: 7
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 0
Deck Card: 7, Expected: 7
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 0
Deck Card: 7, Expected: 7
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 0
Deck Card: 7, Expected: 7
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 0
Hand Card: 7, Expected: 7
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 0
Hand Card: 7, Expected: 7
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 0
Hand Card: 7, Expected: 7
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 0
Hand Card: 7, Expected: 7
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 0
Hand Card: 7, Expected: 7
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 0
Hand Card: 7, Expected: 7
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 0
Hand Card: 7, Expected: 7
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 0
Deck Card: 8, Expected: 8
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 0
Deck Card: 8, Expected: 8
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 0
Deck Card: 8, Expected: 8
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 0
Deck Card: 8, Expected: 8
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 0
Deck Card: 8, Expected: 8
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 0
Deck Card: 8, Expected: 8
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 0
Deck Card: 8, Expected: 8
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 0
Hand Card: 8, Expected: 8
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 0
Hand Card: 8, Expected: 8
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 0
Hand Card: 8, Expected: 8
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 0
Hand Card: 8, Expected: 8
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 0
Hand Card: 8, Expected: 8
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 0
Hand Card: 8, Expected: 8
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 0
Hand Card: 8, Expected: 8
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 0
Deck Card: 9, Expected: 9
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 0
Deck Card: 9, Expected: 9
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 0
Deck Card: 9, Expected: 9
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 0
Deck Card: 9, Expected: 9
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 0
Deck Card: 9, Expected: 9
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 0
Deck Card: 9, Expected: 9
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 0
Deck Card: 9, Expected: 9
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 0
Hand Card: 9, Expected: 9
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 0
Hand Card: 9, Expected: 9
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 0
Hand Card: 9, Expected: 9
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 0
Hand Card: 9, Expected: 9
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 0
Hand Card: 9, Expected: 9
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 0
Hand Card: 9, Expected: 9
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 0
Hand Card: 9, Expected: 9
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 0
Deck Card: 10, Expected: 10
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 0
Deck Card: 10, Expected: 10
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 0
Deck Card: 10, Expected: 10
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 0
Deck Card: 10, Expected: 10
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 0
Deck Card: 10, Expected: 10
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 0
Deck Card: 10, Expected: 10
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 0
Deck Card: 10, Expected: 10
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 0
Hand Card: 10, Expected: 10
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 0
Hand Card: 10, Expected: 10
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 0
Hand Card: 10, Expected: 10
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 0
Hand Card: 10, Expected: 10
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 0
Hand Card: 10, Expected: 10
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 0
Hand Card: 10, Expected: 10
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 0
Hand Card: 10, Expected: 10
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 0
Deck Card: 11, Expected: 11
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 0
Deck Card: 11, Expected: 11
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 0
Deck Card: 11, Expected: 11
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 0
Deck Card: 11, Expected: 11
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 0
Deck Card: 11, Expected: 11
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 0
Deck Card: 11, Expected: 11
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 0
Deck Card: 11, Expected: 11
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 0
Hand Card: 11, Expected: 11
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 0
Hand Card: 11, Expected: 11
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 0
Hand Card: 11, Expected: 11
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 0
Hand Card: 11, Expected: 11
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 0
Hand Card: 11, Expected: 11
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 0
Hand Card: 11, Expected: 11
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 0
Hand Card: 11, Expected: 11
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 0
Deck Card: 12, Expected: 12
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 0
Deck Card: 12, Expected: 12
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 0
Deck Card: 12, Expected: 12
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 0
Deck Card: 12, Expected: 12
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 0
Deck Card: 12, Expected: 12
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 0
Deck Card: 12, Expected: 12
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 0
Deck Card: 12, Expected: 12
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 0
Hand Card: 12, Expected: 12
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 0
Hand Card: 12, Expected: 12
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 0
Hand Card: 12, Expected: 12
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 0
Hand Card: 12, Expected: 12
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 0
Hand Card: 12, Expected: 12
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 0
Hand Card: 12, Expected: 12
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 0
Hand Card: 12, Expected: 12
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 0
Deck Card: 13, Expected: 13
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 0
Deck Card: 13, Expected: 13
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 0
Deck Card: 13, Expected: 13
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 0
Deck Card: 13, Expected: 13
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 0
Deck Card: 13, Expected: 13
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 0
Deck Card: 13, Expected: 13
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 0
Deck Card: 13, Expected: 13
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 0
Hand Card: 13, Expected: 13
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 0
Hand Card: 13, Expected: 13
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 0
Hand Card: 13, Expected: 13
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 0
Hand Card: 13, Expected: 13
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 0
Hand Card: 13, Expected: 13
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 0
Hand Card: 13, Expected: 13
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 0
Hand Card: 13, Expected: 13
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 0
Deck Card: 14, Expected: 14
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 0
Deck Card: 14, Expected: 14
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 0
Deck Card: 14, Expected: 14
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 0
Deck Card: 14, Expected: 14
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 0
Deck Card: 14, Expected: 14
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 0
Deck Card: 14, Expected: 14
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 0
Deck Card: 14, Expected: 14
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 0
Hand Card: 14, Expected: 14
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 0
Hand Card: 14, Expected: 14
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 0
Hand Card: 14, Expected: 14
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 0
Hand Card: 14, Expected: 14
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 0
Hand Card: 14, Expected: 14
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 0
Hand Card: 14, Expected: 14
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 0
Hand Card: 14, Expected: 14
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 0
Deck Card: 15, Expected: 15
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 0
Deck Card: 15, Expected: 15
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 0
Deck Card: 15, Expected: 15
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 0
Deck Card: 15, Expected: 15
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 0
Deck Card: 15, Expected: 15
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 0
Deck Card: 15, Expected: 15
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 0
Deck Card: 15, Expected: 15
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 0
Hand Card: 15, Expected: 15
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 0
Hand Card: 15, Expected: 15
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 0
Hand Card: 15, Expected: 15
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 0
Hand Card: 15, Expected: 15
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 0
Hand Card: 15, Expected: 15
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 0
Hand Card: 15, Expected: 15
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 0
Hand Card: 15, Expected: 15
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 0
Deck Card: 16, Expected: 16
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 0
Deck Card: 16, Expected: 16
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 0
Deck Card: 16, Expected: 16
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 0
Deck Card: 16, Expected: 16
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 0
Deck Card: 16, Expected: 16
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 0
Deck Card: 16, Expected: 16
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 0
Deck Card: 16, Expected: 16
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 0
Hand Card: 16, Expected: 16
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 0
Hand Card: 16, Expected: 16
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 0
Hand Card: 16, Expected: 16
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 0
Hand Card: 16, Expected: 16
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 0
Hand Card: 16, Expected: 16
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 0
Hand Card: 16, Expected: 16
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 0
Hand Card: 16, Expected: 16
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 1
Deck Card: 0, Expected: 0
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 1
Deck Card: 0, Expected: 0
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 1
Deck Card: 0, Expected: 0
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 1
Deck Card: 0, Expected: 0
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 1
Deck Card: 0, Expected: 0
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 1
Deck Card: 0, Expected: 0
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 1
Deck Card: 0, Expected: 0
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 1
Hand Card: 0, Expected: 0
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 1
Hand Card: 0, Expected: 0
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 1
Hand Card: 0, Expected: 0
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 1
Hand Card: 0, Expected: 0
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 1
Hand Card: 0, Expected: 0
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 1
Hand Card: 0, Expected: 0
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 1
Hand Card: 0, Expected: 0
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 1
Deck Card: 1, Expected: 1
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 1
Deck Card: 1, Expected: 1
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 1
Deck Card: 1, Expected: 1
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 1
Deck Card: 1, Expected: 1
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 1
Deck Card: 1, Expected: 1
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 1
Deck Card: 1, Expected: 1
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 1
Deck Card: 1, Expected: 1
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 1
Hand Card: 1, Expected: 1
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 1
Hand Card: 1, Expected: 1
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 1
Hand Card: 1, Expected: 1
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 1
Hand Card: 1, Expected: 1
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 1
Hand Card: 1, Expected: 1
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 1
Hand Card: 1, Expected: 1
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 1
Hand Card: 1, Expected: 1
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 1
Deck Card: 2, Expected: 2
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 1
Deck Card: 2, Expected: 2
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 1
Deck Card: 2, Expected: 2
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 1
Deck Card: 2, Expected: 2
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 1
Deck Card: 2, Expected: 2
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 1
Deck Card: 2, Expected: 2
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 1
Deck Card: 2, Expected: 2
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 1
Hand Card: 2, Expected: 2
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 1
Hand Card: 2, Expected: 2
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 1
Hand Card: 2, Expected: 2
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 1
Hand Card: 2, Expected: 2
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 1
Hand Card: 2, Expected: 2
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 1
Hand Card: 2, Expected: 2
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 1
Hand Card: 2, Expected: 2
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 1
Deck Card: 3, Expected: 3
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 1
Deck Card: 3, Expected: 3
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 1
Deck Card: 3, Expected: 3
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 1
Deck Card: 3, Expected: 3
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 1
Deck Card: 3, Expected: 3
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 1
Deck Card: 3, Expected: 3
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 1
Deck Card: 3, Expected: 3
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 1
Hand Card: 3, Expected: 3
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 1
Hand Card: 3, Expected: 3
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 1
Hand Card: 3, Expected: 3
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 1
Hand Card: 3, Expected: 3
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 1
Hand Card: 3, Expected: 3
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 1
Hand Card: 3, Expected: 3
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 1
Hand Card: 3, Expected: 3
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 1
Deck Card: 4, Expected: 4
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 1
Deck Card: 4, Expected: 4
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 1
Deck Card: 4, Expected: 4
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 1
Deck Card: 4, Expected: 4
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 1
Deck Card: 4, Expected: 4
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 1
Deck Card: 4, Expected: 4
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 1
Deck Card: 4, Expected: 4
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 1
Hand Card: 4, Expected: 4
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 1
Hand Card: 4, Expected: 4
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 1
Hand Card: 4, Expected: 4
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 1
Hand Card: 4, Expected: 4
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 1
Hand Card: 4, Expected: 4
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 1
Hand Card: 4, Expected: 4
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 1
Hand Card: 4, Expected: 4
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 1
Deck Card: 5, Expected: 5
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 1
Deck Card: 5, Expected: 5
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 1
Deck Card: 5, Expected: 5
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 1
Deck Card: 5, Expected: 5
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 1
Deck Card: 5, Expected: 5
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 1
Deck Card: 5, Expected: 5
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 1
Deck Card: 5, Expected: 5
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 1
Hand Card: 5, Expected: 5
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 1
Hand Card: 5, Expected: 5
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 1
Hand Card: 5, Expected: 5
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 1
Hand Card: 5, Expected: 5
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 1
Hand Card: 5, Expected: 5
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 1
Hand Card: 5, Expected: 5
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 1
Hand Card: 5, Expected: 5
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 1
Deck Card: 6, Expected: 6
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 1
Deck Card: 6, Expected: 6
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 1
Deck Card: 6, Expected: 6
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 1
Deck Card: 6, Expected: 6
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 1
Deck Card: 6, Expected: 6
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 1
Deck Card: 6, Expected: 6
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 1
Deck Card: 6, Expected: 6
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 1
Hand Card: 6, Expected: 6
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 1
Hand Card: 6, Expected: 6
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 1
Hand Card: 6, Expected: 6
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 1
Hand Card: 6, Expected: 6
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 1
Hand Card: 6, Expected: 6
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 1
Hand Card: 6, Expected: 6
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 1
Hand Card: 6, Expected: 6
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 1
Deck Card: 7, Expected: 7
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 1
Deck Card: 7, Expected: 7
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 1
Deck Card: 7, Expected: 7
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 1
Deck Card: 7, Expected: 7
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 1
Deck Card: 7, Expected: 7
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 1
Deck Card: 7, Expected: 7
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 1
Deck Card: 7, Expected: 7
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 1
Hand Card: 7, Expected: 7
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 1
Hand Card: 7, Expected: 7
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 1
Hand Card: 7, Expected: 7
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 1
Hand Card: 7, Expected: 7
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 1
Hand Card: 7, Expected: 7
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 1
Hand Card: 7, Expected: 7
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 1
Hand Card: 7, Expected: 7
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 1
Deck Card: 8, Expected: 8
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 1
Deck Card: 8, Expected: 8
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 1
Deck Card: 8, Expected: 8
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 1
Deck Card: 8, Expected: 8
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 1
Deck Card: 8, Expected: 8
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 1
Deck Card: 8, Expected: 8
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 1
Deck Card: 8, Expected: 8
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 1
Hand Card: 8, Expected: 8
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 1
Hand Card: 8, Expected: 8
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 1
Hand Card: 8, Expected: 8
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 1
Hand Card: 8, Expected: 8
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 1
Hand Card: 8, Expected: 8
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 1
Hand Card: 8, Expected: 8
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 1
Hand Card: 8, Expected: 8
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 1
Deck Card: 9, Expected: 9
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 1
Deck Card: 9, Expected: 9
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 1
Deck Card: 9, Expected: 9
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 1
Deck Card: 9, Expected: 9
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 1
Deck Card: 9, Expected: 9
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 1
Deck Card: 9, Expected: 9
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 1
Deck Card: 9, Expected: 9
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 1
Hand Card: 9, Expected: 9
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 1
Hand Card: 9, Expected: 9
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 1
Hand Card: 9, Expected: 9
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 1
Hand Card: 9, Expected: 9
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 1
Hand Card: 9, Expected: 9
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 1
Hand Card: 9, Expected: 9
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 1
Hand Card: 9, Expected: 9
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 1
Deck Card: 10, Expected: 10
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 1
Deck Card: 10, Expected: 10
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 1
Deck Card: 10, Expected: 10
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 1
Deck Card: 10, Expected: 10
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 1
Deck Card: 10, Expected: 10
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 1
Deck Card: 10, Expected: 10
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 1
Deck Card: 10, Expected: 10
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 1
Hand Card: 10, Expected: 10
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 1
Hand Card: 10, Expected: 10
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 1
Hand Card: 10, Expected: 10
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 1
Hand Card: 10, Expected: 10
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 1
Hand Card: 10, Expected: 10
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 1
Hand Card: 10, Expected: 10
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 1
Hand Card: 10, Expected: 10
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 1
Deck Card: 11, Expected: 11
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 1
Deck Card: 11, Expected: 11
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 1
Deck Card: 11, Expected: 11
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 1
Deck Card: 11, Expected: 11
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 1
Deck Card: 11, Expected: 11
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 1
Deck Card: 11, Expected: 11
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 1
Deck Card: 11, Expected: 11
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 1
Hand Card: 11, Expected: 11
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 1
Hand Card: 11, Expected: 11
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 1
Hand Card: 11, Expected: 11
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 1
Hand Card: 11, Expected: 11
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 1
Hand Card: 11, Expected: 11
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 1
Hand Card: 11, Expected: 11
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 1
Hand Card: 11, Expected: 11
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 1
Deck Card: 12, Expected: 12
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 1
Deck Card: 12, Expected: 12
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 1
Deck Card: 12, Expected: 12
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 1
Deck Card: 12, Expected: 12
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 1
Deck Card: 12, Expected: 12
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 1
Deck Card: 12, Expected: 12
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 1
Deck Card: 12, Expected: 12
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 1
Hand Card: 12, Expected: 12
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 1
Hand Card: 12, Expected: 12
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 1
Hand Card: 12, Expected: 12
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 1
Hand Card: 12, Expected: 12
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 1
Hand Card: 12, Expected: 12
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 1
Hand Card: 12, Expected: 12
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 1
Hand Card: 12, Expected: 12
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 1
Deck Card: 13, Expected: 13
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 1
Deck Card: 13, Expected: 13
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 1
Deck Card: 13, Expected: 13
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 1
Deck Card: 13, Expected: 13
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 1
Deck Card: 13, Expected: 13
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 1
Deck Card: 13, Expected: 13
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 1
Deck Card: 13, Expected: 13
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 1
Hand Card: 13, Expected: 13
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 1
Hand Card: 13, Expected: 13
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 1
Hand Card: 13, Expected: 13
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 1
Hand Card: 13, Expected: 13
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 1
Hand Card: 13, Expected: 13
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 1
Hand Card: 13, Expected: 13
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 1
Hand Card: 13, Expected: 13
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 1
Deck Card: 14, Expected: 14
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 1
Deck Card: 14, Expected: 14
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 1
Deck Card: 14, Expected: 14
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 1
Deck Card: 14, Expected: 14
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 1
Deck Card: 14, Expected: 14
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 1
Deck Card: 14, Expected: 14
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 1
Deck Card: 14, Expected: 14
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 1
Hand Card: 14, Expected: 14
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 1
Hand Card: 14, Expected: 14
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 1
Hand Card: 14, Expected: 14
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 1
Hand Card: 14, Expected: 14
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 1
Hand Card: 14, Expected: 14
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 1
Hand Card: 14, Expected: 14
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 1
Hand Card: 14, Expected: 14
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 1
Deck Card: 15, Expected: 15
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 1
Deck Card: 15, Expected: 15
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 1
Deck Card: 15, Expected: 15
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 1
Deck Card: 15, Expected: 15
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 1
Deck Card: 15, Expected: 15
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 1
Deck Card: 15, Expected: 15
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 1
Deck Card: 15, Expected: 15
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 1
Hand Card: 15, Expected: 15
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 1
Hand Card: 15, Expected: 15
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 1
Hand Card: 15, Expected: 15
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 1
Hand Card: 15, Expected: 15
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 1
Hand Card: 15, Expected: 15
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 1
Hand Card: 15, Expected: 15
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 1
Hand Card: 15, Expected: 15
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 1
Deck Card: 16, Expected: 16
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 1
Deck Card: 16, Expected: 16
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 1
Deck Card: 16, Expected: 16
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 1
Deck Card: 16, Expected: 16
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 1
Deck Card: 16, Expected: 16
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 1
Deck Card: 16, Expected: 16
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 1
Deck Card: 16, Expected: 16
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 1
Hand Card: 16, Expected: 16
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 1
Hand Card: 16, Expected: 16
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 1
Hand Card: 16, Expected: 16
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 1
Hand Card: 16, Expected: 16
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 1
Hand Card: 16, Expected: 16
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 1
Hand Card: 16, Expected: 16
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 1
Hand Card: 16, Expected: 16
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
All tests passed!
File 'dominion.c'
Lines executed:51.01% of 643
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:53
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
   179075:    9:  if (*(int*)a > *(int*)b)
      336:   10:    return 1;
   178739:   11:  if (*(int*)a < *(int*)b)
    63944:   12:    return -1;
   114795:   13:  return 0;
   179075:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     6356:   44:  SelectStream(1);
     6356:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
    12712:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     6356:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   139832:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
  1398320:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
  1207640:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
   635600:   65:        }
    63560:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     6356:   73:  if (numPlayers == 2)
        -:   74:    {
     6356:   75:      state->supplyCount[curse] = 10;
     6356:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     6356:   87:  if (numPlayers == 2)
        -:   88:    {
     6356:   89:      state->supplyCount[estate] = 8;
     6356:   90:      state->supplyCount[duchy] = 8;
     6356:   91:      state->supplyCount[province] = 8;
     6356:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     6356:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     6356:  102:  state->supplyCount[silver] = 40;
     6356:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   266952:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
  2097480:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
   985180:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
   120766:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    12710:  115:		  if (numPlayers == 2){ 
    12710:  116:		    state->supplyCount[i] = 8; 
    12710:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
    12710:  119:		}
        -:  120:	      else
        -:  121:		{
    50850:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    63560:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   921620:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
   921620:  130:	}
        -:  131:
   127120:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    38136:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
    12712:  140:      state->deckCount[i] = 0;
   101696:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    38136:  143:	  state->deck[i][j] = estate;
    38136:  144:	  state->deckCount[i]++;
    38136:  145:	}
   203392:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    88984:  148:	  state->deck[i][j] = copper;
    88984:  149:	  state->deckCount[i]++;		
    88984:  150:	}
    12712:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    38136:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
    12712:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
    12712:  160:    }
        -:  161:
        -:  162:  //draw player hands
    38136:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    12712:  166:      state->handCount[i] = 0;
    12712:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
    12712:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
   355936:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
   171612:  178:      state->embargoTokens[i] = 0;
   171612:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     6356:  182:  state->outpostPlayed = 0;
     6356:  183:  state->phase = 0;
     6356:  184:  state->numActions = 1;
     6356:  185:  state->numBuys = 1;
     6356:  186:  state->playedCardCount = 0;
     6356:  187:  state->whoseTurn = 0;
     6356:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    76272:  192:  for (it = 0; it < 5; it++){
    31780:  193:    drawCard(state->whoseTurn, state);
    31780:  194:  }
        -:  195:
     6356:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     6356:  198:  return 0;
     6356:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    24305:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    24305:  209:  if (state->deckCount[player] < 1)
    11558:  210:    return -1;
    12747:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   280694:  214:  while (state->deckCount[player] > 0) {
   127600:  215:    card = floor(Random() * state->deckCount[player]);
   127600:  216:    newDeck[newDeckPos] = state->deck[player][card];
   127600:  217:    newDeckPos++;
   894204:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   319502:  219:      state->deck[player][i] = state->deck[player][i+1];
   319502:  220:    }
   127600:  221:    state->deckCount[player]--;
        -:  222:  }
   280694:  223:  for (i = 0; i < newDeckPos; i++) {
   127600:  224:    state->deck[player][i] = newDeck[i];
   127600:  225:    state->deckCount[player]++;
   127600:  226:  }
        -:  227:
    12747:  228:  return 0;
    24305:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
       61:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       61:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
       61:  243:  if ( state->numActions < 1 )
        -:  244:    {
       36:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
       25:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
       32:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
       18:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
        7:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        7:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        7:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
        7:  269:  return 0;
       61:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
       73:  280:  who = state->whoseTurn;
        -:  281:
       73:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
       73:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
       73:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
       73:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
       73:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
       73:  299:    state->coins = (state->coins) - (getCost(supplyPos));
       73:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
       73:  308:  return 0;
       73:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
      536:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
     1128:  316:  int currentPlayer = whoseTurn(state);
     1128:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
     9743:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
     1110:  326:  int count = 0;
        -:  327:
    16734:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
     8409:  330:      if (state->deck[player][i] == card) count++;
     7257:  331:    }
        -:  332:
    38886:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    21454:  335:      if (state->hand[player][i] == card) count++;
    18333:  336:    }
        -:  337:
    30444:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    16464:  340:      if (state->discard[player][i] == card) count++;
    14112:  341:    }
        -:  342:
     1110:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
     1865:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
       77:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
      988:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
      417:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      417:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
      417:  359:  }
       77:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
       77:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
       39:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
       39:  365:  }
        -:  366:  else{
       38:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
       77:  370:  state->outpostPlayed = 0;
       77:  371:  state->phase = 0;
       77:  372:  state->numActions = 1;
       77:  373:  state->coins = 0;
       77:  374:  state->numBuys = 1;
       77:  375:  state->playedCardCount = 0;
       77:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
      924:  380:  for (k = 0; k < 5; k++){
      385:  381:    drawCard(state->whoseTurn, state);//Draw a card
      385:  382:  }
        -:  383:
        -:  384:  //Update money
       77:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
       77:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
      567:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
      202:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
      365:  401:  j = 0;
    18980:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
     9125:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
      576:  406:	  j++;
      576:  407:	}
     9125:  408:    }
      365:  409:  if ( j >= 3)
        -:  410:    {
       96:  411:      return 1;
        -:  412:    }
        -:  413:
      269:  414:  return 0;
      567:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
      214:  420:  int score = 0;
        -:  421:  //score from hand
     5488:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
     2966:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
     2935:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
     2938:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
     2943:  427:      if (state->hand[player][i] == province) { score = score + 6; };
     2946:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
     2950:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     2530:  430:    }
        -:  431:
        -:  432:  //score from discard
     3344:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
     1698:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
     1700:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
     1698:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
     1702:  438:      if (state->discard[player][i] == province) { score = score + 6; };
     1698:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
     1698:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     1458:  441:    }
        -:  442:
        -:  443:  //score from deck
     3344:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
     1698:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
     1701:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
     1698:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
     1700:  449:      if (state->deck[player][i] == province) { score = score + 6; };
     1698:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
     1698:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     1458:  452:    }
        -:  453:
      214:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    38884:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    13088:  533:    for (i = 0; i < state->discardCount[player];i++){
      480:  534:      state->deck[player][i] = state->discard[player][i];
      480:  535:      state->discard[player][i] = -1;
      480:  536:    }
        -:  537:
     6064:  538:    state->deckCount[player] = state->discardCount[player];
     6064:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     6064:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     6064:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     6064:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     6064:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     6064:  559:    if (deckCounter == 0)
     6029:  560:      return -1;
        -:  561:
       35:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       35:  563:    state->deckCount[player]--;
       35:  564:    state->handCount[player]++;//Increment hand count
       35:  565:  }
        -:  566:
        -:  567:  else{
    32820:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    32820:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    32820:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    32820:  576:    state->deckCount[player]--;
    32820:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    32855:  580:  return 0;
    38884:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
      146:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
       32:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
       70:  598:      return 3;
        -:  599:    case gold:
       28:  600:      return 6;
        -:  601:    case adventurer:
        8:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
        8:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
      146:  644:}
        -:  645:
        -:  646://smithy function to introduce a bug
        -:  647:int smithyfun(int currentPlayer, struct gameState *state, int handPos){
        -:  648:  //+3 Cards
        -:  649:  int i;
      528:  650:  for (i = 0; i <= 3; i++)
        -:  651:  {
      211:  652:    drawCard(currentPlayer, state);
      211:  653:  }
        -:  654:      
        -:  655:      //discard card from hand
       53:  656:      discardCard(handPos, currentPlayer, state, 0);
       53:  657:      return 0;
        -:  658:}
        -:  659:
        -:  660://adventurer function to introduce a bug
        -:  661:int adventurerfun(int currentPlayer, struct gameState *state){
        -:  662:    int cardDrawn;
        -:  663:    int temphand[MAX_HAND];
2291246309455167536:  664:    int drawntreasure = 0;
2291246309455167536:  665:    int z = 0;
        -:  666:
10104103169071347668:  667:  while(drawntreasure <= 2){
72057701412115936:  668:      if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
17981540015:  669:          shuffle(currentPlayer, state);
17981540015:  670:      }
7018965447127852775:  671:  drawCard(currentPlayer, state);
7018965447127852775:  672:  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
14469171020717093779:  673:  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    28349:  674:  drawntreasure++;
        -:  675:  else{
     5492:  676:  temphand[z]=cardDrawn;
     5492:  677:  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     5492:  678:  z++;
        -:  679:  }
        -:  680:}
        -:  681:    
    11124:  682:    while(z-1>=0){
     5492:  683:  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     5492:  684:      z=z-1;
        -:  685:    }
       70:  686:    return 0;
        -:  687:}
        -:  688:
        -:  689:int villagefun(int handPos, int currentPlayer, struct gameState *state){
        -:  690:        //+1 Card
        3:  691:        drawCard(currentPlayer, state);
        -:  692:        
        -:  693:        //+2 Actions
        3:  694:        state->numActions = state->numActions + 2;
        -:  695:        
        -:  696:        //discard played card from hand
        -:  697:        //discardCard(handPos, currentPlayer, state, 0);
        3:  698:        return 0;
        -:  699:}
        -:  700:
        -:  701:int great_hallfun(int currentPlayer, struct gameState *state, int handPos){
        -:  702:        //+1 Card
    #####:  703:        drawCard(currentPlayer, state);
        -:  704:        
        -:  705:        //+1 Actions
    #####:  706:        state->numActions++;
        -:  707:        
        -:  708:        //discard card from hand
    #####:  709:        discardCard(handPos, currentPlayer, state, 0);
    #####:  710:        return 0;
        -:  711:}
        -:  712:
        -:  713:int stewardfun(int choice1, int choice2, int choice3, int handPos, int currentPlayer, struct gameState *state){
        -:  714:
      120:  715:  if (choice1 == 1)
        -:  716:	{
        -:  717:	  //+2 cards
       40:  718:	  drawCard(currentPlayer, state);
       40:  719:	  drawCard(currentPlayer, state);
       40:  720:	}
       80:  721:      else if (choice2 == 2)
        -:  722:	{
        -:  723:	  //+2 coins
    #####:  724:	  state->coins = state->coins + 2;
    #####:  725:	}
        -:  726:      else
        -:  727:	{
        -:  728:	  //trash 2 cards in hand
       80:  729:	  discardCard(choice2, currentPlayer, state, 1);
       80:  730:	  discardCard(choice3, currentPlayer, state, 1);
        -:  731:	}
        -:  732:			
        -:  733:      //discard card from hand
      120:  734:      discardCard(handPos, currentPlayer, state, 0);
      120:  735:      return 0;
        -:  736:}
        -:  737:
        -:  738:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  739:{
        -:  740:  int i;
        -:  741:  int j;
        -:  742:  int k;
        -:  743:  int x;
        -:  744:  int index;
       47:  745:  int currentPlayer = whoseTurn(state);
       47:  746:  int nextPlayer = currentPlayer + 1;
        -:  747:
       47:  748:  int tributeRevealedCards[2] = {-1, -1};
        -:  749:  int temphand[MAX_HAND];// moved above the if statement
       47:  750:  if (nextPlayer > (state->numPlayers - 1)){
        4:  751:    nextPlayer = 0;
        4:  752:  }
        -:  753:  
        -:  754:	
        -:  755:  //uses switch to select card and perform actions
       57:  756:  switch( card ) 
        -:  757:    {
        -:  758:    case adventurer:
        4:  759:      adventurerfun(currentPlayer, state);
        -:  760:			
        -:  761:    case council_room:
        -:  762:      //+4 Cards
      440:  763:      for (i = 0; i < 4; i++)
        -:  764:	{
      176:  765:	  drawCard(currentPlayer, state);
      176:  766:	}
        -:  767:			
        -:  768:      //+1 Buy
       44:  769:      state->numBuys++;
        -:  770:			
        -:  771:      //Each other player draws a card
      264:  772:      for (i = 0; i < state->numPlayers; i++)
        -:  773:	{
       88:  774:	  if ( i != currentPlayer )
        -:  775:	    {
       44:  776:	      drawCard(i, state);
       44:  777:	    }
       88:  778:	}
        -:  779:			
        -:  780:      //put played card in played card pile
       44:  781:      discardCard(handPos, currentPlayer, state, 0);
        -:  782:			
       44:  783:      return 0;
        -:  784:			
        -:  785:    case feast:
        -:  786:      //gain card with cost up to 5
        -:  787:      //Backup hand
    #####:  788:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  789:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  790:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  791:      }
        -:  792:      //Backup hand
        -:  793:
        -:  794:      //Update Coins for Buy
    #####:  795:      updateCoins(currentPlayer, state, 5);
    #####:  796:      x = 1;//Condition to loop on
    #####:  797:      while( x == 1) {//Buy one card
    #####:  798:	if (supplyCount(choice1, state) <= 0){
        -:  799:	  if (DEBUG)
        -:  800:	    printf("None of that card left, sorry!\n");
        -:  801:
        -:  802:	  if (DEBUG){
        -:  803:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  804:	  }
    #####:  805:	}
    #####:  806:	else if (state->coins < getCost(choice1)){
    #####:  807:	  printf("That card is too expensive!\n");
        -:  808:
        -:  809:	  if (DEBUG){
        -:  810:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  811:	  }
    #####:  812:	}
        -:  813:	else{
        -:  814:
        -:  815:	  if (DEBUG){
        -:  816:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  817:	  }
        -:  818:
    #####:  819:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  820:	  x = 0;//No more buying cards
        -:  821:
        -:  822:	  if (DEBUG){
        -:  823:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  824:	  }
        -:  825:
        -:  826:	}
        -:  827:      }     
        -:  828:
        -:  829:      //Reset Hand
    #####:  830:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  831:	state->hand[currentPlayer][i] = temphand[i];
    #####:  832:	temphand[i] = -1;
    #####:  833:      }
        -:  834:      //Reset Hand
        -:  835:      			
    #####:  836:      return 0;
        -:  837:			
        -:  838:    case gardens:
    #####:  839:      return -1;
        -:  840:			
        -:  841:    case mine:
    #####:  842:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  843:
    #####:  844:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  845:	{
    #####:  846:	  return -1;
        -:  847:	}
        -:  848:		
    #####:  849:      if (choice2 > treasure_map || choice2 < curse)
        -:  850:	{
    #####:  851:	  return -1;
        -:  852:	}
        -:  853:
    #####:  854:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  855:	{
    #####:  856:	  return -1;
        -:  857:	}
        -:  858:
    #####:  859:      gainCard(choice2, state, 2, currentPlayer);
        -:  860:
        -:  861:      //discard card from hand
    #####:  862:      discardCard(handPos, currentPlayer, state, 0);
        -:  863:
        -:  864:      //discard trashed card
    #####:  865:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  866:	{
    #####:  867:	  if (state->hand[currentPlayer][i] == j)
        -:  868:	    {
    #####:  869:	      discardCard(i, currentPlayer, state, 0);			
    #####:  870:	      break;
        -:  871:	    }
    #####:  872:	}
        -:  873:			
    #####:  874:      return 0;
        -:  875:			
        -:  876:    case remodel:
    #####:  877:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  878:
    #####:  879:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  880:	{
    #####:  881:	  return -1;
        -:  882:	}
        -:  883:
    #####:  884:      gainCard(choice2, state, 0, currentPlayer);
        -:  885:
        -:  886:      //discard card from hand
    #####:  887:      discardCard(handPos, currentPlayer, state, 0);
        -:  888:
        -:  889:      //discard trashed card
    #####:  890:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  891:	{
    #####:  892:	  if (state->hand[currentPlayer][i] == j)
        -:  893:	    {
    #####:  894:	      discardCard(i, currentPlayer, state, 0);			
    #####:  895:	      break;
        -:  896:	    }
    #####:  897:	}
        -:  898:
        -:  899:
    #####:  900:      return 0;
        -:  901:		
        -:  902:    case smithy:
        -:  903:      //+3 Cards
        3:  904:      smithyfun(currentPlayer, state, handPos);
        -:  905:
        -:  906:    case village:
        3:  907:      villagefun(handPos, currentPlayer, state);
        -:  908:		
        -:  909:    case baron:
        3:  910:      state->numBuys++;//Increase buys by 1!
        3:  911:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  912:	int p = 0;//Iterator for hand!
    #####:  913:	int card_not_discarded = 1;//Flag for discard set!
    #####:  914:	while(card_not_discarded){
    #####:  915:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  916:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  917:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  918:	    state->discardCount[currentPlayer]++;
    #####:  919:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  920:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  921:	    }
    #####:  922:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  923:	    state->handCount[currentPlayer]--;
    #####:  924:	    card_not_discarded = 0;//Exit the loop
    #####:  925:	  }
    #####:  926:	  else if (p > state->handCount[currentPlayer]){
        -:  927:	    if(DEBUG) {
        -:  928:	      printf("No estate cards in your hand, invalid choice\n");
        -:  929:	      printf("Must gain an estate if there are any\n");
        -:  930:	    }
    #####:  931:	    if (supplyCount(estate, state) > 0){
    #####:  932:	      gainCard(estate, state, 0, currentPlayer);
    #####:  933:	      state->supplyCount[estate]--;//Decrement estates
    #####:  934:	      if (supplyCount(estate, state) == 0){
    #####:  935:		isGameOver(state);
    #####:  936:	      }
    #####:  937:	    }
    #####:  938:	    card_not_discarded = 0;//Exit the loop
    #####:  939:	  }
        -:  940:			    
        -:  941:	  else{
    #####:  942:	    p++;//Next card
        -:  943:	  }
        -:  944:	}
    #####:  945:      }
        -:  946:			    
        -:  947:      else{
        3:  948:	if (supplyCount(estate, state) > 0){
        3:  949:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
        3:  950:	  state->supplyCount[estate]--;//Decrement Estates
        3:  951:	  if (supplyCount(estate, state) == 0){
    #####:  952:	    isGameOver(state);
    #####:  953:	  }
        3:  954:	}
        -:  955:      }
        -:  956:	    
        -:  957:      
        3:  958:      return 0;
        -:  959:		
        -:  960:    case great_hall:
    #####:  961:      great_hallfun(currentPlayer, state, handPos);
        -:  962:		
        -:  963:    case minion:
        -:  964:      //+1 action
    #####:  965:      state->numActions++;
        -:  966:			
        -:  967:      //discard card from hand
    #####:  968:      discardCard(handPos, currentPlayer, state, 0);
        -:  969:			
    #####:  970:      if (choice1)		//+2 coins
        -:  971:	{
    #####:  972:	  state->coins = state->coins + 2;
    #####:  973:	}
        -:  974:			
    #####:  975:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  976:	{
        -:  977:	  //discard hand
    #####:  978:	  while(numHandCards(state) > 0)
        -:  979:	    {
    #####:  980:	      discardCard(handPos, currentPlayer, state, 0);
        -:  981:	    }
        -:  982:				
        -:  983:	  //draw 4
    #####:  984:	  for (i = 0; i < 4; i++)
        -:  985:	    {
    #####:  986:	      drawCard(currentPlayer, state);
    #####:  987:	    }
        -:  988:				
        -:  989:	  //other players discard hand and redraw if hand size > 4
    #####:  990:	  for (i = 0; i < state->numPlayers; i++)
        -:  991:	    {
    #####:  992:	      if (i != currentPlayer)
        -:  993:		{
    #####:  994:		  if ( state->handCount[i] > 4 )
        -:  995:		    {
        -:  996:		      //discard hand
    #####:  997:		      while( state->handCount[i] > 0 )
        -:  998:			{
    #####:  999:			  discardCard(handPos, i, state, 0);
        -: 1000:			}
        -: 1001:							
        -: 1002:		      //draw 4
    #####: 1003:		      for (j = 0; j < 4; j++)
        -: 1004:			{
    #####: 1005:			  drawCard(i, state);
    #####: 1006:			}
    #####: 1007:		    }
    #####: 1008:		}
    #####: 1009:	    }
        -: 1010:				
    #####: 1011:	}
    #####: 1012:      return 0;
        -: 1013:		
        -: 1014:    case steward:
    #####: 1015:      stewardfun(choice1, choice2, choice3, handPos, currentPlayer, state);
        -: 1016:
        -: 1017:		
        -: 1018:    case tribute:
    #####: 1019:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1020:	if (state->deckCount[nextPlayer] > 0){
    #####: 1021:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1022:	  state->deckCount[nextPlayer]--;
    #####: 1023:	}
    #####: 1024:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1025:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1026:	  state->discardCount[nextPlayer]--;
    #####: 1027:	}
        -: 1028:	else{
        -: 1029:	  //No Card to Reveal
        -: 1030:	  if (DEBUG){
        -: 1031:	    printf("No cards to reveal\n");
        -: 1032:	  }
        -: 1033:	}
    #####: 1034:      }
        -: 1035:	    
        -: 1036:      else{
    #####: 1037:	if (state->deckCount[nextPlayer] == 0){
    #####: 1038:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1039:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1040:	    state->deckCount[nextPlayer]++;
    #####: 1041:	    state->discard[nextPlayer][i] = -1;
    #####: 1042:	    state->discardCount[nextPlayer]--;
    #####: 1043:	  }
        -: 1044:			    
    #####: 1045:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1046:	} 
    #####: 1047:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1048:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1049:	state->deckCount[nextPlayer]--;
    #####: 1050:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1051:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1052:	state->deckCount[nextPlayer]--;
        -: 1053:      }    
        -: 1054:		       
    #####: 1055:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1056:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1057:	state->playedCardCount++;
    #####: 1058:	tributeRevealedCards[1] = -1;
    #####: 1059:      }
        -: 1060:
    #####: 1061:      for (i = 0; i <= 2; i ++){
    #####: 1062:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1063:	  state->coins += 2;
    #####: 1064:	}
        -: 1065:		    
    #####: 1066:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1067:	  drawCard(currentPlayer, state);
    #####: 1068:	  drawCard(currentPlayer, state);
    #####: 1069:	}
        -: 1070:	else{//Action Card
    #####: 1071:	  state->numActions = state->numActions + 2;
        -: 1072:	}
    #####: 1073:      }
        -: 1074:	    
    #####: 1075:      return 0;
        -: 1076:		
        -: 1077:    case ambassador:
    #####: 1078:      j = 0;		//used to check if player has enough cards to discard
        -: 1079:
    #####: 1080:      if (choice2 > 2 || choice2 < 0)
        -: 1081:	{
    #####: 1082:	  return -1;				
        -: 1083:	}
        -: 1084:
    #####: 1085:      if (choice1 == handPos)
        -: 1086:	{
    #####: 1087:	  return -1;
        -: 1088:	}
        -: 1089:
    #####: 1090:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1091:	{
    #####: 1092:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1093:	    {
    #####: 1094:	      j++;
    #####: 1095:	    }
    #####: 1096:	}
    #####: 1097:      if (j < choice2)
        -: 1098:	{
    #####: 1099:	  return -1;				
        -: 1100:	}
        -: 1101:
        -: 1102:      if (DEBUG) 
        -: 1103:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1104:
        -: 1105:      //increase supply count for choosen card by amount being discarded
    #####: 1106:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1107:			
        -: 1108:      //each other player gains a copy of revealed card
    #####: 1109:      for (i = 0; i < state->numPlayers; i++)
        -: 1110:	{
    #####: 1111:	  if (i != currentPlayer)
        -: 1112:	    {
    #####: 1113:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1114:	    }
    #####: 1115:	}
        -: 1116:
        -: 1117:      //discard played card from hand
    #####: 1118:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1119:
        -: 1120:      //trash copies of cards returned to supply
    #####: 1121:      for (j = 0; j < choice2; j++)
        -: 1122:	{
    #####: 1123:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1124:	    {
    #####: 1125:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1126:		{
    #####: 1127:		  discardCard(i, currentPlayer, state, 1);
    #####: 1128:		  break;
        -: 1129:		}
    #####: 1130:	    }
    #####: 1131:	}			
        -: 1132:
    #####: 1133:      return 0;
        -: 1134:		
        -: 1135:    case cutpurse:
        -: 1136:
    #####: 1137:      updateCoins(currentPlayer, state, 2);
    #####: 1138:      for (i = 0; i < state->numPlayers; i++)
        -: 1139:	{
    #####: 1140:	  if (i != currentPlayer)
        -: 1141:	    {
    #####: 1142:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1143:		{
    #####: 1144:		  if (state->hand[i][j] == copper)
        -: 1145:		    {
    #####: 1146:		      discardCard(j, i, state, 0);
    #####: 1147:		      break;
        -: 1148:		    }
    #####: 1149:		  if (j == state->handCount[i])
        -: 1150:		    {
    #####: 1151:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1152:			{
        -: 1153:			  if (DEBUG)
        -: 1154:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1155:			}	
    #####: 1156:		      break;
        -: 1157:		    }		
    #####: 1158:		}
        -: 1159:					
    #####: 1160:	    }
        -: 1161:				
    #####: 1162:	}				
        -: 1163:
        -: 1164:      //discard played card from hand
    #####: 1165:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1166:
    #####: 1167:      return 0;
        -: 1168:
        -: 1169:		
        -: 1170:    case embargo: 
        -: 1171:      //+2 Coins
    #####: 1172:      state->coins = state->coins + 2;
        -: 1173:			
        -: 1174:      //see if selected pile is in play
    #####: 1175:      if ( state->supplyCount[choice1] == -1 )
        -: 1176:	{
    #####: 1177:	  return -1;
        -: 1178:	}
        -: 1179:			
        -: 1180:      //add embargo token to selected supply pile
    #####: 1181:      state->embargoTokens[choice1]++;
        -: 1182:			
        -: 1183:      //trash card
    #####: 1184:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1185:      return 0;
        -: 1186:		
        -: 1187:    case outpost:
        -: 1188:      //set outpost flag
    #####: 1189:      state->outpostPlayed++;
        -: 1190:			
        -: 1191:      //discard card
    #####: 1192:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1193:      return 0;
        -: 1194:		
        -: 1195:    case salvager:
        -: 1196:      //+1 buy
    #####: 1197:      state->numBuys++;
        -: 1198:			
    #####: 1199:      if (choice1)
        -: 1200:	{
        -: 1201:	  //gain coins equal to trashed card
    #####: 1202:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1203:	  //trash card
    #####: 1204:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1205:	}
        -: 1206:			
        -: 1207:      //discard card
    #####: 1208:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1209:      return 0;
        -: 1210:		
        -: 1211:    case sea_hag:
    #####: 1212:      for (i = 0; i < state->numPlayers; i++){
    #####: 1213:	if (i != currentPlayer){
    #####: 1214:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1215:	  state->discardCount[i]++;
    #####: 1216:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1217:	}
    #####: 1218:      }
    #####: 1219:      return 0;
        -: 1220:		
        -: 1221:    case treasure_map:
        -: 1222:      //search hand for another treasure_map
    #####: 1223:      index = -1;
    #####: 1224:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1225:	{
    #####: 1226:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1227:	    {
    #####: 1228:	      index = i;
    #####: 1229:	      break;
        -: 1230:	    }
    #####: 1231:	}
    #####: 1232:      if (index > -1)
        -: 1233:	{
        -: 1234:	  //trash both treasure cards
    #####: 1235:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1236:	  discardCard(index, currentPlayer, state, 1);
        -: 1237:
        -: 1238:	  //gain 4 Gold cards
    #####: 1239:	  for (i = 0; i < 4; i++)
        -: 1240:	    {
    #####: 1241:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1242:	    }
        -: 1243:				
        -: 1244:	  //return success
    #####: 1245:	  return 1;
        -: 1246:	}
        -: 1247:			
        -: 1248:      //no second treasure_map found in hand
    #####: 1249:      return -1;
        -: 1250:    }
        -: 1251:	
    #####: 1252:  return -1;
       47: 1253:}
        -: 1254:
        -: 1255:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1256:{
        -: 1257:	
        -: 1258:  //if card is not trashed, added to Played pile 
      778: 1259:  if (trashFlag < 1)
        -: 1260:    {
        -: 1261:      //add card to played pile
      418: 1262:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      418: 1263:      state->playedCardCount++;
      418: 1264:    }
        -: 1265:	
        -: 1266:  //set played card to -1
      778: 1267:  state->hand[currentPlayer][handPos] = -1;
        -: 1268:	
        -: 1269:  //remove card from player's hand
      778: 1270:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1271:    {
        -: 1272:      //reduce number of cards in hand
      117: 1273:      state->handCount[currentPlayer]--;
      117: 1274:    }
      661: 1275:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1276:    {
        -: 1277:      //reduce number of cards in hand
       64: 1278:      state->handCount[currentPlayer]--;
       64: 1279:    }
        -: 1280:  else 	
        -: 1281:    {
        -: 1282:      //replace discarded card with last card in hand
      597: 1283:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1284:      //set last card to -1
      597: 1285:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1286:      //reduce number of cards in hand
      597: 1287:      state->handCount[currentPlayer]--;
        -: 1288:    }
        -: 1289:	
      778: 1290:  return 0;
        -: 1291:}
        -: 1292:
        -: 1293:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1294:{
        -: 1295:  //Note: supplyPos is enum of choosen card
        -: 1296:	
        -: 1297:  //check if supply pile is empty (0) or card is not used in game (-1)
     5040: 1298:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1299:    {
      680: 1300:      return -1;
        -: 1301:    }
        -: 1302:	
        -: 1303:  //added card for [whoseTurn] current player:
        -: 1304:  // toFlag = 0 : add to discard
        -: 1305:  // toFlag = 1 : add to deck
        -: 1306:  // toFlag = 2 : add to hand
        -: 1307:
     4360: 1308:  if (toFlag == 1)
        -: 1309:    {
     1666: 1310:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
     1666: 1311:      state->deckCount[player]++;
     1666: 1312:    }
     2694: 1313:  else if (toFlag == 2)
        -: 1314:    {
     1428: 1315:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
     1428: 1316:      state->handCount[player]++;
     1428: 1317:    }
        -: 1318:  else
        -: 1319:    {
     1266: 1320:      state->discard[player][ state->discardCount[player] ] = supplyPos;
     1266: 1321:      state->discardCount[player]++;
        -: 1322:    }
        -: 1323:	
        -: 1324:  //decrease number in supply pile
     4360: 1325:  state->supplyCount[supplyPos]--;
        -: 1326:	 
     4360: 1327:  return 0;
     5040: 1328:}
        -: 1329:
        -: 1330:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1331:{
        -: 1332:  int i;
        -: 1333:	
        -: 1334:  //reset coin count
     6770: 1335:  state->coins = 0;
        -: 1336:
        -: 1337:  //add coins for each Treasure card in player's hand
    79984: 1338:  for (i = 0; i < state->handCount[player]; i++)
        -: 1339:    {
    33222: 1340:      if (state->hand[player][i] == copper)
        -: 1341:	{
    25946: 1342:	  state->coins += 1;
    25946: 1343:	}
     7276: 1344:      else if (state->hand[player][i] == silver)
        -: 1345:	{
      433: 1346:	  state->coins += 2;
      433: 1347:	}
     6843: 1348:      else if (state->hand[player][i] == gold)
        -: 1349:	{
      353: 1350:	  state->coins += 3;
      353: 1351:	}	
    33222: 1352:    }	
        -: 1353:
        -: 1354:  //add bonus
     6770: 1355:  state->coins += bonus;
        -: 1356:
     6770: 1357:  return 0;
        -: 1358:}
        -: 1359:
        -: 1360:
        -: 1361://end of dominion.c
        -: 1362:
TESTING isGameOver():
Testing game with 0 province cards.
return value: 1, Expected: 1 
Testing game with 1 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 2 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 3 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 4 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 5 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 6 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 7 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 8 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 9 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 10 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 11 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 12 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 0 province cards.
return value: 1, Expected: 1 
Testing game with 1 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 2 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 3 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 4 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 5 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 6 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 7 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 8 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 9 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 10 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 11 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 12 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
All tests passed!
File 'dominion.c'
Lines executed:51.01% of 643
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:54
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
   179803:    9:  if (*(int*)a > *(int*)b)
      336:   10:    return 1;
   179467:   11:  if (*(int*)a < *(int*)b)
    64204:   12:    return -1;
   115263:   13:  return 0;
   179803:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     6382:   44:  SelectStream(1);
     6382:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
    12764:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     6382:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   140404:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
  1404040:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
  1212580:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
   638200:   65:        }
    63820:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     6382:   73:  if (numPlayers == 2)
        -:   74:    {
     6382:   75:      state->supplyCount[curse] = 10;
     6382:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     6382:   87:  if (numPlayers == 2)
        -:   88:    {
     6382:   89:      state->supplyCount[estate] = 8;
     6382:   90:      state->supplyCount[duchy] = 8;
     6382:   91:      state->supplyCount[province] = 8;
     6382:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     6382:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     6382:  102:  state->supplyCount[silver] = 40;
     6382:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   268044:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
  2106060:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
   989210:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
   121260:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    12762:  115:		  if (numPlayers == 2){ 
    12762:  116:		    state->supplyCount[i] = 8; 
    12762:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
    12762:  119:		}
        -:  120:	      else
        -:  121:		{
    51058:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    63820:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   925390:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
   925390:  130:	}
        -:  131:
   127640:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    38292:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
    12764:  140:      state->deckCount[i] = 0;
   102112:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    38292:  143:	  state->deck[i][j] = estate;
    38292:  144:	  state->deckCount[i]++;
    38292:  145:	}
   204224:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    89348:  148:	  state->deck[i][j] = copper;
    89348:  149:	  state->deckCount[i]++;		
    89348:  150:	}
    12764:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    38292:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
    12764:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
    12764:  160:    }
        -:  161:
        -:  162:  //draw player hands
    38292:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    12764:  166:      state->handCount[i] = 0;
    12764:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
    12764:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
   357392:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
   172314:  178:      state->embargoTokens[i] = 0;
   172314:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     6382:  182:  state->outpostPlayed = 0;
     6382:  183:  state->phase = 0;
     6382:  184:  state->numActions = 1;
     6382:  185:  state->numBuys = 1;
     6382:  186:  state->playedCardCount = 0;
     6382:  187:  state->whoseTurn = 0;
     6382:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    76584:  192:  for (it = 0; it < 5; it++){
    31910:  193:    drawCard(state->whoseTurn, state);
    31910:  194:  }
        -:  195:
     6382:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     6382:  198:  return 0;
     6382:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    24357:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    24357:  209:  if (state->deckCount[player] < 1)
    11558:  210:    return -1;
    12799:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   281838:  214:  while (state->deckCount[player] > 0) {
   128120:  215:    card = floor(Random() * state->deckCount[player]);
   128120:  216:    newDeck[newDeckPos] = state->deck[player][card];
   128120:  217:    newDeckPos++;
   897844:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   320802:  219:      state->deck[player][i] = state->deck[player][i+1];
   320802:  220:    }
   128120:  221:    state->deckCount[player]--;
        -:  222:  }
   281838:  223:  for (i = 0; i < newDeckPos; i++) {
   128120:  224:    state->deck[player][i] = newDeck[i];
   128120:  225:    state->deckCount[player]++;
   128120:  226:  }
        -:  227:
    12799:  228:  return 0;
    24357:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
       61:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       61:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
       61:  243:  if ( state->numActions < 1 )
        -:  244:    {
       36:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
       25:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
       32:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
       18:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
        7:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        7:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        7:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
        7:  269:  return 0;
       61:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
       73:  280:  who = state->whoseTurn;
        -:  281:
       73:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
       73:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
       73:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
       73:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
       73:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
       73:  299:    state->coins = (state->coins) - (getCost(supplyPos));
       73:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
       73:  308:  return 0;
       73:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
      536:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
     1128:  316:  int currentPlayer = whoseTurn(state);
     1128:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
     9743:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
     1110:  326:  int count = 0;
        -:  327:
    16734:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
     8409:  330:      if (state->deck[player][i] == card) count++;
     7257:  331:    }
        -:  332:
    38886:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    21454:  335:      if (state->hand[player][i] == card) count++;
    18333:  336:    }
        -:  337:
    30444:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    16464:  340:      if (state->discard[player][i] == card) count++;
    14112:  341:    }
        -:  342:
     1110:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
     1865:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
       77:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
      988:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
      417:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      417:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
      417:  359:  }
       77:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
       77:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
       39:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
       39:  365:  }
        -:  366:  else{
       38:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
       77:  370:  state->outpostPlayed = 0;
       77:  371:  state->phase = 0;
       77:  372:  state->numActions = 1;
       77:  373:  state->coins = 0;
       77:  374:  state->numBuys = 1;
       77:  375:  state->playedCardCount = 0;
       77:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
      924:  380:  for (k = 0; k < 5; k++){
      385:  381:    drawCard(state->whoseTurn, state);//Draw a card
      385:  382:  }
        -:  383:
        -:  384:  //Update money
       77:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
       77:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
      689:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
      252:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
      437:  401:  j = 0;
    22724:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    10925:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
      720:  406:	  j++;
      720:  407:	}
    10925:  408:    }
      437:  409:  if ( j >= 3)
        -:  410:    {
      120:  411:      return 1;
        -:  412:    }
        -:  413:
      317:  414:  return 0;
      689:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
      214:  420:  int score = 0;
        -:  421:  //score from hand
     5488:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
     2966:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
     2935:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
     2938:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
     2943:  427:      if (state->hand[player][i] == province) { score = score + 6; };
     2946:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
     2950:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     2530:  430:    }
        -:  431:
        -:  432:  //score from discard
     3344:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
     1698:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
     1700:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
     1698:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
     1702:  438:      if (state->discard[player][i] == province) { score = score + 6; };
     1698:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
     1698:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     1458:  441:    }
        -:  442:
        -:  443:  //score from deck
     3344:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
     1698:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
     1701:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
     1698:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
     1700:  449:      if (state->deck[player][i] == province) { score = score + 6; };
     1698:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
     1698:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     1458:  452:    }
        -:  453:
      214:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    39014:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    13088:  533:    for (i = 0; i < state->discardCount[player];i++){
      480:  534:      state->deck[player][i] = state->discard[player][i];
      480:  535:      state->discard[player][i] = -1;
      480:  536:    }
        -:  537:
     6064:  538:    state->deckCount[player] = state->discardCount[player];
     6064:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     6064:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     6064:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     6064:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     6064:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     6064:  559:    if (deckCounter == 0)
     6029:  560:      return -1;
        -:  561:
       35:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       35:  563:    state->deckCount[player]--;
       35:  564:    state->handCount[player]++;//Increment hand count
       35:  565:  }
        -:  566:
        -:  567:  else{
    32950:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    32950:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    32950:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    32950:  576:    state->deckCount[player]--;
    32950:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    32985:  580:  return 0;
    39014:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
      146:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
       32:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
       70:  598:      return 3;
        -:  599:    case gold:
       28:  600:      return 6;
        -:  601:    case adventurer:
        8:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
        8:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
      146:  644:}
        -:  645:
        -:  646://smithy function to introduce a bug
        -:  647:int smithyfun(int currentPlayer, struct gameState *state, int handPos){
        -:  648:  //+3 Cards
        -:  649:  int i;
      528:  650:  for (i = 0; i <= 3; i++)
        -:  651:  {
      211:  652:    drawCard(currentPlayer, state);
      211:  653:  }
        -:  654:      
        -:  655:      //discard card from hand
       53:  656:      discardCard(handPos, currentPlayer, state, 0);
       53:  657:      return 0;
        -:  658:}
        -:  659:
        -:  660://adventurer function to introduce a bug
        -:  661:int adventurerfun(int currentPlayer, struct gameState *state){
        -:  662:    int cardDrawn;
        -:  663:    int temphand[MAX_HAND];
2291246309455167536:  664:    int drawntreasure = 0;
2291246309455167536:  665:    int z = 0;
        -:  666:
10104103169071347668:  667:  while(drawntreasure <= 2){
72057701412115936:  668:      if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
17981540015:  669:          shuffle(currentPlayer, state);
17981540015:  670:      }
7018965447127852775:  671:  drawCard(currentPlayer, state);
7018965447127852775:  672:  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
14469171020717093779:  673:  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    28349:  674:  drawntreasure++;
        -:  675:  else{
     5492:  676:  temphand[z]=cardDrawn;
     5492:  677:  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     5492:  678:  z++;
        -:  679:  }
        -:  680:}
        -:  681:    
    11124:  682:    while(z-1>=0){
     5492:  683:  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     5492:  684:      z=z-1;
        -:  685:    }
       70:  686:    return 0;
        -:  687:}
        -:  688:
        -:  689:int villagefun(int handPos, int currentPlayer, struct gameState *state){
        -:  690:        //+1 Card
        3:  691:        drawCard(currentPlayer, state);
        -:  692:        
        -:  693:        //+2 Actions
        3:  694:        state->numActions = state->numActions + 2;
        -:  695:        
        -:  696:        //discard played card from hand
        -:  697:        //discardCard(handPos, currentPlayer, state, 0);
        3:  698:        return 0;
        -:  699:}
        -:  700:
        -:  701:int great_hallfun(int currentPlayer, struct gameState *state, int handPos){
        -:  702:        //+1 Card
    #####:  703:        drawCard(currentPlayer, state);
        -:  704:        
        -:  705:        //+1 Actions
    #####:  706:        state->numActions++;
        -:  707:        
        -:  708:        //discard card from hand
    #####:  709:        discardCard(handPos, currentPlayer, state, 0);
    #####:  710:        return 0;
        -:  711:}
        -:  712:
        -:  713:int stewardfun(int choice1, int choice2, int choice3, int handPos, int currentPlayer, struct gameState *state){
        -:  714:
      120:  715:  if (choice1 == 1)
        -:  716:	{
        -:  717:	  //+2 cards
       40:  718:	  drawCard(currentPlayer, state);
       40:  719:	  drawCard(currentPlayer, state);
       40:  720:	}
       80:  721:      else if (choice2 == 2)
        -:  722:	{
        -:  723:	  //+2 coins
    #####:  724:	  state->coins = state->coins + 2;
    #####:  725:	}
        -:  726:      else
        -:  727:	{
        -:  728:	  //trash 2 cards in hand
       80:  729:	  discardCard(choice2, currentPlayer, state, 1);
       80:  730:	  discardCard(choice3, currentPlayer, state, 1);
        -:  731:	}
        -:  732:			
        -:  733:      //discard card from hand
      120:  734:      discardCard(handPos, currentPlayer, state, 0);
      120:  735:      return 0;
        -:  736:}
        -:  737:
        -:  738:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  739:{
        -:  740:  int i;
        -:  741:  int j;
        -:  742:  int k;
        -:  743:  int x;
        -:  744:  int index;
       47:  745:  int currentPlayer = whoseTurn(state);
       47:  746:  int nextPlayer = currentPlayer + 1;
        -:  747:
       47:  748:  int tributeRevealedCards[2] = {-1, -1};
        -:  749:  int temphand[MAX_HAND];// moved above the if statement
       47:  750:  if (nextPlayer > (state->numPlayers - 1)){
        4:  751:    nextPlayer = 0;
        4:  752:  }
        -:  753:  
        -:  754:	
        -:  755:  //uses switch to select card and perform actions
       57:  756:  switch( card ) 
        -:  757:    {
        -:  758:    case adventurer:
        4:  759:      adventurerfun(currentPlayer, state);
        -:  760:			
        -:  761:    case council_room:
        -:  762:      //+4 Cards
      440:  763:      for (i = 0; i < 4; i++)
        -:  764:	{
      176:  765:	  drawCard(currentPlayer, state);
      176:  766:	}
        -:  767:			
        -:  768:      //+1 Buy
       44:  769:      state->numBuys++;
        -:  770:			
        -:  771:      //Each other player draws a card
      264:  772:      for (i = 0; i < state->numPlayers; i++)
        -:  773:	{
       88:  774:	  if ( i != currentPlayer )
        -:  775:	    {
       44:  776:	      drawCard(i, state);
       44:  777:	    }
       88:  778:	}
        -:  779:			
        -:  780:      //put played card in played card pile
       44:  781:      discardCard(handPos, currentPlayer, state, 0);
        -:  782:			
       44:  783:      return 0;
        -:  784:			
        -:  785:    case feast:
        -:  786:      //gain card with cost up to 5
        -:  787:      //Backup hand
    #####:  788:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  789:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  790:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  791:      }
        -:  792:      //Backup hand
        -:  793:
        -:  794:      //Update Coins for Buy
    #####:  795:      updateCoins(currentPlayer, state, 5);
    #####:  796:      x = 1;//Condition to loop on
    #####:  797:      while( x == 1) {//Buy one card
    #####:  798:	if (supplyCount(choice1, state) <= 0){
        -:  799:	  if (DEBUG)
        -:  800:	    printf("None of that card left, sorry!\n");
        -:  801:
        -:  802:	  if (DEBUG){
        -:  803:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  804:	  }
    #####:  805:	}
    #####:  806:	else if (state->coins < getCost(choice1)){
    #####:  807:	  printf("That card is too expensive!\n");
        -:  808:
        -:  809:	  if (DEBUG){
        -:  810:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  811:	  }
    #####:  812:	}
        -:  813:	else{
        -:  814:
        -:  815:	  if (DEBUG){
        -:  816:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  817:	  }
        -:  818:
    #####:  819:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  820:	  x = 0;//No more buying cards
        -:  821:
        -:  822:	  if (DEBUG){
        -:  823:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  824:	  }
        -:  825:
        -:  826:	}
        -:  827:      }     
        -:  828:
        -:  829:      //Reset Hand
    #####:  830:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  831:	state->hand[currentPlayer][i] = temphand[i];
    #####:  832:	temphand[i] = -1;
    #####:  833:      }
        -:  834:      //Reset Hand
        -:  835:      			
    #####:  836:      return 0;
        -:  837:			
        -:  838:    case gardens:
    #####:  839:      return -1;
        -:  840:			
        -:  841:    case mine:
    #####:  842:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  843:
    #####:  844:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  845:	{
    #####:  846:	  return -1;
        -:  847:	}
        -:  848:		
    #####:  849:      if (choice2 > treasure_map || choice2 < curse)
        -:  850:	{
    #####:  851:	  return -1;
        -:  852:	}
        -:  853:
    #####:  854:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  855:	{
    #####:  856:	  return -1;
        -:  857:	}
        -:  858:
    #####:  859:      gainCard(choice2, state, 2, currentPlayer);
        -:  860:
        -:  861:      //discard card from hand
    #####:  862:      discardCard(handPos, currentPlayer, state, 0);
        -:  863:
        -:  864:      //discard trashed card
    #####:  865:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  866:	{
    #####:  867:	  if (state->hand[currentPlayer][i] == j)
        -:  868:	    {
    #####:  869:	      discardCard(i, currentPlayer, state, 0);			
    #####:  870:	      break;
        -:  871:	    }
    #####:  872:	}
        -:  873:			
    #####:  874:      return 0;
        -:  875:			
        -:  876:    case remodel:
    #####:  877:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  878:
    #####:  879:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  880:	{
    #####:  881:	  return -1;
        -:  882:	}
        -:  883:
    #####:  884:      gainCard(choice2, state, 0, currentPlayer);
        -:  885:
        -:  886:      //discard card from hand
    #####:  887:      discardCard(handPos, currentPlayer, state, 0);
        -:  888:
        -:  889:      //discard trashed card
    #####:  890:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  891:	{
    #####:  892:	  if (state->hand[currentPlayer][i] == j)
        -:  893:	    {
    #####:  894:	      discardCard(i, currentPlayer, state, 0);			
    #####:  895:	      break;
        -:  896:	    }
    #####:  897:	}
        -:  898:
        -:  899:
    #####:  900:      return 0;
        -:  901:		
        -:  902:    case smithy:
        -:  903:      //+3 Cards
        3:  904:      smithyfun(currentPlayer, state, handPos);
        -:  905:
        -:  906:    case village:
        3:  907:      villagefun(handPos, currentPlayer, state);
        -:  908:		
        -:  909:    case baron:
        3:  910:      state->numBuys++;//Increase buys by 1!
        3:  911:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  912:	int p = 0;//Iterator for hand!
    #####:  913:	int card_not_discarded = 1;//Flag for discard set!
    #####:  914:	while(card_not_discarded){
    #####:  915:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  916:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  917:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  918:	    state->discardCount[currentPlayer]++;
    #####:  919:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  920:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  921:	    }
    #####:  922:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  923:	    state->handCount[currentPlayer]--;
    #####:  924:	    card_not_discarded = 0;//Exit the loop
    #####:  925:	  }
    #####:  926:	  else if (p > state->handCount[currentPlayer]){
        -:  927:	    if(DEBUG) {
        -:  928:	      printf("No estate cards in your hand, invalid choice\n");
        -:  929:	      printf("Must gain an estate if there are any\n");
        -:  930:	    }
    #####:  931:	    if (supplyCount(estate, state) > 0){
    #####:  932:	      gainCard(estate, state, 0, currentPlayer);
    #####:  933:	      state->supplyCount[estate]--;//Decrement estates
    #####:  934:	      if (supplyCount(estate, state) == 0){
    #####:  935:		isGameOver(state);
    #####:  936:	      }
    #####:  937:	    }
    #####:  938:	    card_not_discarded = 0;//Exit the loop
    #####:  939:	  }
        -:  940:			    
        -:  941:	  else{
    #####:  942:	    p++;//Next card
        -:  943:	  }
        -:  944:	}
    #####:  945:      }
        -:  946:			    
        -:  947:      else{
        3:  948:	if (supplyCount(estate, state) > 0){
        3:  949:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
        3:  950:	  state->supplyCount[estate]--;//Decrement Estates
        3:  951:	  if (supplyCount(estate, state) == 0){
    #####:  952:	    isGameOver(state);
    #####:  953:	  }
        3:  954:	}
        -:  955:      }
        -:  956:	    
        -:  957:      
        3:  958:      return 0;
        -:  959:		
        -:  960:    case great_hall:
    #####:  961:      great_hallfun(currentPlayer, state, handPos);
        -:  962:		
        -:  963:    case minion:
        -:  964:      //+1 action
    #####:  965:      state->numActions++;
        -:  966:			
        -:  967:      //discard card from hand
    #####:  968:      discardCard(handPos, currentPlayer, state, 0);
        -:  969:			
    #####:  970:      if (choice1)		//+2 coins
        -:  971:	{
    #####:  972:	  state->coins = state->coins + 2;
    #####:  973:	}
        -:  974:			
    #####:  975:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  976:	{
        -:  977:	  //discard hand
    #####:  978:	  while(numHandCards(state) > 0)
        -:  979:	    {
    #####:  980:	      discardCard(handPos, currentPlayer, state, 0);
        -:  981:	    }
        -:  982:				
        -:  983:	  //draw 4
    #####:  984:	  for (i = 0; i < 4; i++)
        -:  985:	    {
    #####:  986:	      drawCard(currentPlayer, state);
    #####:  987:	    }
        -:  988:				
        -:  989:	  //other players discard hand and redraw if hand size > 4
    #####:  990:	  for (i = 0; i < state->numPlayers; i++)
        -:  991:	    {
    #####:  992:	      if (i != currentPlayer)
        -:  993:		{
    #####:  994:		  if ( state->handCount[i] > 4 )
        -:  995:		    {
        -:  996:		      //discard hand
    #####:  997:		      while( state->handCount[i] > 0 )
        -:  998:			{
    #####:  999:			  discardCard(handPos, i, state, 0);
        -: 1000:			}
        -: 1001:							
        -: 1002:		      //draw 4
    #####: 1003:		      for (j = 0; j < 4; j++)
        -: 1004:			{
    #####: 1005:			  drawCard(i, state);
    #####: 1006:			}
    #####: 1007:		    }
    #####: 1008:		}
    #####: 1009:	    }
        -: 1010:				
    #####: 1011:	}
    #####: 1012:      return 0;
        -: 1013:		
        -: 1014:    case steward:
    #####: 1015:      stewardfun(choice1, choice2, choice3, handPos, currentPlayer, state);
        -: 1016:
        -: 1017:		
        -: 1018:    case tribute:
    #####: 1019:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1020:	if (state->deckCount[nextPlayer] > 0){
    #####: 1021:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1022:	  state->deckCount[nextPlayer]--;
    #####: 1023:	}
    #####: 1024:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1025:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1026:	  state->discardCount[nextPlayer]--;
    #####: 1027:	}
        -: 1028:	else{
        -: 1029:	  //No Card to Reveal
        -: 1030:	  if (DEBUG){
        -: 1031:	    printf("No cards to reveal\n");
        -: 1032:	  }
        -: 1033:	}
    #####: 1034:      }
        -: 1035:	    
        -: 1036:      else{
    #####: 1037:	if (state->deckCount[nextPlayer] == 0){
    #####: 1038:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1039:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1040:	    state->deckCount[nextPlayer]++;
    #####: 1041:	    state->discard[nextPlayer][i] = -1;
    #####: 1042:	    state->discardCount[nextPlayer]--;
    #####: 1043:	  }
        -: 1044:			    
    #####: 1045:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1046:	} 
    #####: 1047:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1048:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1049:	state->deckCount[nextPlayer]--;
    #####: 1050:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1051:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1052:	state->deckCount[nextPlayer]--;
        -: 1053:      }    
        -: 1054:		       
    #####: 1055:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1056:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1057:	state->playedCardCount++;
    #####: 1058:	tributeRevealedCards[1] = -1;
    #####: 1059:      }
        -: 1060:
    #####: 1061:      for (i = 0; i <= 2; i ++){
    #####: 1062:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1063:	  state->coins += 2;
    #####: 1064:	}
        -: 1065:		    
    #####: 1066:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1067:	  drawCard(currentPlayer, state);
    #####: 1068:	  drawCard(currentPlayer, state);
    #####: 1069:	}
        -: 1070:	else{//Action Card
    #####: 1071:	  state->numActions = state->numActions + 2;
        -: 1072:	}
    #####: 1073:      }
        -: 1074:	    
    #####: 1075:      return 0;
        -: 1076:		
        -: 1077:    case ambassador:
    #####: 1078:      j = 0;		//used to check if player has enough cards to discard
        -: 1079:
    #####: 1080:      if (choice2 > 2 || choice2 < 0)
        -: 1081:	{
    #####: 1082:	  return -1;				
        -: 1083:	}
        -: 1084:
    #####: 1085:      if (choice1 == handPos)
        -: 1086:	{
    #####: 1087:	  return -1;
        -: 1088:	}
        -: 1089:
    #####: 1090:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1091:	{
    #####: 1092:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1093:	    {
    #####: 1094:	      j++;
    #####: 1095:	    }
    #####: 1096:	}
    #####: 1097:      if (j < choice2)
        -: 1098:	{
    #####: 1099:	  return -1;				
        -: 1100:	}
        -: 1101:
        -: 1102:      if (DEBUG) 
        -: 1103:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1104:
        -: 1105:      //increase supply count for choosen card by amount being discarded
    #####: 1106:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1107:			
        -: 1108:      //each other player gains a copy of revealed card
    #####: 1109:      for (i = 0; i < state->numPlayers; i++)
        -: 1110:	{
    #####: 1111:	  if (i != currentPlayer)
        -: 1112:	    {
    #####: 1113:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1114:	    }
    #####: 1115:	}
        -: 1116:
        -: 1117:      //discard played card from hand
    #####: 1118:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1119:
        -: 1120:      //trash copies of cards returned to supply
    #####: 1121:      for (j = 0; j < choice2; j++)
        -: 1122:	{
    #####: 1123:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1124:	    {
    #####: 1125:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1126:		{
    #####: 1127:		  discardCard(i, currentPlayer, state, 1);
    #####: 1128:		  break;
        -: 1129:		}
    #####: 1130:	    }
    #####: 1131:	}			
        -: 1132:
    #####: 1133:      return 0;
        -: 1134:		
        -: 1135:    case cutpurse:
        -: 1136:
    #####: 1137:      updateCoins(currentPlayer, state, 2);
    #####: 1138:      for (i = 0; i < state->numPlayers; i++)
        -: 1139:	{
    #####: 1140:	  if (i != currentPlayer)
        -: 1141:	    {
    #####: 1142:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1143:		{
    #####: 1144:		  if (state->hand[i][j] == copper)
        -: 1145:		    {
    #####: 1146:		      discardCard(j, i, state, 0);
    #####: 1147:		      break;
        -: 1148:		    }
    #####: 1149:		  if (j == state->handCount[i])
        -: 1150:		    {
    #####: 1151:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1152:			{
        -: 1153:			  if (DEBUG)
        -: 1154:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1155:			}	
    #####: 1156:		      break;
        -: 1157:		    }		
    #####: 1158:		}
        -: 1159:					
    #####: 1160:	    }
        -: 1161:				
    #####: 1162:	}				
        -: 1163:
        -: 1164:      //discard played card from hand
    #####: 1165:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1166:
    #####: 1167:      return 0;
        -: 1168:
        -: 1169:		
        -: 1170:    case embargo: 
        -: 1171:      //+2 Coins
    #####: 1172:      state->coins = state->coins + 2;
        -: 1173:			
        -: 1174:      //see if selected pile is in play
    #####: 1175:      if ( state->supplyCount[choice1] == -1 )
        -: 1176:	{
    #####: 1177:	  return -1;
        -: 1178:	}
        -: 1179:			
        -: 1180:      //add embargo token to selected supply pile
    #####: 1181:      state->embargoTokens[choice1]++;
        -: 1182:			
        -: 1183:      //trash card
    #####: 1184:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1185:      return 0;
        -: 1186:		
        -: 1187:    case outpost:
        -: 1188:      //set outpost flag
    #####: 1189:      state->outpostPlayed++;
        -: 1190:			
        -: 1191:      //discard card
    #####: 1192:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1193:      return 0;
        -: 1194:		
        -: 1195:    case salvager:
        -: 1196:      //+1 buy
    #####: 1197:      state->numBuys++;
        -: 1198:			
    #####: 1199:      if (choice1)
        -: 1200:	{
        -: 1201:	  //gain coins equal to trashed card
    #####: 1202:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1203:	  //trash card
    #####: 1204:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1205:	}
        -: 1206:			
        -: 1207:      //discard card
    #####: 1208:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1209:      return 0;
        -: 1210:		
        -: 1211:    case sea_hag:
    #####: 1212:      for (i = 0; i < state->numPlayers; i++){
    #####: 1213:	if (i != currentPlayer){
    #####: 1214:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1215:	  state->discardCount[i]++;
    #####: 1216:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1217:	}
    #####: 1218:      }
    #####: 1219:      return 0;
        -: 1220:		
        -: 1221:    case treasure_map:
        -: 1222:      //search hand for another treasure_map
    #####: 1223:      index = -1;
    #####: 1224:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1225:	{
    #####: 1226:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1227:	    {
    #####: 1228:	      index = i;
    #####: 1229:	      break;
        -: 1230:	    }
    #####: 1231:	}
    #####: 1232:      if (index > -1)
        -: 1233:	{
        -: 1234:	  //trash both treasure cards
    #####: 1235:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1236:	  discardCard(index, currentPlayer, state, 1);
        -: 1237:
        -: 1238:	  //gain 4 Gold cards
    #####: 1239:	  for (i = 0; i < 4; i++)
        -: 1240:	    {
    #####: 1241:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1242:	    }
        -: 1243:				
        -: 1244:	  //return success
    #####: 1245:	  return 1;
        -: 1246:	}
        -: 1247:			
        -: 1248:      //no second treasure_map found in hand
    #####: 1249:      return -1;
        -: 1250:    }
        -: 1251:	
    #####: 1252:  return -1;
       47: 1253:}
        -: 1254:
        -: 1255:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1256:{
        -: 1257:	
        -: 1258:  //if card is not trashed, added to Played pile 
      778: 1259:  if (trashFlag < 1)
        -: 1260:    {
        -: 1261:      //add card to played pile
      418: 1262:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      418: 1263:      state->playedCardCount++;
      418: 1264:    }
        -: 1265:	
        -: 1266:  //set played card to -1
      778: 1267:  state->hand[currentPlayer][handPos] = -1;
        -: 1268:	
        -: 1269:  //remove card from player's hand
      778: 1270:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1271:    {
        -: 1272:      //reduce number of cards in hand
      117: 1273:      state->handCount[currentPlayer]--;
      117: 1274:    }
      661: 1275:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1276:    {
        -: 1277:      //reduce number of cards in hand
       64: 1278:      state->handCount[currentPlayer]--;
       64: 1279:    }
        -: 1280:  else 	
        -: 1281:    {
        -: 1282:      //replace discarded card with last card in hand
      597: 1283:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1284:      //set last card to -1
      597: 1285:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1286:      //reduce number of cards in hand
      597: 1287:      state->handCount[currentPlayer]--;
        -: 1288:    }
        -: 1289:	
      778: 1290:  return 0;
        -: 1291:}
        -: 1292:
        -: 1293:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1294:{
        -: 1295:  //Note: supplyPos is enum of choosen card
        -: 1296:	
        -: 1297:  //check if supply pile is empty (0) or card is not used in game (-1)
     5040: 1298:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1299:    {
      680: 1300:      return -1;
        -: 1301:    }
        -: 1302:	
        -: 1303:  //added card for [whoseTurn] current player:
        -: 1304:  // toFlag = 0 : add to discard
        -: 1305:  // toFlag = 1 : add to deck
        -: 1306:  // toFlag = 2 : add to hand
        -: 1307:
     4360: 1308:  if (toFlag == 1)
        -: 1309:    {
     1666: 1310:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
     1666: 1311:      state->deckCount[player]++;
     1666: 1312:    }
     2694: 1313:  else if (toFlag == 2)
        -: 1314:    {
     1428: 1315:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
     1428: 1316:      state->handCount[player]++;
     1428: 1317:    }
        -: 1318:  else
        -: 1319:    {
     1266: 1320:      state->discard[player][ state->discardCount[player] ] = supplyPos;
     1266: 1321:      state->discardCount[player]++;
        -: 1322:    }
        -: 1323:	
        -: 1324:  //decrease number in supply pile
     4360: 1325:  state->supplyCount[supplyPos]--;
        -: 1326:	 
     4360: 1327:  return 0;
     5040: 1328:}
        -: 1329:
        -: 1330:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1331:{
        -: 1332:  int i;
        -: 1333:	
        -: 1334:  //reset coin count
     6796: 1335:  state->coins = 0;
        -: 1336:
        -: 1337:  //add coins for each Treasure card in player's hand
    80296: 1338:  for (i = 0; i < state->handCount[player]; i++)
        -: 1339:    {
    33352: 1340:      if (state->hand[player][i] == copper)
        -: 1341:	{
    26050: 1342:	  state->coins += 1;
    26050: 1343:	}
     7302: 1344:      else if (state->hand[player][i] == silver)
        -: 1345:	{
      433: 1346:	  state->coins += 2;
      433: 1347:	}
     6869: 1348:      else if (state->hand[player][i] == gold)
        -: 1349:	{
      353: 1350:	  state->coins += 3;
      353: 1351:	}	
    33352: 1352:    }	
        -: 1353:
        -: 1354:  //add bonus
     6796: 1355:  state->coins += bonus;
        -: 1356:
     6796: 1357:  return 0;
        -: 1358:}
        -: 1359:
        -: 1360:
        -: 1361://end of dominion.c
        -: 1362:
TESTING scoreTest():
Playing with player 0, handPos 0
HandCount: 8, Expected: 7
test FAILED
DeckCount: 1, Expected: 2
test FAILED
PlayedCardCount: 1, Expected: 1
test passed
Playing with player 0, handPos 1
HandCount: 8, Expected: 7
test FAILED
DeckCount: 1, Expected: 2
test FAILED
PlayedCardCount: 1, Expected: 1
test passed
Playing with player 0, handPos 2
HandCount: 8, Expected: 7
test FAILED
DeckCount: 1, Expected: 2
test FAILED
PlayedCardCount: 1, Expected: 1
test passed
Playing with player 0, handPos 3
HandCount: 8, Expected: 7
test FAILED
DeckCount: 1, Expected: 2
test FAILED
PlayedCardCount: 1, Expected: 1
test passed
Playing with player 0, handPos 4
HandCount: 8, Expected: 7
test FAILED
DeckCount: 1, Expected: 2
test FAILED
PlayedCardCount: 1, Expected: 1
test passed
Playing with player 1, handPos 0
HandCount: 3, Expected: 2
test FAILED
DeckCount: 6, Expected: 7
test FAILED
PlayedCardCount: 1, Expected: 1
test passed
Playing with player 1, handPos 1
HandCount: 3, Expected: 2
test FAILED
DeckCount: 6, Expected: 7
test FAILED
PlayedCardCount: 1, Expected: 1
test passed
Playing with player 1, handPos 2
HandCount: 3, Expected: 2
test FAILED
DeckCount: 6, Expected: 7
test FAILED
PlayedCardCount: 1, Expected: 1
test passed
Playing with player 1, handPos 3
HandCount: 3, Expected: 2
test FAILED
DeckCount: 6, Expected: 7
test FAILED
PlayedCardCount: 1, Expected: 1
test passed
Playing with player 1, handPos 4
HandCount: 3, Expected: 2
test FAILED
DeckCount: 6, Expected: 7
test FAILED
PlayedCardCount: 1, Expected: 1
test passed
Tests failed.
TESTING scoreTest():
Testing with choice1 = 0, choice2 = 1, choice3 = 1, handPos = 0
Handcount: 2, Expected: 2
test passed
Testing with choice1 = 1, choice2 = 2, choice3 = 2, handPos = 0
Handcount: 6, Expected: 6
test passed
Testing with choice1 = 2, choice2 = 3, choice3 = 3, handPos = 0
Coins: 4, Expected: 6
test FAILED
Handcount: 2, Expected: 4
test FAILED
Testing with choice1 = 0, choice2 = 1, choice3 = 1, handPos = 1
Handcount: 2, Expected: 2
test passed
Testing with choice1 = 1, choice2 = 2, choice3 = 2, handPos = 1
Handcount: 6, Expected: 6
test passed
Testing with choice1 = 2, choice2 = 3, choice3 = 3, handPos = 1
Coins: 4, Expected: 6
test FAILED
Handcount: 2, Expected: 4
test FAILED
Testing with choice1 = 0, choice2 = 1, choice3 = 1, handPos = 2
Handcount: 2, Expected: 2
test passed
Testing with choice1 = 1, choice2 = 2, choice3 = 2, handPos = 2
Handcount: 6, Expected: 6
test passed
Testing with choice1 = 2, choice2 = 3, choice3 = 3, handPos = 2
Coins: 4, Expected: 6
test FAILED
Handcount: 2, Expected: 4
test FAILED
Testing with choice1 = 0, choice2 = 1, choice3 = 1, handPos = 3
Handcount: 2, Expected: 2
test passed
Testing with choice1 = 1, choice2 = 2, choice3 = 2, handPos = 3
Handcount: 6, Expected: 6
test passed
Testing with choice1 = 2, choice2 = 3, choice3 = 3, handPos = 3
Coins: 4, Expected: 6
test FAILED
Handcount: 2, Expected: 4
test FAILED
Testing with choice1 = 0, choice2 = 1, choice3 = 1, handPos = 4
Handcount: 2, Expected: 2
test passed
Testing with choice1 = 1, choice2 = 2, choice3 = 2, handPos = 4
Handcount: 6, Expected: 6
test passed
Testing with choice1 = 2, choice2 = 3, choice3 = 3, handPos = 4
Coins: 4, Expected: 6
test FAILED
Handcount: 2, Expected: 4
test FAILED
Testing with choice1 = 0, choice2 = 1, choice3 = 1, handPos = 0
Handcount: -3, Expected: -3
test passed
Testing with choice1 = 1, choice2 = 2, choice3 = 2, handPos = 0
Handcount: 1, Expected: 1
test passed
Testing with choice1 = 2, choice2 = 3, choice3 = 3, handPos = 0
Coins: 4, Expected: 6
test FAILED
Handcount: -3, Expected: -1
test FAILED
Testing with choice1 = 0, choice2 = 1, choice3 = 1, handPos = 1
Handcount: -3, Expected: -3
test passed
Testing with choice1 = 1, choice2 = 2, choice3 = 2, handPos = 1
Handcount: 1, Expected: 1
test passed
Testing with choice1 = 2, choice2 = 3, choice3 = 3, handPos = 1
Coins: 4, Expected: 6
test FAILED
Handcount: -3, Expected: -1
test FAILED
Testing with choice1 = 0, choice2 = 1, choice3 = 1, handPos = 2
Handcount: -3, Expected: -3
test passed
Testing with choice1 = 1, choice2 = 2, choice3 = 2, handPos = 2
Handcount: 1, Expected: 1
test passed
Testing with choice1 = 2, choice2 = 3, choice3 = 3, handPos = 2
Coins: 4, Expected: 6
test FAILED
Handcount: -3, Expected: -1
test FAILED
Testing with choice1 = 0, choice2 = 1, choice3 = 1, handPos = 3
Handcount: -3, Expected: -3
test passed
Testing with choice1 = 1, choice2 = 2, choice3 = 2, handPos = 3
Handcount: 1, Expected: 1
test passed
Testing with choice1 = 2, choice2 = 3, choice3 = 3, handPos = 3
Coins: 4, Expected: 6
test FAILED
Handcount: -3, Expected: -1
test FAILED
Testing with choice1 = 0, choice2 = 1, choice3 = 1, handPos = 4
Handcount: -3, Expected: -3
test passed
Testing with choice1 = 1, choice2 = 2, choice3 = 2, handPos = 4
Handcount: 1, Expected: 1
test passed
Testing with choice1 = 2, choice2 = 3, choice3 = 3, handPos = 4
Coins: 4, Expected: 6
test FAILED
Handcount: -3, Expected: -1
test FAILED
Tests failed.
TESTING scoreTest():
Testing with 0 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 387389207
Test failed.
Card at position: 6
Card drawn: 387389207
Test failed.
Testing that 2 cards were drawn. 
HandCount: 5, Expected: 7
test FAILED
Testing with 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 8, Expected: 7
test FAILED
Testing with 10 deckcount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 8, Expected: 7
test FAILED
Testing with 0 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 387389207
Test failed.
Card at position: 1
Card drawn: 387389207
Test failed.
Testing that 2 cards were drawn. 
HandCount: -495, Expected: 2
test FAILED
Testing with 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 3, Expected: 2
test FAILED
Testing with 10 deckcount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 3, Expected: 2
test FAILED
Tests failed.
TESTING scoreTest():
Testing with handPos 0
HandCount for current player: 8, Expected: 8
test passed
Buys: 2, Expected: 2
test passed
HandCount for other player: 1, Expected: 1
test passed
Testing with handPos 1
HandCount for current player: 8, Expected: 8
test passed
Buys: 2, Expected: 2
test passed
HandCount for other player: 1, Expected: 1
test passed
Testing with handPos 2
HandCount for current player: 8, Expected: 8
test passed
Buys: 2, Expected: 2
test passed
HandCount for other player: 1, Expected: 1
test passed
Testing with handPos 3
HandCount for current player: 8, Expected: 8
test passed
Buys: 2, Expected: 2
test passed
HandCount for other player: 1, Expected: 1
test passed
Testing with handPos 4
HandCount for current player: 8, Expected: 8
test passed
Buys: 2, Expected: 2
test passed
HandCount for other player: 1, Expected: 1
test passed
All tests passed!
TESTING scoreTest():
Testing with handcount: 0, discardcount: 0, deckCount: 0, and 0 of each card
Score: 0, Expected: 0
test passed
Testing with handcount: 0, discardcount: 0, deckCount: 0, and 0 of each card
Score: 0, Expected: 0
test passed
Testing with handcount: 0, discardcount: 0, deckCount: 0, and 0 of each card
Score: 0, Expected: 0
test passed
Testing with handcount: 6, discardcount: 0, deckCount: 0, and 1 of each card
Score: 10, Expected: 10
test passed
Testing with handcount: 6, discardcount: 6, deckCount: 0, and 1 of each card
Score: 30, Expected: 20
test FAILED
Testing with handcount: 6, discardcount: 6, deckCount: 6, and 1 of each card
Score: 30, Expected: 30
test passed
Testing with handcount: 12, discardcount: 0, deckCount: 0, and 2 of each card
Score: 20, Expected: 20
test passed
Testing with handcount: 12, discardcount: 12, deckCount: 0, and 2 of each card
Score: 60, Expected: 40
test FAILED
Testing with handcount: 12, discardcount: 12, deckCount: 12, and 2 of each card
Score: 60, Expected: 60
test passed
Testing with handcount: 18, discardcount: 0, deckCount: 0, and 3 of each card
Score: 30, Expected: 30
test passed
Testing with handcount: 18, discardcount: 18, deckCount: 0, and 3 of each card
Score: 90, Expected: 60
test FAILED
Testing with handcount: 18, discardcount: 18, deckCount: 18, and 3 of each card
Score: 90, Expected: 90
test passed
Testing with handcount: 24, discardcount: 0, deckCount: 0, and 4 of each card
Score: 40, Expected: 40
test passed
Testing with handcount: 24, discardcount: 24, deckCount: 0, and 4 of each card
Score: 120, Expected: 80
test FAILED
Testing with handcount: 24, discardcount: 24, deckCount: 24, and 4 of each card
Score: 132, Expected: 120
test FAILED
Testing with handcount: 0, discardcount: 0, deckCount: 0, and 0 of each card
Score: 0, Expected: 0
test passed
Testing with handcount: 0, discardcount: 0, deckCount: 0, and 0 of each card
Score: 0, Expected: 0
test passed
Testing with handcount: 0, discardcount: 0, deckCount: 0, and 0 of each card
Score: 0, Expected: 0
test passed
Testing with handcount: 6, discardcount: 0, deckCount: 0, and 1 of each card
Score: 10, Expected: 10
test passed
Testing with handcount: 6, discardcount: 6, deckCount: 0, and 1 of each card
Score: 30, Expected: 20
test FAILED
Testing with handcount: 6, discardcount: 6, deckCount: 6, and 1 of each card
Score: 30, Expected: 30
test passed
Testing with handcount: 12, discardcount: 0, deckCount: 0, and 2 of each card
Score: 20, Expected: 20
test passed
Testing with handcount: 12, discardcount: 12, deckCount: 0, and 2 of each card
Score: 60, Expected: 40
test FAILED
Testing with handcount: 12, discardcount: 12, deckCount: 12, and 2 of each card
Score: 60, Expected: 60
test passed
Testing with handcount: 18, discardcount: 0, deckCount: 0, and 3 of each card
Score: 30, Expected: 30
test passed
Testing with handcount: 18, discardcount: 18, deckCount: 0, and 3 of each card
Score: 90, Expected: 60
test FAILED
Testing with handcount: 18, discardcount: 18, deckCount: 18, and 3 of each card
Score: 90, Expected: 90
test passed
Testing with handcount: 24, discardcount: 0, deckCount: 0, and 4 of each card
Score: 40, Expected: 40
test passed
Testing with handcount: 24, discardcount: 24, deckCount: 0, and 4 of each card
Score: 120, Expected: 80
test FAILED
Testing with handcount: 24, discardcount: 24, deckCount: 24, and 4 of each card
Score: 132, Expected: 120
test FAILED
Tests failed.
TESTING discardCard():
Test player 0 with 1 card(s) and 0 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 0, expected = 0
Test player 0 with 1 card(s) and 0 hand position.
handcount = 0, expected = 0
Test player 0 with 1 card(s) and 1 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 0, expected = 0
Test player 0 with 1 card(s) and 1 hand position.
handcount = 0, expected = 0
Test player 0 with 1 card(s) and 2 hand position.
playedCard = 1, expected = 1
playedCardCount = 1, expected = 1
handcount = 0, expected = 0
Test player 0 with 1 card(s) and 2 hand position.
handcount = 0, expected = 0
Test player 0 with 1 card(s) and 3 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 0, expected = 0
Test player 0 with 1 card(s) and 3 hand position.
handcount = 0, expected = 0
Test player 0 with 1 card(s) and 4 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 0, expected = 0
Test player 0 with 1 card(s) and 4 hand position.
handcount = 0, expected = 0
Test player 0 with 2 card(s) and 0 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 1, expected = 1
Test player 0 with 2 card(s) and 0 hand position.
handcount = 1, expected = 1
Test player 0 with 2 card(s) and 1 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 1, expected = 1
Test player 0 with 2 card(s) and 1 hand position.
handcount = 1, expected = 1
Test player 0 with 2 card(s) and 2 hand position.
playedCard = 1, expected = 1
playedCardCount = 1, expected = 1
handcount = 1, expected = 1
Test player 0 with 2 card(s) and 2 hand position.
handcount = 1, expected = 1
Test player 0 with 2 card(s) and 3 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 1, expected = 1
Test player 0 with 2 card(s) and 3 hand position.
handcount = 1, expected = 1
Test player 0 with 2 card(s) and 4 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 1, expected = 1
Test player 0 with 2 card(s) and 4 hand position.
handcount = 1, expected = 1
Test player 0 with 3 card(s) and 0 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 2, expected = 2
Test player 0 with 3 card(s) and 0 hand position.
handcount = 2, expected = 2
Test player 0 with 3 card(s) and 1 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 2, expected = 2
Test player 0 with 3 card(s) and 1 hand position.
handcount = 2, expected = 2
Test player 0 with 3 card(s) and 2 hand position.
playedCard = 1, expected = 1
playedCardCount = 1, expected = 1
handcount = 2, expected = 2
Test player 0 with 3 card(s) and 2 hand position.
handcount = 2, expected = 2
Test player 0 with 3 card(s) and 3 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 2, expected = 2
Test player 0 with 3 card(s) and 3 hand position.
handcount = 2, expected = 2
Test player 0 with 3 card(s) and 4 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 2, expected = 2
Test player 0 with 3 card(s) and 4 hand position.
handcount = 2, expected = 2
Test player 0 with 4 card(s) and 0 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 3, expected = 3
Test player 0 with 4 card(s) and 0 hand position.
handcount = 3, expected = 3
Test player 0 with 4 card(s) and 1 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 3, expected = 3
Test player 0 with 4 card(s) and 1 hand position.
handcount = 3, expected = 3
Test player 0 with 4 card(s) and 2 hand position.
playedCard = 1, expected = 1
playedCardCount = 1, expected = 1
handcount = 3, expected = 3
Test player 0 with 4 card(s) and 2 hand position.
handcount = 3, expected = 3
Test player 0 with 4 card(s) and 3 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 3, expected = 3
Test player 0 with 4 card(s) and 3 hand position.
handcount = 3, expected = 3
Test player 0 with 4 card(s) and 4 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 3, expected = 3
Test player 0 with 4 card(s) and 4 hand position.
handcount = 3, expected = 3
Test player 0 with 5 card(s) and 0 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 4, expected = 4
Test player 0 with 5 card(s) and 0 hand position.
handcount = 4, expected = 4
Test player 0 with 5 card(s) and 1 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 4, expected = 4
Test player 0 with 5 card(s) and 1 hand position.
handcount = 4, expected = 4
Test player 0 with 5 card(s) and 2 hand position.
playedCard = 1, expected = 1
playedCardCount = 1, expected = 1
handcount = 4, expected = 4
Test player 0 with 5 card(s) and 2 hand position.
handcount = 4, expected = 4
Test player 0 with 5 card(s) and 3 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 4, expected = 4
Test player 0 with 5 card(s) and 3 hand position.
handcount = 4, expected = 4
Test player 0 with 5 card(s) and 4 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 4, expected = 4
Test player 0 with 5 card(s) and 4 hand position.
handcount = 4, expected = 4
Test player 1 with 1 card(s) and 0 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 0, expected = 0
Test player 1 with 1 card(s) and 0 hand position.
handcount = 0, expected = 0
Test player 1 with 1 card(s) and 1 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 0, expected = 0
Test player 1 with 1 card(s) and 1 hand position.
handcount = 0, expected = 0
Test player 1 with 1 card(s) and 2 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 0, expected = 0
Test player 1 with 1 card(s) and 2 hand position.
handcount = 0, expected = 0
Test player 1 with 1 card(s) and 3 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 0, expected = 0
Test player 1 with 1 card(s) and 3 hand position.
handcount = 0, expected = 0
Test player 1 with 1 card(s) and 4 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 0, expected = 0
Test player 1 with 1 card(s) and 4 hand position.
handcount = 0, expected = 0
Test player 1 with 2 card(s) and 0 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 1, expected = 1
Test player 1 with 2 card(s) and 0 hand position.
handcount = 1, expected = 1
Test player 1 with 2 card(s) and 1 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 1, expected = 1
Test player 1 with 2 card(s) and 1 hand position.
handcount = 1, expected = 1
Test player 1 with 2 card(s) and 2 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 1, expected = 1
Test player 1 with 2 card(s) and 2 hand position.
handcount = 1, expected = 1
Test player 1 with 2 card(s) and 3 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 1, expected = 1
Test player 1 with 2 card(s) and 3 hand position.
handcount = 1, expected = 1
Test player 1 with 2 card(s) and 4 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 1, expected = 1
Test player 1 with 2 card(s) and 4 hand position.
handcount = 1, expected = 1
Test player 1 with 3 card(s) and 0 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 2, expected = 2
Test player 1 with 3 card(s) and 0 hand position.
handcount = 2, expected = 2
Test player 1 with 3 card(s) and 1 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 2, expected = 2
Test player 1 with 3 card(s) and 1 hand position.
handcount = 2, expected = 2
Test player 1 with 3 card(s) and 2 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 2, expected = 2
Test player 1 with 3 card(s) and 2 hand position.
handcount = 2, expected = 2
Test player 1 with 3 card(s) and 3 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 2, expected = 2
Test player 1 with 3 card(s) and 3 hand position.
handcount = 2, expected = 2
Test player 1 with 3 card(s) and 4 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 2, expected = 2
Test player 1 with 3 card(s) and 4 hand position.
handcount = 2, expected = 2
Test player 1 with 4 card(s) and 0 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 3, expected = 3
Test player 1 with 4 card(s) and 0 hand position.
handcount = 3, expected = 3
Test player 1 with 4 card(s) and 1 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 3, expected = 3
Test player 1 with 4 card(s) and 1 hand position.
handcount = 3, expected = 3
Test player 1 with 4 card(s) and 2 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 3, expected = 3
Test player 1 with 4 card(s) and 2 hand position.
handcount = 3, expected = 3
Test player 1 with 4 card(s) and 3 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 3, expected = 3
Test player 1 with 4 card(s) and 3 hand position.
handcount = 3, expected = 3
Test player 1 with 4 card(s) and 4 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 3, expected = 3
Test player 1 with 4 card(s) and 4 hand position.
handcount = 3, expected = 3
Test player 1 with 5 card(s) and 0 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 4, expected = 4
Test player 1 with 5 card(s) and 0 hand position.
handcount = 4, expected = 4
Test player 1 with 5 card(s) and 1 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 4, expected = 4
Test player 1 with 5 card(s) and 1 hand position.
handcount = 4, expected = 4
Test player 1 with 5 card(s) and 2 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 4, expected = 4
Test player 1 with 5 card(s) and 2 hand position.
handcount = 4, expected = 4
Test player 1 with 5 card(s) and 3 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 4, expected = 4
Test player 1 with 5 card(s) and 3 hand position.
handcount = 4, expected = 4
Test player 1 with 5 card(s) and 4 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 4, expected = 4
Test player 1 with 5 card(s) and 4 hand position.
handcount = 4, expected = 4
All tests passed!
TESTING gainCard():
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 0
Deck Card: 0, Expected: 0
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 0
Deck Card: 0, Expected: 0
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 0
Deck Card: 0, Expected: 0
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 0
Deck Card: 0, Expected: 0
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 0
Deck Card: 0, Expected: 0
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 0
Deck Card: 0, Expected: 0
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 0
Deck Card: 0, Expected: 0
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 0
Hand Card: 0, Expected: 0
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 0
Hand Card: 0, Expected: 0
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 0
Hand Card: 0, Expected: 0
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 0
Hand Card: 0, Expected: 0
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 0
Hand Card: 0, Expected: 0
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 0
Hand Card: 0, Expected: 0
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 0
Hand Card: 0, Expected: 0
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 0
Deck Card: 1, Expected: 1
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 0
Deck Card: 1, Expected: 1
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 0
Deck Card: 1, Expected: 1
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 0
Deck Card: 1, Expected: 1
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 0
Deck Card: 1, Expected: 1
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 0
Deck Card: 1, Expected: 1
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 0
Deck Card: 1, Expected: 1
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 0
Hand Card: 1, Expected: 1
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 0
Hand Card: 1, Expected: 1
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 0
Hand Card: 1, Expected: 1
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 0
Hand Card: 1, Expected: 1
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 0
Hand Card: 1, Expected: 1
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 0
Hand Card: 1, Expected: 1
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 0
Hand Card: 1, Expected: 1
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 0
Deck Card: 2, Expected: 2
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 0
Deck Card: 2, Expected: 2
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 0
Deck Card: 2, Expected: 2
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 0
Deck Card: 2, Expected: 2
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 0
Deck Card: 2, Expected: 2
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 0
Deck Card: 2, Expected: 2
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 0
Deck Card: 2, Expected: 2
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 0
Hand Card: 2, Expected: 2
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 0
Hand Card: 2, Expected: 2
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 0
Hand Card: 2, Expected: 2
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 0
Hand Card: 2, Expected: 2
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 0
Hand Card: 2, Expected: 2
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 0
Hand Card: 2, Expected: 2
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 0
Hand Card: 2, Expected: 2
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 0
Deck Card: 3, Expected: 3
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 0
Deck Card: 3, Expected: 3
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 0
Deck Card: 3, Expected: 3
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 0
Deck Card: 3, Expected: 3
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 0
Deck Card: 3, Expected: 3
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 0
Deck Card: 3, Expected: 3
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 0
Deck Card: 3, Expected: 3
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 0
Hand Card: 3, Expected: 3
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 0
Hand Card: 3, Expected: 3
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 0
Hand Card: 3, Expected: 3
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 0
Hand Card: 3, Expected: 3
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 0
Hand Card: 3, Expected: 3
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 0
Hand Card: 3, Expected: 3
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 0
Hand Card: 3, Expected: 3
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 0
Deck Card: 4, Expected: 4
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 0
Deck Card: 4, Expected: 4
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 0
Deck Card: 4, Expected: 4
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 0
Deck Card: 4, Expected: 4
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 0
Deck Card: 4, Expected: 4
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 0
Deck Card: 4, Expected: 4
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 0
Deck Card: 4, Expected: 4
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 0
Hand Card: 4, Expected: 4
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 0
Hand Card: 4, Expected: 4
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 0
Hand Card: 4, Expected: 4
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 0
Hand Card: 4, Expected: 4
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 0
Hand Card: 4, Expected: 4
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 0
Hand Card: 4, Expected: 4
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 0
Hand Card: 4, Expected: 4
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 0
Deck Card: 5, Expected: 5
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 0
Deck Card: 5, Expected: 5
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 0
Deck Card: 5, Expected: 5
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 0
Deck Card: 5, Expected: 5
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 0
Deck Card: 5, Expected: 5
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 0
Deck Card: 5, Expected: 5
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 0
Deck Card: 5, Expected: 5
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 0
Hand Card: 5, Expected: 5
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 0
Hand Card: 5, Expected: 5
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 0
Hand Card: 5, Expected: 5
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 0
Hand Card: 5, Expected: 5
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 0
Hand Card: 5, Expected: 5
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 0
Hand Card: 5, Expected: 5
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 0
Hand Card: 5, Expected: 5
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 0
Deck Card: 6, Expected: 6
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 0
Deck Card: 6, Expected: 6
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 0
Deck Card: 6, Expected: 6
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 0
Deck Card: 6, Expected: 6
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 0
Deck Card: 6, Expected: 6
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 0
Deck Card: 6, Expected: 6
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 0
Deck Card: 6, Expected: 6
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 0
Hand Card: 6, Expected: 6
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 0
Hand Card: 6, Expected: 6
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 0
Hand Card: 6, Expected: 6
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 0
Hand Card: 6, Expected: 6
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 0
Hand Card: 6, Expected: 6
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 0
Hand Card: 6, Expected: 6
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 0
Hand Card: 6, Expected: 6
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 0
Deck Card: 7, Expected: 7
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 0
Deck Card: 7, Expected: 7
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 0
Deck Card: 7, Expected: 7
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 0
Deck Card: 7, Expected: 7
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 0
Deck Card: 7, Expected: 7
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 0
Deck Card: 7, Expected: 7
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 0
Deck Card: 7, Expected: 7
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 0
Hand Card: 7, Expected: 7
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 0
Hand Card: 7, Expected: 7
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 0
Hand Card: 7, Expected: 7
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 0
Hand Card: 7, Expected: 7
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 0
Hand Card: 7, Expected: 7
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 0
Hand Card: 7, Expected: 7
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 0
Hand Card: 7, Expected: 7
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 0
Deck Card: 8, Expected: 8
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 0
Deck Card: 8, Expected: 8
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 0
Deck Card: 8, Expected: 8
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 0
Deck Card: 8, Expected: 8
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 0
Deck Card: 8, Expected: 8
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 0
Deck Card: 8, Expected: 8
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 0
Deck Card: 8, Expected: 8
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 0
Hand Card: 8, Expected: 8
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 0
Hand Card: 8, Expected: 8
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 0
Hand Card: 8, Expected: 8
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 0
Hand Card: 8, Expected: 8
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 0
Hand Card: 8, Expected: 8
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 0
Hand Card: 8, Expected: 8
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 0
Hand Card: 8, Expected: 8
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 0
Deck Card: 9, Expected: 9
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 0
Deck Card: 9, Expected: 9
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 0
Deck Card: 9, Expected: 9
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 0
Deck Card: 9, Expected: 9
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 0
Deck Card: 9, Expected: 9
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 0
Deck Card: 9, Expected: 9
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 0
Deck Card: 9, Expected: 9
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 0
Hand Card: 9, Expected: 9
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 0
Hand Card: 9, Expected: 9
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 0
Hand Card: 9, Expected: 9
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 0
Hand Card: 9, Expected: 9
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 0
Hand Card: 9, Expected: 9
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 0
Hand Card: 9, Expected: 9
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 0
Hand Card: 9, Expected: 9
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 0
Deck Card: 10, Expected: 10
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 0
Deck Card: 10, Expected: 10
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 0
Deck Card: 10, Expected: 10
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 0
Deck Card: 10, Expected: 10
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 0
Deck Card: 10, Expected: 10
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 0
Deck Card: 10, Expected: 10
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 0
Deck Card: 10, Expected: 10
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 0
Hand Card: 10, Expected: 10
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 0
Hand Card: 10, Expected: 10
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 0
Hand Card: 10, Expected: 10
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 0
Hand Card: 10, Expected: 10
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 0
Hand Card: 10, Expected: 10
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 0
Hand Card: 10, Expected: 10
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 0
Hand Card: 10, Expected: 10
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 0
Deck Card: 11, Expected: 11
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 0
Deck Card: 11, Expected: 11
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 0
Deck Card: 11, Expected: 11
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 0
Deck Card: 11, Expected: 11
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 0
Deck Card: 11, Expected: 11
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 0
Deck Card: 11, Expected: 11
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 0
Deck Card: 11, Expected: 11
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 0
Hand Card: 11, Expected: 11
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 0
Hand Card: 11, Expected: 11
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 0
Hand Card: 11, Expected: 11
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 0
Hand Card: 11, Expected: 11
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 0
Hand Card: 11, Expected: 11
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 0
Hand Card: 11, Expected: 11
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 0
Hand Card: 11, Expected: 11
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 0
Deck Card: 12, Expected: 12
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 0
Deck Card: 12, Expected: 12
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 0
Deck Card: 12, Expected: 12
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 0
Deck Card: 12, Expected: 12
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 0
Deck Card: 12, Expected: 12
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 0
Deck Card: 12, Expected: 12
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 0
Deck Card: 12, Expected: 12
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 0
Hand Card: 12, Expected: 12
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 0
Hand Card: 12, Expected: 12
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 0
Hand Card: 12, Expected: 12
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 0
Hand Card: 12, Expected: 12
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 0
Hand Card: 12, Expected: 12
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 0
Hand Card: 12, Expected: 12
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 0
Hand Card: 12, Expected: 12
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 0
Deck Card: 13, Expected: 13
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 0
Deck Card: 13, Expected: 13
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 0
Deck Card: 13, Expected: 13
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 0
Deck Card: 13, Expected: 13
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 0
Deck Card: 13, Expected: 13
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 0
Deck Card: 13, Expected: 13
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 0
Deck Card: 13, Expected: 13
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 0
Hand Card: 13, Expected: 13
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 0
Hand Card: 13, Expected: 13
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 0
Hand Card: 13, Expected: 13
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 0
Hand Card: 13, Expected: 13
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 0
Hand Card: 13, Expected: 13
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 0
Hand Card: 13, Expected: 13
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 0
Hand Card: 13, Expected: 13
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 0
Deck Card: 14, Expected: 14
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 0
Deck Card: 14, Expected: 14
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 0
Deck Card: 14, Expected: 14
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 0
Deck Card: 14, Expected: 14
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 0
Deck Card: 14, Expected: 14
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 0
Deck Card: 14, Expected: 14
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 0
Deck Card: 14, Expected: 14
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 0
Hand Card: 14, Expected: 14
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 0
Hand Card: 14, Expected: 14
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 0
Hand Card: 14, Expected: 14
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 0
Hand Card: 14, Expected: 14
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 0
Hand Card: 14, Expected: 14
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 0
Hand Card: 14, Expected: 14
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 0
Hand Card: 14, Expected: 14
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 0
Deck Card: 15, Expected: 15
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 0
Deck Card: 15, Expected: 15
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 0
Deck Card: 15, Expected: 15
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 0
Deck Card: 15, Expected: 15
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 0
Deck Card: 15, Expected: 15
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 0
Deck Card: 15, Expected: 15
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 0
Deck Card: 15, Expected: 15
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 0
Hand Card: 15, Expected: 15
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 0
Hand Card: 15, Expected: 15
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 0
Hand Card: 15, Expected: 15
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 0
Hand Card: 15, Expected: 15
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 0
Hand Card: 15, Expected: 15
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 0
Hand Card: 15, Expected: 15
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 0
Hand Card: 15, Expected: 15
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 0
Deck Card: 16, Expected: 16
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 0
Deck Card: 16, Expected: 16
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 0
Deck Card: 16, Expected: 16
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 0
Deck Card: 16, Expected: 16
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 0
Deck Card: 16, Expected: 16
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 0
Deck Card: 16, Expected: 16
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 0
Deck Card: 16, Expected: 16
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 0
Hand Card: 16, Expected: 16
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 0
Hand Card: 16, Expected: 16
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 0
Hand Card: 16, Expected: 16
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 0
Hand Card: 16, Expected: 16
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 0
Hand Card: 16, Expected: 16
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 0
Hand Card: 16, Expected: 16
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 0
Hand Card: 16, Expected: 16
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 1
Deck Card: 0, Expected: 0
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 1
Deck Card: 0, Expected: 0
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 1
Deck Card: 0, Expected: 0
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 1
Deck Card: 0, Expected: 0
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 1
Deck Card: 0, Expected: 0
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 1
Deck Card: 0, Expected: 0
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 1
Deck Card: 0, Expected: 0
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 1
Hand Card: 0, Expected: 0
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 1
Hand Card: 0, Expected: 0
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 1
Hand Card: 0, Expected: 0
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 1
Hand Card: 0, Expected: 0
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 1
Hand Card: 0, Expected: 0
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 1
Hand Card: 0, Expected: 0
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 1
Hand Card: 0, Expected: 0
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 1
Deck Card: 1, Expected: 1
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 1
Deck Card: 1, Expected: 1
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 1
Deck Card: 1, Expected: 1
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 1
Deck Card: 1, Expected: 1
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 1
Deck Card: 1, Expected: 1
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 1
Deck Card: 1, Expected: 1
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 1
Deck Card: 1, Expected: 1
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 1
Hand Card: 1, Expected: 1
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 1
Hand Card: 1, Expected: 1
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 1
Hand Card: 1, Expected: 1
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 1
Hand Card: 1, Expected: 1
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 1
Hand Card: 1, Expected: 1
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 1
Hand Card: 1, Expected: 1
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 1
Hand Card: 1, Expected: 1
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 1
Deck Card: 2, Expected: 2
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 1
Deck Card: 2, Expected: 2
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 1
Deck Card: 2, Expected: 2
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 1
Deck Card: 2, Expected: 2
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 1
Deck Card: 2, Expected: 2
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 1
Deck Card: 2, Expected: 2
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 1
Deck Card: 2, Expected: 2
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 1
Hand Card: 2, Expected: 2
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 1
Hand Card: 2, Expected: 2
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 1
Hand Card: 2, Expected: 2
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 1
Hand Card: 2, Expected: 2
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 1
Hand Card: 2, Expected: 2
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 1
Hand Card: 2, Expected: 2
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 1
Hand Card: 2, Expected: 2
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 1
Deck Card: 3, Expected: 3
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 1
Deck Card: 3, Expected: 3
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 1
Deck Card: 3, Expected: 3
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 1
Deck Card: 3, Expected: 3
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 1
Deck Card: 3, Expected: 3
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 1
Deck Card: 3, Expected: 3
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 1
Deck Card: 3, Expected: 3
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 1
Hand Card: 3, Expected: 3
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 1
Hand Card: 3, Expected: 3
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 1
Hand Card: 3, Expected: 3
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 1
Hand Card: 3, Expected: 3
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 1
Hand Card: 3, Expected: 3
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 1
Hand Card: 3, Expected: 3
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 1
Hand Card: 3, Expected: 3
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 1
Deck Card: 4, Expected: 4
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 1
Deck Card: 4, Expected: 4
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 1
Deck Card: 4, Expected: 4
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 1
Deck Card: 4, Expected: 4
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 1
Deck Card: 4, Expected: 4
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 1
Deck Card: 4, Expected: 4
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 1
Deck Card: 4, Expected: 4
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 1
Hand Card: 4, Expected: 4
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 1
Hand Card: 4, Expected: 4
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 1
Hand Card: 4, Expected: 4
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 1
Hand Card: 4, Expected: 4
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 1
Hand Card: 4, Expected: 4
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 1
Hand Card: 4, Expected: 4
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 1
Hand Card: 4, Expected: 4
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 1
Deck Card: 5, Expected: 5
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 1
Deck Card: 5, Expected: 5
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 1
Deck Card: 5, Expected: 5
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 1
Deck Card: 5, Expected: 5
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 1
Deck Card: 5, Expected: 5
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 1
Deck Card: 5, Expected: 5
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 1
Deck Card: 5, Expected: 5
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 1
Hand Card: 5, Expected: 5
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 1
Hand Card: 5, Expected: 5
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 1
Hand Card: 5, Expected: 5
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 1
Hand Card: 5, Expected: 5
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 1
Hand Card: 5, Expected: 5
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 1
Hand Card: 5, Expected: 5
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 1
Hand Card: 5, Expected: 5
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 1
Deck Card: 6, Expected: 6
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 1
Deck Card: 6, Expected: 6
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 1
Deck Card: 6, Expected: 6
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 1
Deck Card: 6, Expected: 6
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 1
Deck Card: 6, Expected: 6
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 1
Deck Card: 6, Expected: 6
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 1
Deck Card: 6, Expected: 6
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 1
Hand Card: 6, Expected: 6
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 1
Hand Card: 6, Expected: 6
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 1
Hand Card: 6, Expected: 6
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 1
Hand Card: 6, Expected: 6
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 1
Hand Card: 6, Expected: 6
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 1
Hand Card: 6, Expected: 6
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 1
Hand Card: 6, Expected: 6
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 1
Deck Card: 7, Expected: 7
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 1
Deck Card: 7, Expected: 7
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 1
Deck Card: 7, Expected: 7
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 1
Deck Card: 7, Expected: 7
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 1
Deck Card: 7, Expected: 7
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 1
Deck Card: 7, Expected: 7
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 1
Deck Card: 7, Expected: 7
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 1
Hand Card: 7, Expected: 7
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 1
Hand Card: 7, Expected: 7
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 1
Hand Card: 7, Expected: 7
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 1
Hand Card: 7, Expected: 7
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 1
Hand Card: 7, Expected: 7
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 1
Hand Card: 7, Expected: 7
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 1
Hand Card: 7, Expected: 7
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 1
Deck Card: 8, Expected: 8
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 1
Deck Card: 8, Expected: 8
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 1
Deck Card: 8, Expected: 8
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 1
Deck Card: 8, Expected: 8
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 1
Deck Card: 8, Expected: 8
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 1
Deck Card: 8, Expected: 8
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 1
Deck Card: 8, Expected: 8
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 1
Hand Card: 8, Expected: 8
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 1
Hand Card: 8, Expected: 8
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 1
Hand Card: 8, Expected: 8
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 1
Hand Card: 8, Expected: 8
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 1
Hand Card: 8, Expected: 8
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 1
Hand Card: 8, Expected: 8
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 1
Hand Card: 8, Expected: 8
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 1
Deck Card: 9, Expected: 9
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 1
Deck Card: 9, Expected: 9
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 1
Deck Card: 9, Expected: 9
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 1
Deck Card: 9, Expected: 9
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 1
Deck Card: 9, Expected: 9
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 1
Deck Card: 9, Expected: 9
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 1
Deck Card: 9, Expected: 9
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 1
Hand Card: 9, Expected: 9
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 1
Hand Card: 9, Expected: 9
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 1
Hand Card: 9, Expected: 9
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 1
Hand Card: 9, Expected: 9
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 1
Hand Card: 9, Expected: 9
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 1
Hand Card: 9, Expected: 9
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 1
Hand Card: 9, Expected: 9
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 1
Deck Card: 10, Expected: 10
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 1
Deck Card: 10, Expected: 10
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 1
Deck Card: 10, Expected: 10
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 1
Deck Card: 10, Expected: 10
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 1
Deck Card: 10, Expected: 10
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 1
Deck Card: 10, Expected: 10
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 1
Deck Card: 10, Expected: 10
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 1
Hand Card: 10, Expected: 10
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 1
Hand Card: 10, Expected: 10
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 1
Hand Card: 10, Expected: 10
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 1
Hand Card: 10, Expected: 10
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 1
Hand Card: 10, Expected: 10
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 1
Hand Card: 10, Expected: 10
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 1
Hand Card: 10, Expected: 10
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 1
Deck Card: 11, Expected: 11
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 1
Deck Card: 11, Expected: 11
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 1
Deck Card: 11, Expected: 11
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 1
Deck Card: 11, Expected: 11
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 1
Deck Card: 11, Expected: 11
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 1
Deck Card: 11, Expected: 11
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 1
Deck Card: 11, Expected: 11
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 1
Hand Card: 11, Expected: 11
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 1
Hand Card: 11, Expected: 11
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 1
Hand Card: 11, Expected: 11
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 1
Hand Card: 11, Expected: 11
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 1
Hand Card: 11, Expected: 11
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 1
Hand Card: 11, Expected: 11
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 1
Hand Card: 11, Expected: 11
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 1
Deck Card: 12, Expected: 12
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 1
Deck Card: 12, Expected: 12
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 1
Deck Card: 12, Expected: 12
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 1
Deck Card: 12, Expected: 12
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 1
Deck Card: 12, Expected: 12
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 1
Deck Card: 12, Expected: 12
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 1
Deck Card: 12, Expected: 12
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 1
Hand Card: 12, Expected: 12
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 1
Hand Card: 12, Expected: 12
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 1
Hand Card: 12, Expected: 12
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 1
Hand Card: 12, Expected: 12
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 1
Hand Card: 12, Expected: 12
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 1
Hand Card: 12, Expected: 12
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 1
Hand Card: 12, Expected: 12
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 1
Deck Card: 13, Expected: 13
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 1
Deck Card: 13, Expected: 13
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 1
Deck Card: 13, Expected: 13
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 1
Deck Card: 13, Expected: 13
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 1
Deck Card: 13, Expected: 13
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 1
Deck Card: 13, Expected: 13
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 1
Deck Card: 13, Expected: 13
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 1
Hand Card: 13, Expected: 13
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 1
Hand Card: 13, Expected: 13
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 1
Hand Card: 13, Expected: 13
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 1
Hand Card: 13, Expected: 13
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 1
Hand Card: 13, Expected: 13
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 1
Hand Card: 13, Expected: 13
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 1
Hand Card: 13, Expected: 13
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 1
Deck Card: 14, Expected: 14
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 1
Deck Card: 14, Expected: 14
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 1
Deck Card: 14, Expected: 14
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 1
Deck Card: 14, Expected: 14
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 1
Deck Card: 14, Expected: 14
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 1
Deck Card: 14, Expected: 14
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 1
Deck Card: 14, Expected: 14
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 1
Hand Card: 14, Expected: 14
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 1
Hand Card: 14, Expected: 14
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 1
Hand Card: 14, Expected: 14
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 1
Hand Card: 14, Expected: 14
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 1
Hand Card: 14, Expected: 14
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 1
Hand Card: 14, Expected: 14
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 1
Hand Card: 14, Expected: 14
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 1
Deck Card: 15, Expected: 15
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 1
Deck Card: 15, Expected: 15
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 1
Deck Card: 15, Expected: 15
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 1
Deck Card: 15, Expected: 15
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 1
Deck Card: 15, Expected: 15
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 1
Deck Card: 15, Expected: 15
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 1
Deck Card: 15, Expected: 15
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 1
Hand Card: 15, Expected: 15
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 1
Hand Card: 15, Expected: 15
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 1
Hand Card: 15, Expected: 15
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 1
Hand Card: 15, Expected: 15
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 1
Hand Card: 15, Expected: 15
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 1
Hand Card: 15, Expected: 15
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 1
Hand Card: 15, Expected: 15
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 1
Deck Card: 16, Expected: 16
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 1
Deck Card: 16, Expected: 16
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 1
Deck Card: 16, Expected: 16
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 1
Deck Card: 16, Expected: 16
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 1
Deck Card: 16, Expected: 16
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 1
Deck Card: 16, Expected: 16
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 1
Deck Card: 16, Expected: 16
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 1
Hand Card: 16, Expected: 16
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 1
Hand Card: 16, Expected: 16
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 1
Hand Card: 16, Expected: 16
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 1
Hand Card: 16, Expected: 16
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 1
Hand Card: 16, Expected: 16
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 1
Hand Card: 16, Expected: 16
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 1
Hand Card: 16, Expected: 16
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
All tests passed!
TESTING isGameOver():
Testing game with 0 province cards.
return value: 1, Expected: 1 
Testing game with 1 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 2 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 3 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 4 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 5 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 6 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 7 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 8 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 9 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 10 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 11 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 12 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 0 province cards.
return value: 1, Expected: 1 
Testing game with 1 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 2 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 3 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 4 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 5 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 6 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 7 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 8 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 9 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 10 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 11 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 12 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
All tests passed!
Function 'compare'
Lines executed:100.00% of 6

Function 'newGame'
Lines executed:0.00% of 2

Function 'kingdomCards'
Lines executed:0.00% of 12

Function 'initializeGame'
Lines executed:85.90% of 78

Function 'shuffle'
Lines executed:100.00% of 18

Function 'playCard'
Lines executed:85.71% of 14

Function 'buyCard'
Lines executed:76.92% of 13

Function 'numHandCards'
Lines executed:100.00% of 1

Function 'handCard'
Lines executed:100.00% of 2

Function 'supplyCount'
Lines executed:100.00% of 1

Function 'fullDeckCount'
Lines executed:100.00% of 11

Function 'whoseTurn'
Lines executed:100.00% of 1

Function 'endTurn'
Lines executed:100.00% of 22

Function 'isGameOver'
Lines executed:100.00% of 12

Function 'scoreFor'
Lines executed:100.00% of 26

Function 'getWinners'
Lines executed:0.00% of 33

Function 'drawCard'
Lines executed:100.00% of 24

Function 'getCost'
Lines executed:23.33% of 30

Function 'smithyfun'
Lines executed:100.00% of 5

Function 'adventurerfun'
Lines executed:100.00% of 17

Function 'villagefun'
Lines executed:100.00% of 3

Function 'great_hallfun'
Lines executed:0.00% of 4

Function 'stewardfun'
Lines executed:81.82% of 11

Function 'cardEffect'
Lines executed:11.86% of 253

Function 'discardCard'
Lines executed:100.00% of 15

Function 'gainCard'
Lines executed:100.00% of 15

Function 'updateCoins'
Lines executed:100.00% of 14

File 'dominion.c'
Lines executed:51.01% of 643
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:62
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
   207663:    9:  if (*(int*)a > *(int*)b)
      336:   10:    return 1;
   207327:   11:  if (*(int*)a < *(int*)b)
    74154:   12:    return -1;
   133173:   13:  return 0;
   207663:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     7377:   44:  SelectStream(1);
     7377:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
    14754:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     7377:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   162294:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
  1622940:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
  1401630:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
   737700:   65:        }
    73770:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     7377:   73:  if (numPlayers == 2)
        -:   74:    {
     7377:   75:      state->supplyCount[curse] = 10;
     7377:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     7377:   87:  if (numPlayers == 2)
        -:   88:    {
     7377:   89:      state->supplyCount[estate] = 8;
     7377:   90:      state->supplyCount[duchy] = 8;
     7377:   91:      state->supplyCount[province] = 8;
     7377:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     7377:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     7377:  102:  state->supplyCount[silver] = 40;
     7377:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   309834:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
  2434410:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
  1143435:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
   140165:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    14752:  115:		  if (numPlayers == 2){ 
    14752:  116:		    state->supplyCount[i] = 8; 
    14752:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
    14752:  119:		}
        -:  120:	      else
        -:  121:		{
    59018:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    73770:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
  1069665:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
  1069665:  130:	}
        -:  131:
   147540:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    44262:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
    14754:  140:      state->deckCount[i] = 0;
   118032:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    44262:  143:	  state->deck[i][j] = estate;
    44262:  144:	  state->deckCount[i]++;
    44262:  145:	}
   236064:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
   103278:  148:	  state->deck[i][j] = copper;
   103278:  149:	  state->deckCount[i]++;		
   103278:  150:	}
    14754:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    44262:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
    14754:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
    14754:  160:    }
        -:  161:
        -:  162:  //draw player hands
    44262:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    14754:  166:      state->handCount[i] = 0;
    14754:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
    14754:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
   413112:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
   199179:  178:      state->embargoTokens[i] = 0;
   199179:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     7377:  182:  state->outpostPlayed = 0;
     7377:  183:  state->phase = 0;
     7377:  184:  state->numActions = 1;
     7377:  185:  state->numBuys = 1;
     7377:  186:  state->playedCardCount = 0;
     7377:  187:  state->whoseTurn = 0;
     7377:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    88524:  192:  for (it = 0; it < 5; it++){
    36885:  193:    drawCard(state->whoseTurn, state);
    36885:  194:  }
        -:  195:
     7377:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     7377:  198:  return 0;
     7377:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    27349:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    27349:  209:  if (state->deckCount[player] < 1)
    12560:  210:    return -1;
    14789:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   325618:  214:  while (state->deckCount[player] > 0) {
   148020:  215:    card = floor(Random() * state->deckCount[player]);
   148020:  216:    newDeck[newDeckPos] = state->deck[player][card];
   148020:  217:    newDeckPos++;
  1037144:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   370552:  219:      state->deck[player][i] = state->deck[player][i+1];
   370552:  220:    }
   148020:  221:    state->deckCount[player]--;
        -:  222:  }
   325618:  223:  for (i = 0; i < newDeckPos; i++) {
   148020:  224:    state->deck[player][i] = newDeck[i];
   148020:  225:    state->deckCount[player]++;
   148020:  226:  }
        -:  227:
    14789:  228:  return 0;
    27349:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
       61:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       61:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
       61:  243:  if ( state->numActions < 1 )
        -:  244:    {
       36:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
       25:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
       32:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
       18:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
        7:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        7:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        7:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
        7:  269:  return 0;
       61:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
       73:  280:  who = state->whoseTurn;
        -:  281:
       73:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
       73:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
       73:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
       73:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
       73:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
       73:  299:    state->coins = (state->coins) - (getCost(supplyPos));
       73:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
       73:  308:  return 0;
       73:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
      536:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
     1128:  316:  int currentPlayer = whoseTurn(state);
     1128:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
    11375:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
     1280:  326:  int count = 0;
        -:  327:
    19408:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
     9768:  330:      if (state->deck[player][i] == card) count++;
     8424:  331:    }
        -:  332:
    44900:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    24764:  335:      if (state->hand[player][i] == card) count++;
    21170:  336:    }
        -:  337:
    35488:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    19208:  340:      if (state->discard[player][i] == card) count++;
    16464:  341:    }
        -:  342:
     1280:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
     1870:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
       77:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
      988:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
      417:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      417:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
      417:  359:  }
       77:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
       77:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
       39:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
       39:  365:  }
        -:  366:  else{
       38:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
       77:  370:  state->outpostPlayed = 0;
       77:  371:  state->phase = 0;
       77:  372:  state->numActions = 1;
       77:  373:  state->coins = 0;
       77:  374:  state->numBuys = 1;
       77:  375:  state->playedCardCount = 0;
       77:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
      924:  380:  for (k = 0; k < 5; k++){
      385:  381:    drawCard(state->whoseTurn, state);//Draw a card
      385:  382:  }
        -:  383:
        -:  384:  //Update money
       77:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
       77:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
      811:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
      302:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
      509:  401:  j = 0;
    26468:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    12725:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
      864:  406:	  j++;
      864:  407:	}
    12725:  408:    }
      509:  409:  if ( j >= 3)
        -:  410:    {
      144:  411:      return 1;
        -:  412:    }
        -:  413:
      365:  414:  return 0;
      811:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
      244:  420:  int score = 0;
        -:  421:  //score from hand
     6268:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
     3386:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
     3355:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
     3358:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
     3363:  427:      if (state->hand[player][i] == province) { score = score + 6; };
     3366:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
     3370:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     2890:  430:    }
        -:  431:
        -:  432:  //score from discard
     3884:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
     1978:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
     1980:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
     1978:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
     1982:  438:      if (state->discard[player][i] == province) { score = score + 6; };
     1978:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
     1978:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     1698:  441:    }
        -:  442:
        -:  443:  //score from deck
     3884:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
     1978:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
     1981:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
     1978:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
     1980:  449:      if (state->deck[player][i] == province) { score = score + 6; };
     1978:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
     1978:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     1698:  452:    }
        -:  453:
      244:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    44591:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    14090:  533:    for (i = 0; i < state->discardCount[player];i++){
      480:  534:      state->deck[player][i] = state->discard[player][i];
      480:  535:      state->discard[player][i] = -1;
      480:  536:    }
        -:  537:
     6565:  538:    state->deckCount[player] = state->discardCount[player];
     6565:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     6565:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     6565:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     6565:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     6565:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     6565:  559:    if (deckCounter == 0)
     6530:  560:      return -1;
        -:  561:
       35:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       35:  563:    state->deckCount[player]--;
       35:  564:    state->handCount[player]++;//Increment hand count
       35:  565:  }
        -:  566:
        -:  567:  else{
    38026:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    38026:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    38026:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    38026:  576:    state->deckCount[player]--;
    38026:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    38061:  580:  return 0;
    44591:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
      146:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
       32:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
       70:  598:      return 3;
        -:  599:    case gold:
       28:  600:      return 6;
        -:  601:    case adventurer:
        8:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
        8:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
      146:  644:}
        -:  645:
        -:  646://smithy function to introduce a bug
        -:  647:int smithyfun(int currentPlayer, struct gameState *state, int handPos){
        -:  648:  //+3 Cards
        -:  649:  int i;
      628:  650:  for (i = 0; i <= 3; i++)
        -:  651:  {
      251:  652:    drawCard(currentPlayer, state);
      251:  653:  }
        -:  654:      
        -:  655:      //discard card from hand
       63:  656:      discardCard(handPos, currentPlayer, state, 0);
       63:  657:      return 0;
        -:  658:}
        -:  659:
        -:  660://adventurer function to introduce a bug
        -:  661:int adventurerfun(int currentPlayer, struct gameState *state){
        -:  662:    int cardDrawn;
        -:  663:    int temphand[MAX_HAND];
2291246309455167542:  664:    int drawntreasure = 0;
2291246309455167542:  665:    int z = 0;
        -:  666:
10104103169071348714:  667:  while(drawntreasure <= 2){
72057701412116453:  668:      if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
17981540516:  669:          shuffle(currentPlayer, state);
17981540516:  670:      }
7018965447127853292:  671:  drawCard(currentPlayer, state);
7018965447127853292:  672:  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
14469171020717095294:  673:  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    28367:  674:  drawntreasure++;
        -:  675:  else{
     5991:  676:  temphand[z]=cardDrawn;
     5991:  677:  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     5991:  678:  z++;
        -:  679:  }
        -:  680:}
        -:  681:    
    12134:  682:    while(z-1>=0){
     5991:  683:  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     5991:  684:      z=z-1;
        -:  685:    }
       76:  686:    return 0;
        -:  687:}
        -:  688:
        -:  689:int villagefun(int handPos, int currentPlayer, struct gameState *state){
        -:  690:        //+1 Card
        3:  691:        drawCard(currentPlayer, state);
        -:  692:        
        -:  693:        //+2 Actions
        3:  694:        state->numActions = state->numActions + 2;
        -:  695:        
        -:  696:        //discard played card from hand
        -:  697:        //discardCard(handPos, currentPlayer, state, 0);
        3:  698:        return 0;
        -:  699:}
        -:  700:
        -:  701:int great_hallfun(int currentPlayer, struct gameState *state, int handPos){
        -:  702:        //+1 Card
    #####:  703:        drawCard(currentPlayer, state);
        -:  704:        
        -:  705:        //+1 Actions
    #####:  706:        state->numActions++;
        -:  707:        
        -:  708:        //discard card from hand
    #####:  709:        discardCard(handPos, currentPlayer, state, 0);
    #####:  710:        return 0;
        -:  711:}
        -:  712:
        -:  713:int stewardfun(int choice1, int choice2, int choice3, int handPos, int currentPlayer, struct gameState *state){
        -:  714:
      150:  715:  if (choice1 == 1)
        -:  716:	{
        -:  717:	  //+2 cards
       50:  718:	  drawCard(currentPlayer, state);
       50:  719:	  drawCard(currentPlayer, state);
       50:  720:	}
      100:  721:      else if (choice2 == 2)
        -:  722:	{
        -:  723:	  //+2 coins
    #####:  724:	  state->coins = state->coins + 2;
    #####:  725:	}
        -:  726:      else
        -:  727:	{
        -:  728:	  //trash 2 cards in hand
      100:  729:	  discardCard(choice2, currentPlayer, state, 1);
      100:  730:	  discardCard(choice3, currentPlayer, state, 1);
        -:  731:	}
        -:  732:			
        -:  733:      //discard card from hand
      150:  734:      discardCard(handPos, currentPlayer, state, 0);
      150:  735:      return 0;
        -:  736:}
        -:  737:
        -:  738:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  739:{
        -:  740:  int i;
        -:  741:  int j;
        -:  742:  int k;
        -:  743:  int x;
        -:  744:  int index;
       52:  745:  int currentPlayer = whoseTurn(state);
       52:  746:  int nextPlayer = currentPlayer + 1;
        -:  747:
       52:  748:  int tributeRevealedCards[2] = {-1, -1};
        -:  749:  int temphand[MAX_HAND];// moved above the if statement
       52:  750:  if (nextPlayer > (state->numPlayers - 1)){
        4:  751:    nextPlayer = 0;
        4:  752:  }
        -:  753:  
        -:  754:	
        -:  755:  //uses switch to select card and perform actions
       62:  756:  switch( card ) 
        -:  757:    {
        -:  758:    case adventurer:
        4:  759:      adventurerfun(currentPlayer, state);
        -:  760:			
        -:  761:    case council_room:
        -:  762:      //+4 Cards
      490:  763:      for (i = 0; i < 4; i++)
        -:  764:	{
      196:  765:	  drawCard(currentPlayer, state);
      196:  766:	}
        -:  767:			
        -:  768:      //+1 Buy
       49:  769:      state->numBuys++;
        -:  770:			
        -:  771:      //Each other player draws a card
      294:  772:      for (i = 0; i < state->numPlayers; i++)
        -:  773:	{
       98:  774:	  if ( i != currentPlayer )
        -:  775:	    {
       49:  776:	      drawCard(i, state);
       49:  777:	    }
       98:  778:	}
        -:  779:			
        -:  780:      //put played card in played card pile
       49:  781:      discardCard(handPos, currentPlayer, state, 0);
        -:  782:			
       49:  783:      return 0;
        -:  784:			
        -:  785:    case feast:
        -:  786:      //gain card with cost up to 5
        -:  787:      //Backup hand
    #####:  788:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  789:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  790:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  791:      }
        -:  792:      //Backup hand
        -:  793:
        -:  794:      //Update Coins for Buy
    #####:  795:      updateCoins(currentPlayer, state, 5);
    #####:  796:      x = 1;//Condition to loop on
    #####:  797:      while( x == 1) {//Buy one card
    #####:  798:	if (supplyCount(choice1, state) <= 0){
        -:  799:	  if (DEBUG)
        -:  800:	    printf("None of that card left, sorry!\n");
        -:  801:
        -:  802:	  if (DEBUG){
        -:  803:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  804:	  }
    #####:  805:	}
    #####:  806:	else if (state->coins < getCost(choice1)){
    #####:  807:	  printf("That card is too expensive!\n");
        -:  808:
        -:  809:	  if (DEBUG){
        -:  810:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  811:	  }
    #####:  812:	}
        -:  813:	else{
        -:  814:
        -:  815:	  if (DEBUG){
        -:  816:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  817:	  }
        -:  818:
    #####:  819:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  820:	  x = 0;//No more buying cards
        -:  821:
        -:  822:	  if (DEBUG){
        -:  823:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  824:	  }
        -:  825:
        -:  826:	}
        -:  827:      }     
        -:  828:
        -:  829:      //Reset Hand
    #####:  830:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  831:	state->hand[currentPlayer][i] = temphand[i];
    #####:  832:	temphand[i] = -1;
    #####:  833:      }
        -:  834:      //Reset Hand
        -:  835:      			
    #####:  836:      return 0;
        -:  837:			
        -:  838:    case gardens:
    #####:  839:      return -1;
        -:  840:			
        -:  841:    case mine:
    #####:  842:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  843:
    #####:  844:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  845:	{
    #####:  846:	  return -1;
        -:  847:	}
        -:  848:		
    #####:  849:      if (choice2 > treasure_map || choice2 < curse)
        -:  850:	{
    #####:  851:	  return -1;
        -:  852:	}
        -:  853:
    #####:  854:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  855:	{
    #####:  856:	  return -1;
        -:  857:	}
        -:  858:
    #####:  859:      gainCard(choice2, state, 2, currentPlayer);
        -:  860:
        -:  861:      //discard card from hand
    #####:  862:      discardCard(handPos, currentPlayer, state, 0);
        -:  863:
        -:  864:      //discard trashed card
    #####:  865:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  866:	{
    #####:  867:	  if (state->hand[currentPlayer][i] == j)
        -:  868:	    {
    #####:  869:	      discardCard(i, currentPlayer, state, 0);			
    #####:  870:	      break;
        -:  871:	    }
    #####:  872:	}
        -:  873:			
    #####:  874:      return 0;
        -:  875:			
        -:  876:    case remodel:
    #####:  877:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  878:
    #####:  879:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  880:	{
    #####:  881:	  return -1;
        -:  882:	}
        -:  883:
    #####:  884:      gainCard(choice2, state, 0, currentPlayer);
        -:  885:
        -:  886:      //discard card from hand
    #####:  887:      discardCard(handPos, currentPlayer, state, 0);
        -:  888:
        -:  889:      //discard trashed card
    #####:  890:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  891:	{
    #####:  892:	  if (state->hand[currentPlayer][i] == j)
        -:  893:	    {
    #####:  894:	      discardCard(i, currentPlayer, state, 0);			
    #####:  895:	      break;
        -:  896:	    }
    #####:  897:	}
        -:  898:
        -:  899:
    #####:  900:      return 0;
        -:  901:		
        -:  902:    case smithy:
        -:  903:      //+3 Cards
        3:  904:      smithyfun(currentPlayer, state, handPos);
        -:  905:
        -:  906:    case village:
        3:  907:      villagefun(handPos, currentPlayer, state);
        -:  908:		
        -:  909:    case baron:
        3:  910:      state->numBuys++;//Increase buys by 1!
        3:  911:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  912:	int p = 0;//Iterator for hand!
    #####:  913:	int card_not_discarded = 1;//Flag for discard set!
    #####:  914:	while(card_not_discarded){
    #####:  915:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  916:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  917:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  918:	    state->discardCount[currentPlayer]++;
    #####:  919:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  920:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  921:	    }
    #####:  922:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  923:	    state->handCount[currentPlayer]--;
    #####:  924:	    card_not_discarded = 0;//Exit the loop
    #####:  925:	  }
    #####:  926:	  else if (p > state->handCount[currentPlayer]){
        -:  927:	    if(DEBUG) {
        -:  928:	      printf("No estate cards in your hand, invalid choice\n");
        -:  929:	      printf("Must gain an estate if there are any\n");
        -:  930:	    }
    #####:  931:	    if (supplyCount(estate, state) > 0){
    #####:  932:	      gainCard(estate, state, 0, currentPlayer);
    #####:  933:	      state->supplyCount[estate]--;//Decrement estates
    #####:  934:	      if (supplyCount(estate, state) == 0){
    #####:  935:		isGameOver(state);
    #####:  936:	      }
    #####:  937:	    }
    #####:  938:	    card_not_discarded = 0;//Exit the loop
    #####:  939:	  }
        -:  940:			    
        -:  941:	  else{
    #####:  942:	    p++;//Next card
        -:  943:	  }
        -:  944:	}
    #####:  945:      }
        -:  946:			    
        -:  947:      else{
        3:  948:	if (supplyCount(estate, state) > 0){
        3:  949:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
        3:  950:	  state->supplyCount[estate]--;//Decrement Estates
        3:  951:	  if (supplyCount(estate, state) == 0){
    #####:  952:	    isGameOver(state);
    #####:  953:	  }
        3:  954:	}
        -:  955:      }
        -:  956:	    
        -:  957:      
        3:  958:      return 0;
        -:  959:		
        -:  960:    case great_hall:
    #####:  961:      great_hallfun(currentPlayer, state, handPos);
        -:  962:		
        -:  963:    case minion:
        -:  964:      //+1 action
    #####:  965:      state->numActions++;
        -:  966:			
        -:  967:      //discard card from hand
    #####:  968:      discardCard(handPos, currentPlayer, state, 0);
        -:  969:			
    #####:  970:      if (choice1)		//+2 coins
        -:  971:	{
    #####:  972:	  state->coins = state->coins + 2;
    #####:  973:	}
        -:  974:			
    #####:  975:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  976:	{
        -:  977:	  //discard hand
    #####:  978:	  while(numHandCards(state) > 0)
        -:  979:	    {
    #####:  980:	      discardCard(handPos, currentPlayer, state, 0);
        -:  981:	    }
        -:  982:				
        -:  983:	  //draw 4
    #####:  984:	  for (i = 0; i < 4; i++)
        -:  985:	    {
    #####:  986:	      drawCard(currentPlayer, state);
    #####:  987:	    }
        -:  988:				
        -:  989:	  //other players discard hand and redraw if hand size > 4
    #####:  990:	  for (i = 0; i < state->numPlayers; i++)
        -:  991:	    {
    #####:  992:	      if (i != currentPlayer)
        -:  993:		{
    #####:  994:		  if ( state->handCount[i] > 4 )
        -:  995:		    {
        -:  996:		      //discard hand
    #####:  997:		      while( state->handCount[i] > 0 )
        -:  998:			{
    #####:  999:			  discardCard(handPos, i, state, 0);
        -: 1000:			}
        -: 1001:							
        -: 1002:		      //draw 4
    #####: 1003:		      for (j = 0; j < 4; j++)
        -: 1004:			{
    #####: 1005:			  drawCard(i, state);
    #####: 1006:			}
    #####: 1007:		    }
    #####: 1008:		}
    #####: 1009:	    }
        -: 1010:				
    #####: 1011:	}
    #####: 1012:      return 0;
        -: 1013:		
        -: 1014:    case steward:
    #####: 1015:      stewardfun(choice1, choice2, choice3, handPos, currentPlayer, state);
        -: 1016:
        -: 1017:		
        -: 1018:    case tribute:
    #####: 1019:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1020:	if (state->deckCount[nextPlayer] > 0){
    #####: 1021:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1022:	  state->deckCount[nextPlayer]--;
    #####: 1023:	}
    #####: 1024:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1025:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1026:	  state->discardCount[nextPlayer]--;
    #####: 1027:	}
        -: 1028:	else{
        -: 1029:	  //No Card to Reveal
        -: 1030:	  if (DEBUG){
        -: 1031:	    printf("No cards to reveal\n");
        -: 1032:	  }
        -: 1033:	}
    #####: 1034:      }
        -: 1035:	    
        -: 1036:      else{
    #####: 1037:	if (state->deckCount[nextPlayer] == 0){
    #####: 1038:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1039:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1040:	    state->deckCount[nextPlayer]++;
    #####: 1041:	    state->discard[nextPlayer][i] = -1;
    #####: 1042:	    state->discardCount[nextPlayer]--;
    #####: 1043:	  }
        -: 1044:			    
    #####: 1045:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1046:	} 
    #####: 1047:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1048:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1049:	state->deckCount[nextPlayer]--;
    #####: 1050:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1051:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1052:	state->deckCount[nextPlayer]--;
        -: 1053:      }    
        -: 1054:		       
    #####: 1055:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1056:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1057:	state->playedCardCount++;
    #####: 1058:	tributeRevealedCards[1] = -1;
    #####: 1059:      }
        -: 1060:
    #####: 1061:      for (i = 0; i <= 2; i ++){
    #####: 1062:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1063:	  state->coins += 2;
    #####: 1064:	}
        -: 1065:		    
    #####: 1066:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1067:	  drawCard(currentPlayer, state);
    #####: 1068:	  drawCard(currentPlayer, state);
    #####: 1069:	}
        -: 1070:	else{//Action Card
    #####: 1071:	  state->numActions = state->numActions + 2;
        -: 1072:	}
    #####: 1073:      }
        -: 1074:	    
    #####: 1075:      return 0;
        -: 1076:		
        -: 1077:    case ambassador:
    #####: 1078:      j = 0;		//used to check if player has enough cards to discard
        -: 1079:
    #####: 1080:      if (choice2 > 2 || choice2 < 0)
        -: 1081:	{
    #####: 1082:	  return -1;				
        -: 1083:	}
        -: 1084:
    #####: 1085:      if (choice1 == handPos)
        -: 1086:	{
    #####: 1087:	  return -1;
        -: 1088:	}
        -: 1089:
    #####: 1090:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1091:	{
    #####: 1092:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1093:	    {
    #####: 1094:	      j++;
    #####: 1095:	    }
    #####: 1096:	}
    #####: 1097:      if (j < choice2)
        -: 1098:	{
    #####: 1099:	  return -1;				
        -: 1100:	}
        -: 1101:
        -: 1102:      if (DEBUG) 
        -: 1103:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1104:
        -: 1105:      //increase supply count for choosen card by amount being discarded
    #####: 1106:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1107:			
        -: 1108:      //each other player gains a copy of revealed card
    #####: 1109:      for (i = 0; i < state->numPlayers; i++)
        -: 1110:	{
    #####: 1111:	  if (i != currentPlayer)
        -: 1112:	    {
    #####: 1113:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1114:	    }
    #####: 1115:	}
        -: 1116:
        -: 1117:      //discard played card from hand
    #####: 1118:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1119:
        -: 1120:      //trash copies of cards returned to supply
    #####: 1121:      for (j = 0; j < choice2; j++)
        -: 1122:	{
    #####: 1123:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1124:	    {
    #####: 1125:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1126:		{
    #####: 1127:		  discardCard(i, currentPlayer, state, 1);
    #####: 1128:		  break;
        -: 1129:		}
    #####: 1130:	    }
    #####: 1131:	}			
        -: 1132:
    #####: 1133:      return 0;
        -: 1134:		
        -: 1135:    case cutpurse:
        -: 1136:
    #####: 1137:      updateCoins(currentPlayer, state, 2);
    #####: 1138:      for (i = 0; i < state->numPlayers; i++)
        -: 1139:	{
    #####: 1140:	  if (i != currentPlayer)
        -: 1141:	    {
    #####: 1142:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1143:		{
    #####: 1144:		  if (state->hand[i][j] == copper)
        -: 1145:		    {
    #####: 1146:		      discardCard(j, i, state, 0);
    #####: 1147:		      break;
        -: 1148:		    }
    #####: 1149:		  if (j == state->handCount[i])
        -: 1150:		    {
    #####: 1151:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1152:			{
        -: 1153:			  if (DEBUG)
        -: 1154:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1155:			}	
    #####: 1156:		      break;
        -: 1157:		    }		
    #####: 1158:		}
        -: 1159:					
    #####: 1160:	    }
        -: 1161:				
    #####: 1162:	}				
        -: 1163:
        -: 1164:      //discard played card from hand
    #####: 1165:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1166:
    #####: 1167:      return 0;
        -: 1168:
        -: 1169:		
        -: 1170:    case embargo: 
        -: 1171:      //+2 Coins
    #####: 1172:      state->coins = state->coins + 2;
        -: 1173:			
        -: 1174:      //see if selected pile is in play
    #####: 1175:      if ( state->supplyCount[choice1] == -1 )
        -: 1176:	{
    #####: 1177:	  return -1;
        -: 1178:	}
        -: 1179:			
        -: 1180:      //add embargo token to selected supply pile
    #####: 1181:      state->embargoTokens[choice1]++;
        -: 1182:			
        -: 1183:      //trash card
    #####: 1184:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1185:      return 0;
        -: 1186:		
        -: 1187:    case outpost:
        -: 1188:      //set outpost flag
    #####: 1189:      state->outpostPlayed++;
        -: 1190:			
        -: 1191:      //discard card
    #####: 1192:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1193:      return 0;
        -: 1194:		
        -: 1195:    case salvager:
        -: 1196:      //+1 buy
    #####: 1197:      state->numBuys++;
        -: 1198:			
    #####: 1199:      if (choice1)
        -: 1200:	{
        -: 1201:	  //gain coins equal to trashed card
    #####: 1202:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1203:	  //trash card
    #####: 1204:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1205:	}
        -: 1206:			
        -: 1207:      //discard card
    #####: 1208:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1209:      return 0;
        -: 1210:		
        -: 1211:    case sea_hag:
    #####: 1212:      for (i = 0; i < state->numPlayers; i++){
    #####: 1213:	if (i != currentPlayer){
    #####: 1214:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1215:	  state->discardCount[i]++;
    #####: 1216:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1217:	}
    #####: 1218:      }
    #####: 1219:      return 0;
        -: 1220:		
        -: 1221:    case treasure_map:
        -: 1222:      //search hand for another treasure_map
    #####: 1223:      index = -1;
    #####: 1224:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1225:	{
    #####: 1226:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1227:	    {
    #####: 1228:	      index = i;
    #####: 1229:	      break;
        -: 1230:	    }
    #####: 1231:	}
    #####: 1232:      if (index > -1)
        -: 1233:	{
        -: 1234:	  //trash both treasure cards
    #####: 1235:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1236:	  discardCard(index, currentPlayer, state, 1);
        -: 1237:
        -: 1238:	  //gain 4 Gold cards
    #####: 1239:	  for (i = 0; i < 4; i++)
        -: 1240:	    {
    #####: 1241:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1242:	    }
        -: 1243:				
        -: 1244:	  //return success
    #####: 1245:	  return 1;
        -: 1246:	}
        -: 1247:			
        -: 1248:      //no second treasure_map found in hand
    #####: 1249:      return -1;
        -: 1250:    }
        -: 1251:	
    #####: 1252:  return -1;
       52: 1253:}
        -: 1254:
        -: 1255:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1256:{
        -: 1257:	
        -: 1258:  //if card is not trashed, added to Played pile 
      963: 1259:  if (trashFlag < 1)
        -: 1260:    {
        -: 1261:      //add card to played pile
      513: 1262:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      513: 1263:      state->playedCardCount++;
      513: 1264:    }
        -: 1265:	
        -: 1266:  //set played card to -1
      963: 1267:  state->hand[currentPlayer][handPos] = -1;
        -: 1268:	
        -: 1269:  //remove card from player's hand
      963: 1270:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1271:    {
        -: 1272:      //reduce number of cards in hand
      146: 1273:      state->handCount[currentPlayer]--;
      146: 1274:    }
      817: 1275:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1276:    {
        -: 1277:      //reduce number of cards in hand
       80: 1278:      state->handCount[currentPlayer]--;
       80: 1279:    }
        -: 1280:  else 	
        -: 1281:    {
        -: 1282:      //replace discarded card with last card in hand
      737: 1283:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1284:      //set last card to -1
      737: 1285:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1286:      //reduce number of cards in hand
      737: 1287:      state->handCount[currentPlayer]--;
        -: 1288:    }
        -: 1289:	
      963: 1290:  return 0;
        -: 1291:}
        -: 1292:
        -: 1293:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1294:{
        -: 1295:  //Note: supplyPos is enum of choosen card
        -: 1296:	
        -: 1297:  //check if supply pile is empty (0) or card is not used in game (-1)
     5856: 1298:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1299:    {
      782: 1300:      return -1;
        -: 1301:    }
        -: 1302:	
        -: 1303:  //added card for [whoseTurn] current player:
        -: 1304:  // toFlag = 0 : add to discard
        -: 1305:  // toFlag = 1 : add to deck
        -: 1306:  // toFlag = 2 : add to hand
        -: 1307:
     5074: 1308:  if (toFlag == 1)
        -: 1309:    {
     1904: 1310:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
     1904: 1311:      state->deckCount[player]++;
     1904: 1312:    }
     3170: 1313:  else if (toFlag == 2)
        -: 1314:    {
     1666: 1315:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
     1666: 1316:      state->handCount[player]++;
     1666: 1317:    }
        -: 1318:  else
        -: 1319:    {
     1504: 1320:      state->discard[player][ state->discardCount[player] ] = supplyPos;
     1504: 1321:      state->discardCount[player]++;
        -: 1322:    }
        -: 1323:	
        -: 1324:  //decrease number in supply pile
     5074: 1325:  state->supplyCount[supplyPos]--;
        -: 1326:	 
     5074: 1327:  return 0;
     5856: 1328:}
        -: 1329:
        -: 1330:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1331:{
        -: 1332:  int i;
        -: 1333:	
        -: 1334:  //reset coin count
     7791: 1335:  state->coins = 0;
        -: 1336:
        -: 1337:  //add coins for each Treasure card in player's hand
    92236: 1338:  for (i = 0; i < state->handCount[player]; i++)
        -: 1339:    {
    38327: 1340:      if (state->hand[player][i] == copper)
        -: 1341:	{
    30030: 1342:	  state->coins += 1;
    30030: 1343:	}
     8297: 1344:      else if (state->hand[player][i] == silver)
        -: 1345:	{
      433: 1346:	  state->coins += 2;
      433: 1347:	}
     7864: 1348:      else if (state->hand[player][i] == gold)
        -: 1349:	{
      353: 1350:	  state->coins += 3;
      353: 1351:	}	
    38327: 1352:    }	
        -: 1353:
        -: 1354:  //add bonus
     7791: 1355:  state->coins += bonus;
        -: 1356:
     7791: 1357:  return 0;
        -: 1358:}
        -: 1359:
        -: 1360:
        -: 1361://end of dominion.c
        -: 1362:
TESTING smithyfun():
Playing with player 0, handPos 0
HandCount: 8, Expected: 7
test FAILED
DeckCount: 1, Expected: 2
test FAILED
PlayedCardCount: 1, Expected: 1
test passed
Playing with player 0, handPos 1
HandCount: 8, Expected: 7
test FAILED
DeckCount: 1, Expected: 2
test FAILED
PlayedCardCount: 1, Expected: 1
test passed
Playing with player 0, handPos 2
HandCount: 8, Expected: 7
test FAILED
DeckCount: 1, Expected: 2
test FAILED
PlayedCardCount: 1, Expected: 1
test passed
Playing with player 0, handPos 3
HandCount: 8, Expected: 7
test FAILED
DeckCount: 1, Expected: 2
test FAILED
PlayedCardCount: 1, Expected: 1
test passed
Playing with player 0, handPos 4
HandCount: 8, Expected: 7
test FAILED
DeckCount: 1, Expected: 2
test FAILED
PlayedCardCount: 1, Expected: 1
test passed
Playing with player 1, handPos 0
HandCount: 3, Expected: 2
test FAILED
DeckCount: 6, Expected: 7
test FAILED
PlayedCardCount: 1, Expected: 1
test passed
Playing with player 1, handPos 1
HandCount: 3, Expected: 2
test FAILED
DeckCount: 6, Expected: 7
test FAILED
PlayedCardCount: 1, Expected: 1
test passed
Playing with player 1, handPos 2
HandCount: 3, Expected: 2
test FAILED
DeckCount: 6, Expected: 7
test FAILED
PlayedCardCount: 1, Expected: 1
test passed
Playing with player 1, handPos 3
HandCount: 3, Expected: 2
test FAILED
DeckCount: 6, Expected: 7
test FAILED
PlayedCardCount: 1, Expected: 1
test passed
Playing with player 1, handPos 4
HandCount: 3, Expected: 2
test FAILED
DeckCount: 6, Expected: 7
test FAILED
PlayedCardCount: 1, Expected: 1
test passed
Tests failed.
TESTING stewardfun():
Testing with choice1 = 0, choice2 = 1, choice3 = 1, handPos = 0
Handcount: 2, Expected: 2
test passed
Testing with choice1 = 1, choice2 = 2, choice3 = 2, handPos = 0
Handcount: 6, Expected: 6
test passed
Testing with choice1 = 2, choice2 = 3, choice3 = 3, handPos = 0
Coins: 4, Expected: 6
test FAILED
Handcount: 2, Expected: 4
test FAILED
Testing with choice1 = 0, choice2 = 1, choice3 = 1, handPos = 1
Handcount: 2, Expected: 2
test passed
Testing with choice1 = 1, choice2 = 2, choice3 = 2, handPos = 1
Handcount: 6, Expected: 6
test passed
Testing with choice1 = 2, choice2 = 3, choice3 = 3, handPos = 1
Coins: 4, Expected: 6
test FAILED
Handcount: 2, Expected: 4
test FAILED
Testing with choice1 = 0, choice2 = 1, choice3 = 1, handPos = 2
Handcount: 2, Expected: 2
test passed
Testing with choice1 = 1, choice2 = 2, choice3 = 2, handPos = 2
Handcount: 6, Expected: 6
test passed
Testing with choice1 = 2, choice2 = 3, choice3 = 3, handPos = 2
Coins: 4, Expected: 6
test FAILED
Handcount: 2, Expected: 4
test FAILED
Testing with choice1 = 0, choice2 = 1, choice3 = 1, handPos = 3
Handcount: 2, Expected: 2
test passed
Testing with choice1 = 1, choice2 = 2, choice3 = 2, handPos = 3
Handcount: 6, Expected: 6
test passed
Testing with choice1 = 2, choice2 = 3, choice3 = 3, handPos = 3
Coins: 4, Expected: 6
test FAILED
Handcount: 2, Expected: 4
test FAILED
Testing with choice1 = 0, choice2 = 1, choice3 = 1, handPos = 4
Handcount: 2, Expected: 2
test passed
Testing with choice1 = 1, choice2 = 2, choice3 = 2, handPos = 4
Handcount: 6, Expected: 6
test passed
Testing with choice1 = 2, choice2 = 3, choice3 = 3, handPos = 4
Coins: 4, Expected: 6
test FAILED
Handcount: 2, Expected: 4
test FAILED
Testing with choice1 = 0, choice2 = 1, choice3 = 1, handPos = 0
Handcount: -3, Expected: -3
test passed
Testing with choice1 = 1, choice2 = 2, choice3 = 2, handPos = 0
Handcount: 1, Expected: 1
test passed
Testing with choice1 = 2, choice2 = 3, choice3 = 3, handPos = 0
Coins: 4, Expected: 6
test FAILED
Handcount: -3, Expected: -1
test FAILED
Testing with choice1 = 0, choice2 = 1, choice3 = 1, handPos = 1
Handcount: -3, Expected: -3
test passed
Testing with choice1 = 1, choice2 = 2, choice3 = 2, handPos = 1
Handcount: 1, Expected: 1
test passed
Testing with choice1 = 2, choice2 = 3, choice3 = 3, handPos = 1
Coins: 4, Expected: 6
test FAILED
Handcount: -3, Expected: -1
test FAILED
Testing with choice1 = 0, choice2 = 1, choice3 = 1, handPos = 2
Handcount: -3, Expected: -3
test passed
Testing with choice1 = 1, choice2 = 2, choice3 = 2, handPos = 2
Handcount: 1, Expected: 1
test passed
Testing with choice1 = 2, choice2 = 3, choice3 = 3, handPos = 2
Coins: 4, Expected: 6
test FAILED
Handcount: -3, Expected: -1
test FAILED
Testing with choice1 = 0, choice2 = 1, choice3 = 1, handPos = 3
Handcount: -3, Expected: -3
test passed
Testing with choice1 = 1, choice2 = 2, choice3 = 2, handPos = 3
Handcount: 1, Expected: 1
test passed
Testing with choice1 = 2, choice2 = 3, choice3 = 3, handPos = 3
Coins: 4, Expected: 6
test FAILED
Handcount: -3, Expected: -1
test FAILED
Testing with choice1 = 0, choice2 = 1, choice3 = 1, handPos = 4
Handcount: -3, Expected: -3
test passed
Testing with choice1 = 1, choice2 = 2, choice3 = 2, handPos = 4
Handcount: 1, Expected: 1
test passed
Testing with choice1 = 2, choice2 = 3, choice3 = 3, handPos = 4
Coins: 4, Expected: 6
test FAILED
Handcount: -3, Expected: -1
test FAILED
Tests failed.
TESTING adventurerfun():
Testing with 0 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 387389207
Test failed.
Card at position: 6
Card drawn: 387389207
Test failed.
Testing that 2 cards were drawn. 
HandCount: 5, Expected: 7
test FAILED
Testing with 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 8, Expected: 7
test FAILED
Testing with 10 deckcount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 8, Expected: 7
test FAILED
Testing with 0 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 387389207
Test failed.
Card at position: 1
Card drawn: 387389207
Test failed.
Testing that 2 cards were drawn. 
HandCount: -495, Expected: 2
test FAILED
Testing with 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 3, Expected: 2
test FAILED
Testing with 10 deckcount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 3, Expected: 2
test FAILED
Tests failed.
TESTING councilRoom card in cardEffect():
Testing with handPos 0
HandCount for current player: 8, Expected: 8
test passed
Buys: 2, Expected: 2
test passed
HandCount for other player: 1, Expected: 1
test passed
Testing with handPos 1
HandCount for current player: 8, Expected: 8
test passed
Buys: 2, Expected: 2
test passed
HandCount for other player: 1, Expected: 1
test passed
Testing with handPos 2
HandCount for current player: 8, Expected: 8
test passed
Buys: 2, Expected: 2
test passed
HandCount for other player: 1, Expected: 1
test passed
Testing with handPos 3
HandCount for current player: 8, Expected: 8
test passed
Buys: 2, Expected: 2
test passed
HandCount for other player: 1, Expected: 1
test passed
Testing with handPos 4
HandCount for current player: 8, Expected: 8
test passed
Buys: 2, Expected: 2
test passed
HandCount for other player: 1, Expected: 1
test passed
All tests passed!
TESTING scoreFor():
Testing with handcount: 0, discardcount: 0, deckCount: 0, and 0 of each card
Score: 0, Expected: 0
test passed
Testing with handcount: 0, discardcount: 0, deckCount: 0, and 0 of each card
Score: 0, Expected: 0
test passed
Testing with handcount: 0, discardcount: 0, deckCount: 0, and 0 of each card
Score: 0, Expected: 0
test passed
Testing with handcount: 6, discardcount: 0, deckCount: 0, and 1 of each card
Score: 10, Expected: 10
test passed
Testing with handcount: 6, discardcount: 6, deckCount: 0, and 1 of each card
Score: 30, Expected: 20
test FAILED
Testing with handcount: 6, discardcount: 6, deckCount: 6, and 1 of each card
Score: 30, Expected: 30
test passed
Testing with handcount: 12, discardcount: 0, deckCount: 0, and 2 of each card
Score: 20, Expected: 20
test passed
Testing with handcount: 12, discardcount: 12, deckCount: 0, and 2 of each card
Score: 60, Expected: 40
test FAILED
Testing with handcount: 12, discardcount: 12, deckCount: 12, and 2 of each card
Score: 60, Expected: 60
test passed
Testing with handcount: 18, discardcount: 0, deckCount: 0, and 3 of each card
Score: 30, Expected: 30
test passed
Testing with handcount: 18, discardcount: 18, deckCount: 0, and 3 of each card
Score: 90, Expected: 60
test FAILED
Testing with handcount: 18, discardcount: 18, deckCount: 18, and 3 of each card
Score: 90, Expected: 90
test passed
Testing with handcount: 24, discardcount: 0, deckCount: 0, and 4 of each card
Score: 40, Expected: 40
test passed
Testing with handcount: 24, discardcount: 24, deckCount: 0, and 4 of each card
Score: 120, Expected: 80
test FAILED
Testing with handcount: 24, discardcount: 24, deckCount: 24, and 4 of each card
Score: 132, Expected: 120
test FAILED
Testing with handcount: 0, discardcount: 0, deckCount: 0, and 0 of each card
Score: 0, Expected: 0
test passed
Testing with handcount: 0, discardcount: 0, deckCount: 0, and 0 of each card
Score: 0, Expected: 0
test passed
Testing with handcount: 0, discardcount: 0, deckCount: 0, and 0 of each card
Score: 0, Expected: 0
test passed
Testing with handcount: 6, discardcount: 0, deckCount: 0, and 1 of each card
Score: 10, Expected: 10
test passed
Testing with handcount: 6, discardcount: 6, deckCount: 0, and 1 of each card
Score: 30, Expected: 20
test FAILED
Testing with handcount: 6, discardcount: 6, deckCount: 6, and 1 of each card
Score: 30, Expected: 30
test passed
Testing with handcount: 12, discardcount: 0, deckCount: 0, and 2 of each card
Score: 20, Expected: 20
test passed
Testing with handcount: 12, discardcount: 12, deckCount: 0, and 2 of each card
Score: 60, Expected: 40
test FAILED
Testing with handcount: 12, discardcount: 12, deckCount: 12, and 2 of each card
Score: 60, Expected: 60
test passed
Testing with handcount: 18, discardcount: 0, deckCount: 0, and 3 of each card
Score: 30, Expected: 30
test passed
Testing with handcount: 18, discardcount: 18, deckCount: 0, and 3 of each card
Score: 90, Expected: 60
test FAILED
Testing with handcount: 18, discardcount: 18, deckCount: 18, and 3 of each card
Score: 90, Expected: 90
test passed
Testing with handcount: 24, discardcount: 0, deckCount: 0, and 4 of each card
Score: 40, Expected: 40
test passed
Testing with handcount: 24, discardcount: 24, deckCount: 0, and 4 of each card
Score: 120, Expected: 80
test FAILED
Testing with handcount: 24, discardcount: 24, deckCount: 24, and 4 of each card
Score: 132, Expected: 120
test FAILED
Tests failed.
TESTING discardCard():
Test player 0 with 1 card(s) and 0 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 0, expected = 0
Test player 0 with 1 card(s) and 0 hand position.
handcount = 0, expected = 0
Test player 0 with 1 card(s) and 1 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 0, expected = 0
Test player 0 with 1 card(s) and 1 hand position.
handcount = 0, expected = 0
Test player 0 with 1 card(s) and 2 hand position.
playedCard = 1, expected = 1
playedCardCount = 1, expected = 1
handcount = 0, expected = 0
Test player 0 with 1 card(s) and 2 hand position.
handcount = 0, expected = 0
Test player 0 with 1 card(s) and 3 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 0, expected = 0
Test player 0 with 1 card(s) and 3 hand position.
handcount = 0, expected = 0
Test player 0 with 1 card(s) and 4 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 0, expected = 0
Test player 0 with 1 card(s) and 4 hand position.
handcount = 0, expected = 0
Test player 0 with 2 card(s) and 0 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 1, expected = 1
Test player 0 with 2 card(s) and 0 hand position.
handcount = 1, expected = 1
Test player 0 with 2 card(s) and 1 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 1, expected = 1
Test player 0 with 2 card(s) and 1 hand position.
handcount = 1, expected = 1
Test player 0 with 2 card(s) and 2 hand position.
playedCard = 1, expected = 1
playedCardCount = 1, expected = 1
handcount = 1, expected = 1
Test player 0 with 2 card(s) and 2 hand position.
handcount = 1, expected = 1
Test player 0 with 2 card(s) and 3 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 1, expected = 1
Test player 0 with 2 card(s) and 3 hand position.
handcount = 1, expected = 1
Test player 0 with 2 card(s) and 4 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 1, expected = 1
Test player 0 with 2 card(s) and 4 hand position.
handcount = 1, expected = 1
Test player 0 with 3 card(s) and 0 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 2, expected = 2
Test player 0 with 3 card(s) and 0 hand position.
handcount = 2, expected = 2
Test player 0 with 3 card(s) and 1 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 2, expected = 2
Test player 0 with 3 card(s) and 1 hand position.
handcount = 2, expected = 2
Test player 0 with 3 card(s) and 2 hand position.
playedCard = 1, expected = 1
playedCardCount = 1, expected = 1
handcount = 2, expected = 2
Test player 0 with 3 card(s) and 2 hand position.
handcount = 2, expected = 2
Test player 0 with 3 card(s) and 3 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 2, expected = 2
Test player 0 with 3 card(s) and 3 hand position.
handcount = 2, expected = 2
Test player 0 with 3 card(s) and 4 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 2, expected = 2
Test player 0 with 3 card(s) and 4 hand position.
handcount = 2, expected = 2
Test player 0 with 4 card(s) and 0 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 3, expected = 3
Test player 0 with 4 card(s) and 0 hand position.
handcount = 3, expected = 3
Test player 0 with 4 card(s) and 1 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 3, expected = 3
Test player 0 with 4 card(s) and 1 hand position.
handcount = 3, expected = 3
Test player 0 with 4 card(s) and 2 hand position.
playedCard = 1, expected = 1
playedCardCount = 1, expected = 1
handcount = 3, expected = 3
Test player 0 with 4 card(s) and 2 hand position.
handcount = 3, expected = 3
Test player 0 with 4 card(s) and 3 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 3, expected = 3
Test player 0 with 4 card(s) and 3 hand position.
handcount = 3, expected = 3
Test player 0 with 4 card(s) and 4 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 3, expected = 3
Test player 0 with 4 card(s) and 4 hand position.
handcount = 3, expected = 3
Test player 0 with 5 card(s) and 0 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 4, expected = 4
Test player 0 with 5 card(s) and 0 hand position.
handcount = 4, expected = 4
Test player 0 with 5 card(s) and 1 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 4, expected = 4
Test player 0 with 5 card(s) and 1 hand position.
handcount = 4, expected = 4
Test player 0 with 5 card(s) and 2 hand position.
playedCard = 1, expected = 1
playedCardCount = 1, expected = 1
handcount = 4, expected = 4
Test player 0 with 5 card(s) and 2 hand position.
handcount = 4, expected = 4
Test player 0 with 5 card(s) and 3 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 4, expected = 4
Test player 0 with 5 card(s) and 3 hand position.
handcount = 4, expected = 4
Test player 0 with 5 card(s) and 4 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 4, expected = 4
Test player 0 with 5 card(s) and 4 hand position.
handcount = 4, expected = 4
Test player 1 with 1 card(s) and 0 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 0, expected = 0
Test player 1 with 1 card(s) and 0 hand position.
handcount = 0, expected = 0
Test player 1 with 1 card(s) and 1 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 0, expected = 0
Test player 1 with 1 card(s) and 1 hand position.
handcount = 0, expected = 0
Test player 1 with 1 card(s) and 2 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 0, expected = 0
Test player 1 with 1 card(s) and 2 hand position.
handcount = 0, expected = 0
Test player 1 with 1 card(s) and 3 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 0, expected = 0
Test player 1 with 1 card(s) and 3 hand position.
handcount = 0, expected = 0
Test player 1 with 1 card(s) and 4 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 0, expected = 0
Test player 1 with 1 card(s) and 4 hand position.
handcount = 0, expected = 0
Test player 1 with 2 card(s) and 0 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 1, expected = 1
Test player 1 with 2 card(s) and 0 hand position.
handcount = 1, expected = 1
Test player 1 with 2 card(s) and 1 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 1, expected = 1
Test player 1 with 2 card(s) and 1 hand position.
handcount = 1, expected = 1
Test player 1 with 2 card(s) and 2 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 1, expected = 1
Test player 1 with 2 card(s) and 2 hand position.
handcount = 1, expected = 1
Test player 1 with 2 card(s) and 3 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 1, expected = 1
Test player 1 with 2 card(s) and 3 hand position.
handcount = 1, expected = 1
Test player 1 with 2 card(s) and 4 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 1, expected = 1
Test player 1 with 2 card(s) and 4 hand position.
handcount = 1, expected = 1
Test player 1 with 3 card(s) and 0 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 2, expected = 2
Test player 1 with 3 card(s) and 0 hand position.
handcount = 2, expected = 2
Test player 1 with 3 card(s) and 1 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 2, expected = 2
Test player 1 with 3 card(s) and 1 hand position.
handcount = 2, expected = 2
Test player 1 with 3 card(s) and 2 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 2, expected = 2
Test player 1 with 3 card(s) and 2 hand position.
handcount = 2, expected = 2
Test player 1 with 3 card(s) and 3 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 2, expected = 2
Test player 1 with 3 card(s) and 3 hand position.
handcount = 2, expected = 2
Test player 1 with 3 card(s) and 4 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 2, expected = 2
Test player 1 with 3 card(s) and 4 hand position.
handcount = 2, expected = 2
Test player 1 with 4 card(s) and 0 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 3, expected = 3
Test player 1 with 4 card(s) and 0 hand position.
handcount = 3, expected = 3
Test player 1 with 4 card(s) and 1 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 3, expected = 3
Test player 1 with 4 card(s) and 1 hand position.
handcount = 3, expected = 3
Test player 1 with 4 card(s) and 2 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 3, expected = 3
Test player 1 with 4 card(s) and 2 hand position.
handcount = 3, expected = 3
Test player 1 with 4 card(s) and 3 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 3, expected = 3
Test player 1 with 4 card(s) and 3 hand position.
handcount = 3, expected = 3
Test player 1 with 4 card(s) and 4 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 3, expected = 3
Test player 1 with 4 card(s) and 4 hand position.
handcount = 3, expected = 3
Test player 1 with 5 card(s) and 0 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 4, expected = 4
Test player 1 with 5 card(s) and 0 hand position.
handcount = 4, expected = 4
Test player 1 with 5 card(s) and 1 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 4, expected = 4
Test player 1 with 5 card(s) and 1 hand position.
handcount = 4, expected = 4
Test player 1 with 5 card(s) and 2 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 4, expected = 4
Test player 1 with 5 card(s) and 2 hand position.
handcount = 4, expected = 4
Test player 1 with 5 card(s) and 3 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 4, expected = 4
Test player 1 with 5 card(s) and 3 hand position.
handcount = 4, expected = 4
Test player 1 with 5 card(s) and 4 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 4, expected = 4
Test player 1 with 5 card(s) and 4 hand position.
handcount = 4, expected = 4
All tests passed!
TESTING gainCard():
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 0
Deck Card: 0, Expected: 0
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 0
Deck Card: 0, Expected: 0
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 0
Deck Card: 0, Expected: 0
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 0
Deck Card: 0, Expected: 0
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 0
Deck Card: 0, Expected: 0
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 0
Deck Card: 0, Expected: 0
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 0
Deck Card: 0, Expected: 0
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 0
Hand Card: 0, Expected: 0
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 0
Hand Card: 0, Expected: 0
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 0
Hand Card: 0, Expected: 0
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 0
Hand Card: 0, Expected: 0
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 0
Hand Card: 0, Expected: 0
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 0
Hand Card: 0, Expected: 0
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 0
Hand Card: 0, Expected: 0
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 0
Deck Card: 1, Expected: 1
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 0
Deck Card: 1, Expected: 1
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 0
Deck Card: 1, Expected: 1
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 0
Deck Card: 1, Expected: 1
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 0
Deck Card: 1, Expected: 1
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 0
Deck Card: 1, Expected: 1
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 0
Deck Card: 1, Expected: 1
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 0
Hand Card: 1, Expected: 1
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 0
Hand Card: 1, Expected: 1
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 0
Hand Card: 1, Expected: 1
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 0
Hand Card: 1, Expected: 1
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 0
Hand Card: 1, Expected: 1
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 0
Hand Card: 1, Expected: 1
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 0
Hand Card: 1, Expected: 1
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 0
Deck Card: 2, Expected: 2
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 0
Deck Card: 2, Expected: 2
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 0
Deck Card: 2, Expected: 2
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 0
Deck Card: 2, Expected: 2
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 0
Deck Card: 2, Expected: 2
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 0
Deck Card: 2, Expected: 2
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 0
Deck Card: 2, Expected: 2
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 0
Hand Card: 2, Expected: 2
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 0
Hand Card: 2, Expected: 2
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 0
Hand Card: 2, Expected: 2
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 0
Hand Card: 2, Expected: 2
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 0
Hand Card: 2, Expected: 2
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 0
Hand Card: 2, Expected: 2
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 0
Hand Card: 2, Expected: 2
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 0
Deck Card: 3, Expected: 3
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 0
Deck Card: 3, Expected: 3
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 0
Deck Card: 3, Expected: 3
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 0
Deck Card: 3, Expected: 3
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 0
Deck Card: 3, Expected: 3
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 0
Deck Card: 3, Expected: 3
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 0
Deck Card: 3, Expected: 3
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 0
Hand Card: 3, Expected: 3
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 0
Hand Card: 3, Expected: 3
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 0
Hand Card: 3, Expected: 3
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 0
Hand Card: 3, Expected: 3
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 0
Hand Card: 3, Expected: 3
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 0
Hand Card: 3, Expected: 3
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 0
Hand Card: 3, Expected: 3
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 0
Deck Card: 4, Expected: 4
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 0
Deck Card: 4, Expected: 4
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 0
Deck Card: 4, Expected: 4
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 0
Deck Card: 4, Expected: 4
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 0
Deck Card: 4, Expected: 4
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 0
Deck Card: 4, Expected: 4
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 0
Deck Card: 4, Expected: 4
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 0
Hand Card: 4, Expected: 4
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 0
Hand Card: 4, Expected: 4
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 0
Hand Card: 4, Expected: 4
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 0
Hand Card: 4, Expected: 4
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 0
Hand Card: 4, Expected: 4
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 0
Hand Card: 4, Expected: 4
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 0
Hand Card: 4, Expected: 4
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 0
Deck Card: 5, Expected: 5
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 0
Deck Card: 5, Expected: 5
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 0
Deck Card: 5, Expected: 5
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 0
Deck Card: 5, Expected: 5
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 0
Deck Card: 5, Expected: 5
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 0
Deck Card: 5, Expected: 5
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 0
Deck Card: 5, Expected: 5
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 0
Hand Card: 5, Expected: 5
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 0
Hand Card: 5, Expected: 5
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 0
Hand Card: 5, Expected: 5
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 0
Hand Card: 5, Expected: 5
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 0
Hand Card: 5, Expected: 5
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 0
Hand Card: 5, Expected: 5
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 0
Hand Card: 5, Expected: 5
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 0
Deck Card: 6, Expected: 6
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 0
Deck Card: 6, Expected: 6
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 0
Deck Card: 6, Expected: 6
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 0
Deck Card: 6, Expected: 6
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 0
Deck Card: 6, Expected: 6
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 0
Deck Card: 6, Expected: 6
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 0
Deck Card: 6, Expected: 6
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 0
Hand Card: 6, Expected: 6
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 0
Hand Card: 6, Expected: 6
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 0
Hand Card: 6, Expected: 6
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 0
Hand Card: 6, Expected: 6
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 0
Hand Card: 6, Expected: 6
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 0
Hand Card: 6, Expected: 6
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 0
Hand Card: 6, Expected: 6
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 0
Deck Card: 7, Expected: 7
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 0
Deck Card: 7, Expected: 7
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 0
Deck Card: 7, Expected: 7
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 0
Deck Card: 7, Expected: 7
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 0
Deck Card: 7, Expected: 7
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 0
Deck Card: 7, Expected: 7
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 0
Deck Card: 7, Expected: 7
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 0
Hand Card: 7, Expected: 7
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 0
Hand Card: 7, Expected: 7
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 0
Hand Card: 7, Expected: 7
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 0
Hand Card: 7, Expected: 7
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 0
Hand Card: 7, Expected: 7
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 0
Hand Card: 7, Expected: 7
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 0
Hand Card: 7, Expected: 7
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 0
Deck Card: 8, Expected: 8
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 0
Deck Card: 8, Expected: 8
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 0
Deck Card: 8, Expected: 8
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 0
Deck Card: 8, Expected: 8
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 0
Deck Card: 8, Expected: 8
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 0
Deck Card: 8, Expected: 8
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 0
Deck Card: 8, Expected: 8
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 0
Hand Card: 8, Expected: 8
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 0
Hand Card: 8, Expected: 8
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 0
Hand Card: 8, Expected: 8
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 0
Hand Card: 8, Expected: 8
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 0
Hand Card: 8, Expected: 8
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 0
Hand Card: 8, Expected: 8
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 0
Hand Card: 8, Expected: 8
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 0
Deck Card: 9, Expected: 9
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 0
Deck Card: 9, Expected: 9
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 0
Deck Card: 9, Expected: 9
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 0
Deck Card: 9, Expected: 9
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 0
Deck Card: 9, Expected: 9
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 0
Deck Card: 9, Expected: 9
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 0
Deck Card: 9, Expected: 9
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 0
Hand Card: 9, Expected: 9
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 0
Hand Card: 9, Expected: 9
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 0
Hand Card: 9, Expected: 9
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 0
Hand Card: 9, Expected: 9
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 0
Hand Card: 9, Expected: 9
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 0
Hand Card: 9, Expected: 9
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 0
Hand Card: 9, Expected: 9
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 0
Deck Card: 10, Expected: 10
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 0
Deck Card: 10, Expected: 10
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 0
Deck Card: 10, Expected: 10
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 0
Deck Card: 10, Expected: 10
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 0
Deck Card: 10, Expected: 10
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 0
Deck Card: 10, Expected: 10
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 0
Deck Card: 10, Expected: 10
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 0
Hand Card: 10, Expected: 10
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 0
Hand Card: 10, Expected: 10
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 0
Hand Card: 10, Expected: 10
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 0
Hand Card: 10, Expected: 10
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 0
Hand Card: 10, Expected: 10
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 0
Hand Card: 10, Expected: 10
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 0
Hand Card: 10, Expected: 10
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 0
Deck Card: 11, Expected: 11
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 0
Deck Card: 11, Expected: 11
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 0
Deck Card: 11, Expected: 11
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 0
Deck Card: 11, Expected: 11
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 0
Deck Card: 11, Expected: 11
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 0
Deck Card: 11, Expected: 11
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 0
Deck Card: 11, Expected: 11
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 0
Hand Card: 11, Expected: 11
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 0
Hand Card: 11, Expected: 11
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 0
Hand Card: 11, Expected: 11
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 0
Hand Card: 11, Expected: 11
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 0
Hand Card: 11, Expected: 11
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 0
Hand Card: 11, Expected: 11
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 0
Hand Card: 11, Expected: 11
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 0
Deck Card: 12, Expected: 12
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 0
Deck Card: 12, Expected: 12
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 0
Deck Card: 12, Expected: 12
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 0
Deck Card: 12, Expected: 12
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 0
Deck Card: 12, Expected: 12
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 0
Deck Card: 12, Expected: 12
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 0
Deck Card: 12, Expected: 12
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 0
Hand Card: 12, Expected: 12
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 0
Hand Card: 12, Expected: 12
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 0
Hand Card: 12, Expected: 12
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 0
Hand Card: 12, Expected: 12
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 0
Hand Card: 12, Expected: 12
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 0
Hand Card: 12, Expected: 12
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 0
Hand Card: 12, Expected: 12
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 0
Deck Card: 13, Expected: 13
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 0
Deck Card: 13, Expected: 13
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 0
Deck Card: 13, Expected: 13
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 0
Deck Card: 13, Expected: 13
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 0
Deck Card: 13, Expected: 13
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 0
Deck Card: 13, Expected: 13
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 0
Deck Card: 13, Expected: 13
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 0
Hand Card: 13, Expected: 13
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 0
Hand Card: 13, Expected: 13
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 0
Hand Card: 13, Expected: 13
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 0
Hand Card: 13, Expected: 13
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 0
Hand Card: 13, Expected: 13
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 0
Hand Card: 13, Expected: 13
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 0
Hand Card: 13, Expected: 13
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 0
Deck Card: 14, Expected: 14
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 0
Deck Card: 14, Expected: 14
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 0
Deck Card: 14, Expected: 14
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 0
Deck Card: 14, Expected: 14
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 0
Deck Card: 14, Expected: 14
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 0
Deck Card: 14, Expected: 14
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 0
Deck Card: 14, Expected: 14
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 0
Hand Card: 14, Expected: 14
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 0
Hand Card: 14, Expected: 14
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 0
Hand Card: 14, Expected: 14
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 0
Hand Card: 14, Expected: 14
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 0
Hand Card: 14, Expected: 14
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 0
Hand Card: 14, Expected: 14
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 0
Hand Card: 14, Expected: 14
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 0
Deck Card: 15, Expected: 15
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 0
Deck Card: 15, Expected: 15
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 0
Deck Card: 15, Expected: 15
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 0
Deck Card: 15, Expected: 15
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 0
Deck Card: 15, Expected: 15
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 0
Deck Card: 15, Expected: 15
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 0
Deck Card: 15, Expected: 15
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 0
Hand Card: 15, Expected: 15
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 0
Hand Card: 15, Expected: 15
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 0
Hand Card: 15, Expected: 15
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 0
Hand Card: 15, Expected: 15
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 0
Hand Card: 15, Expected: 15
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 0
Hand Card: 15, Expected: 15
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 0
Hand Card: 15, Expected: 15
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 0
Deck Card: 16, Expected: 16
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 0
Deck Card: 16, Expected: 16
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 0
Deck Card: 16, Expected: 16
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 0
Deck Card: 16, Expected: 16
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 0
Deck Card: 16, Expected: 16
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 0
Deck Card: 16, Expected: 16
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 0
Deck Card: 16, Expected: 16
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 0
Hand Card: 16, Expected: 16
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 0
Hand Card: 16, Expected: 16
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 0
Hand Card: 16, Expected: 16
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 0
Hand Card: 16, Expected: 16
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 0
Hand Card: 16, Expected: 16
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 0
Hand Card: 16, Expected: 16
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 0
Hand Card: 16, Expected: 16
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 1
Deck Card: 0, Expected: 0
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 1
Deck Card: 0, Expected: 0
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 1
Deck Card: 0, Expected: 0
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 1
Deck Card: 0, Expected: 0
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 1
Deck Card: 0, Expected: 0
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 1
Deck Card: 0, Expected: 0
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 1
Deck Card: 0, Expected: 0
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 1
Hand Card: 0, Expected: 0
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 1
Hand Card: 0, Expected: 0
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 1
Hand Card: 0, Expected: 0
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 1
Hand Card: 0, Expected: 0
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 1
Hand Card: 0, Expected: 0
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 1
Hand Card: 0, Expected: 0
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 1
Hand Card: 0, Expected: 0
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 1
Deck Card: 1, Expected: 1
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 1
Deck Card: 1, Expected: 1
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 1
Deck Card: 1, Expected: 1
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 1
Deck Card: 1, Expected: 1
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 1
Deck Card: 1, Expected: 1
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 1
Deck Card: 1, Expected: 1
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 1
Deck Card: 1, Expected: 1
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 1
Hand Card: 1, Expected: 1
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 1
Hand Card: 1, Expected: 1
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 1
Hand Card: 1, Expected: 1
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 1
Hand Card: 1, Expected: 1
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 1
Hand Card: 1, Expected: 1
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 1
Hand Card: 1, Expected: 1
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 1
Hand Card: 1, Expected: 1
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 1
Deck Card: 2, Expected: 2
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 1
Deck Card: 2, Expected: 2
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 1
Deck Card: 2, Expected: 2
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 1
Deck Card: 2, Expected: 2
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 1
Deck Card: 2, Expected: 2
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 1
Deck Card: 2, Expected: 2
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 1
Deck Card: 2, Expected: 2
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 1
Hand Card: 2, Expected: 2
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 1
Hand Card: 2, Expected: 2
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 1
Hand Card: 2, Expected: 2
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 1
Hand Card: 2, Expected: 2
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 1
Hand Card: 2, Expected: 2
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 1
Hand Card: 2, Expected: 2
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 1
Hand Card: 2, Expected: 2
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 1
Deck Card: 3, Expected: 3
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 1
Deck Card: 3, Expected: 3
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 1
Deck Card: 3, Expected: 3
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 1
Deck Card: 3, Expected: 3
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 1
Deck Card: 3, Expected: 3
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 1
Deck Card: 3, Expected: 3
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 1
Deck Card: 3, Expected: 3
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 1
Hand Card: 3, Expected: 3
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 1
Hand Card: 3, Expected: 3
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 1
Hand Card: 3, Expected: 3
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 1
Hand Card: 3, Expected: 3
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 1
Hand Card: 3, Expected: 3
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 1
Hand Card: 3, Expected: 3
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 1
Hand Card: 3, Expected: 3
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 1
Deck Card: 4, Expected: 4
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 1
Deck Card: 4, Expected: 4
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 1
Deck Card: 4, Expected: 4
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 1
Deck Card: 4, Expected: 4
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 1
Deck Card: 4, Expected: 4
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 1
Deck Card: 4, Expected: 4
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 1
Deck Card: 4, Expected: 4
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 1
Hand Card: 4, Expected: 4
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 1
Hand Card: 4, Expected: 4
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 1
Hand Card: 4, Expected: 4
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 1
Hand Card: 4, Expected: 4
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 1
Hand Card: 4, Expected: 4
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 1
Hand Card: 4, Expected: 4
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 1
Hand Card: 4, Expected: 4
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 1
Deck Card: 5, Expected: 5
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 1
Deck Card: 5, Expected: 5
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 1
Deck Card: 5, Expected: 5
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 1
Deck Card: 5, Expected: 5
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 1
Deck Card: 5, Expected: 5
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 1
Deck Card: 5, Expected: 5
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 1
Deck Card: 5, Expected: 5
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 1
Hand Card: 5, Expected: 5
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 1
Hand Card: 5, Expected: 5
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 1
Hand Card: 5, Expected: 5
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 1
Hand Card: 5, Expected: 5
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 1
Hand Card: 5, Expected: 5
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 1
Hand Card: 5, Expected: 5
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 1
Hand Card: 5, Expected: 5
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 1
Deck Card: 6, Expected: 6
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 1
Deck Card: 6, Expected: 6
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 1
Deck Card: 6, Expected: 6
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 1
Deck Card: 6, Expected: 6
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 1
Deck Card: 6, Expected: 6
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 1
Deck Card: 6, Expected: 6
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 1
Deck Card: 6, Expected: 6
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 1
Hand Card: 6, Expected: 6
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 1
Hand Card: 6, Expected: 6
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 1
Hand Card: 6, Expected: 6
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 1
Hand Card: 6, Expected: 6
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 1
Hand Card: 6, Expected: 6
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 1
Hand Card: 6, Expected: 6
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 1
Hand Card: 6, Expected: 6
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 1
Deck Card: 7, Expected: 7
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 1
Deck Card: 7, Expected: 7
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 1
Deck Card: 7, Expected: 7
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 1
Deck Card: 7, Expected: 7
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 1
Deck Card: 7, Expected: 7
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 1
Deck Card: 7, Expected: 7
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 1
Deck Card: 7, Expected: 7
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 1
Hand Card: 7, Expected: 7
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 1
Hand Card: 7, Expected: 7
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 1
Hand Card: 7, Expected: 7
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 1
Hand Card: 7, Expected: 7
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 1
Hand Card: 7, Expected: 7
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 1
Hand Card: 7, Expected: 7
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 1
Hand Card: 7, Expected: 7
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 1
Deck Card: 8, Expected: 8
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 1
Deck Card: 8, Expected: 8
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 1
Deck Card: 8, Expected: 8
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 1
Deck Card: 8, Expected: 8
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 1
Deck Card: 8, Expected: 8
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 1
Deck Card: 8, Expected: 8
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 1
Deck Card: 8, Expected: 8
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 1
Hand Card: 8, Expected: 8
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 1
Hand Card: 8, Expected: 8
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 1
Hand Card: 8, Expected: 8
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 1
Hand Card: 8, Expected: 8
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 1
Hand Card: 8, Expected: 8
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 1
Hand Card: 8, Expected: 8
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 1
Hand Card: 8, Expected: 8
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 1
Deck Card: 9, Expected: 9
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 1
Deck Card: 9, Expected: 9
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 1
Deck Card: 9, Expected: 9
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 1
Deck Card: 9, Expected: 9
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 1
Deck Card: 9, Expected: 9
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 1
Deck Card: 9, Expected: 9
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 1
Deck Card: 9, Expected: 9
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 1
Hand Card: 9, Expected: 9
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 1
Hand Card: 9, Expected: 9
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 1
Hand Card: 9, Expected: 9
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 1
Hand Card: 9, Expected: 9
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 1
Hand Card: 9, Expected: 9
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 1
Hand Card: 9, Expected: 9
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 1
Hand Card: 9, Expected: 9
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 1
Deck Card: 10, Expected: 10
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 1
Deck Card: 10, Expected: 10
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 1
Deck Card: 10, Expected: 10
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 1
Deck Card: 10, Expected: 10
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 1
Deck Card: 10, Expected: 10
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 1
Deck Card: 10, Expected: 10
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 1
Deck Card: 10, Expected: 10
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 1
Hand Card: 10, Expected: 10
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 1
Hand Card: 10, Expected: 10
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 1
Hand Card: 10, Expected: 10
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 1
Hand Card: 10, Expected: 10
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 1
Hand Card: 10, Expected: 10
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 1
Hand Card: 10, Expected: 10
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 1
Hand Card: 10, Expected: 10
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 1
Deck Card: 11, Expected: 11
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 1
Deck Card: 11, Expected: 11
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 1
Deck Card: 11, Expected: 11
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 1
Deck Card: 11, Expected: 11
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 1
Deck Card: 11, Expected: 11
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 1
Deck Card: 11, Expected: 11
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 1
Deck Card: 11, Expected: 11
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 1
Hand Card: 11, Expected: 11
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 1
Hand Card: 11, Expected: 11
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 1
Hand Card: 11, Expected: 11
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 1
Hand Card: 11, Expected: 11
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 1
Hand Card: 11, Expected: 11
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 1
Hand Card: 11, Expected: 11
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 1
Hand Card: 11, Expected: 11
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 1
Deck Card: 12, Expected: 12
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 1
Deck Card: 12, Expected: 12
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 1
Deck Card: 12, Expected: 12
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 1
Deck Card: 12, Expected: 12
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 1
Deck Card: 12, Expected: 12
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 1
Deck Card: 12, Expected: 12
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 1
Deck Card: 12, Expected: 12
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 1
Hand Card: 12, Expected: 12
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 1
Hand Card: 12, Expected: 12
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 1
Hand Card: 12, Expected: 12
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 1
Hand Card: 12, Expected: 12
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 1
Hand Card: 12, Expected: 12
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 1
Hand Card: 12, Expected: 12
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 1
Hand Card: 12, Expected: 12
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 1
Deck Card: 13, Expected: 13
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 1
Deck Card: 13, Expected: 13
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 1
Deck Card: 13, Expected: 13
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 1
Deck Card: 13, Expected: 13
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 1
Deck Card: 13, Expected: 13
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 1
Deck Card: 13, Expected: 13
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 1
Deck Card: 13, Expected: 13
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 1
Hand Card: 13, Expected: 13
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 1
Hand Card: 13, Expected: 13
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 1
Hand Card: 13, Expected: 13
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 1
Hand Card: 13, Expected: 13
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 1
Hand Card: 13, Expected: 13
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 1
Hand Card: 13, Expected: 13
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 1
Hand Card: 13, Expected: 13
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 1
Deck Card: 14, Expected: 14
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 1
Deck Card: 14, Expected: 14
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 1
Deck Card: 14, Expected: 14
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 1
Deck Card: 14, Expected: 14
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 1
Deck Card: 14, Expected: 14
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 1
Deck Card: 14, Expected: 14
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 1
Deck Card: 14, Expected: 14
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 1
Hand Card: 14, Expected: 14
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 1
Hand Card: 14, Expected: 14
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 1
Hand Card: 14, Expected: 14
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 1
Hand Card: 14, Expected: 14
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 1
Hand Card: 14, Expected: 14
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 1
Hand Card: 14, Expected: 14
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 1
Hand Card: 14, Expected: 14
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 1
Deck Card: 15, Expected: 15
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 1
Deck Card: 15, Expected: 15
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 1
Deck Card: 15, Expected: 15
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 1
Deck Card: 15, Expected: 15
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 1
Deck Card: 15, Expected: 15
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 1
Deck Card: 15, Expected: 15
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 1
Deck Card: 15, Expected: 15
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 1
Hand Card: 15, Expected: 15
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 1
Hand Card: 15, Expected: 15
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 1
Hand Card: 15, Expected: 15
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 1
Hand Card: 15, Expected: 15
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 1
Hand Card: 15, Expected: 15
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 1
Hand Card: 15, Expected: 15
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 1
Hand Card: 15, Expected: 15
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 1
Deck Card: 16, Expected: 16
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 1
Deck Card: 16, Expected: 16
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 1
Deck Card: 16, Expected: 16
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 1
Deck Card: 16, Expected: 16
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 1
Deck Card: 16, Expected: 16
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 1
Deck Card: 16, Expected: 16
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 1
Deck Card: 16, Expected: 16
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 1
Hand Card: 16, Expected: 16
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 1
Hand Card: 16, Expected: 16
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 1
Hand Card: 16, Expected: 16
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 1
Hand Card: 16, Expected: 16
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 1
Hand Card: 16, Expected: 16
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 1
Hand Card: 16, Expected: 16
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 1
Hand Card: 16, Expected: 16
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
All tests passed!
TESTING isGameOver():
Testing game with 0 province cards.
return value: 1, Expected: 1 
Testing game with 1 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 2 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 3 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 4 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 5 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 6 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 7 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 8 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 9 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 10 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 11 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 12 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 0 province cards.
return value: 1, Expected: 1 
Testing game with 1 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 2 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 3 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 4 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 5 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 6 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 7 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 8 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 9 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 10 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 11 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 12 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
All tests passed!
Function 'compare'
Lines executed:100.00% of 6

Function 'newGame'
Lines executed:0.00% of 2

Function 'kingdomCards'
Lines executed:0.00% of 12

Function 'initializeGame'
Lines executed:85.90% of 78

Function 'shuffle'
Lines executed:100.00% of 18

Function 'playCard'
Lines executed:85.71% of 14

Function 'buyCard'
Lines executed:76.92% of 13

Function 'numHandCards'
Lines executed:100.00% of 1

Function 'handCard'
Lines executed:100.00% of 2

Function 'supplyCount'
Lines executed:100.00% of 1

Function 'fullDeckCount'
Lines executed:100.00% of 11

Function 'whoseTurn'
Lines executed:100.00% of 1

Function 'endTurn'
Lines executed:100.00% of 22

Function 'isGameOver'
Lines executed:100.00% of 12

Function 'scoreFor'
Lines executed:100.00% of 26

Function 'getWinners'
Lines executed:0.00% of 33

Function 'drawCard'
Lines executed:100.00% of 24

Function 'getCost'
Lines executed:23.33% of 30

Function 'smithyfun'
Lines executed:100.00% of 5

Function 'adventurerfun'
Lines executed:100.00% of 17

Function 'villagefun'
Lines executed:100.00% of 3

Function 'great_hallfun'
Lines executed:0.00% of 4

Function 'stewardfun'
Lines executed:81.82% of 11

Function 'cardEffect'
Lines executed:11.86% of 253

Function 'discardCard'
Lines executed:100.00% of 15

Function 'gainCard'
Lines executed:100.00% of 15

Function 'updateCoins'
Lines executed:100.00% of 14

File 'dominion.c'
Lines executed:51.01% of 643
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:70
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
   235523:    9:  if (*(int*)a > *(int*)b)
      336:   10:    return 1;
   235187:   11:  if (*(int*)a < *(int*)b)
    84104:   12:    return -1;
   151083:   13:  return 0;
   235523:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     8372:   44:  SelectStream(1);
     8372:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
    16744:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     8372:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   184184:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
  1841840:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
  1590680:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
   837200:   65:        }
    83720:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     8372:   73:  if (numPlayers == 2)
        -:   74:    {
     8372:   75:      state->supplyCount[curse] = 10;
     8372:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     8372:   87:  if (numPlayers == 2)
        -:   88:    {
     8372:   89:      state->supplyCount[estate] = 8;
     8372:   90:      state->supplyCount[duchy] = 8;
     8372:   91:      state->supplyCount[province] = 8;
     8372:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     8372:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     8372:  102:  state->supplyCount[silver] = 40;
     8372:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   351624:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
  2762760:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
  1297660:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
   159070:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    16742:  115:		  if (numPlayers == 2){ 
    16742:  116:		    state->supplyCount[i] = 8; 
    16742:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
    16742:  119:		}
        -:  120:	      else
        -:  121:		{
    66978:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    83720:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
  1213940:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
  1213940:  130:	}
        -:  131:
   167440:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    50232:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
    16744:  140:      state->deckCount[i] = 0;
   133952:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    50232:  143:	  state->deck[i][j] = estate;
    50232:  144:	  state->deckCount[i]++;
    50232:  145:	}
   267904:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
   117208:  148:	  state->deck[i][j] = copper;
   117208:  149:	  state->deckCount[i]++;		
   117208:  150:	}
    16744:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    50232:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
    16744:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
    16744:  160:    }
        -:  161:
        -:  162:  //draw player hands
    50232:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    16744:  166:      state->handCount[i] = 0;
    16744:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
    16744:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
   468832:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
   226044:  178:      state->embargoTokens[i] = 0;
   226044:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     8372:  182:  state->outpostPlayed = 0;
     8372:  183:  state->phase = 0;
     8372:  184:  state->numActions = 1;
     8372:  185:  state->numBuys = 1;
     8372:  186:  state->playedCardCount = 0;
     8372:  187:  state->whoseTurn = 0;
     8372:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
   100464:  192:  for (it = 0; it < 5; it++){
    41860:  193:    drawCard(state->whoseTurn, state);
    41860:  194:  }
        -:  195:
     8372:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     8372:  198:  return 0;
     8372:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    30341:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    30341:  209:  if (state->deckCount[player] < 1)
    13562:  210:    return -1;
    16779:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   369398:  214:  while (state->deckCount[player] > 0) {
   167920:  215:    card = floor(Random() * state->deckCount[player]);
   167920:  216:    newDeck[newDeckPos] = state->deck[player][card];
   167920:  217:    newDeckPos++;
  1176444:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   420302:  219:      state->deck[player][i] = state->deck[player][i+1];
   420302:  220:    }
   167920:  221:    state->deckCount[player]--;
        -:  222:  }
   369398:  223:  for (i = 0; i < newDeckPos; i++) {
   167920:  224:    state->deck[player][i] = newDeck[i];
   167920:  225:    state->deckCount[player]++;
   167920:  226:  }
        -:  227:
    16779:  228:  return 0;
    30341:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
       61:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       61:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
       61:  243:  if ( state->numActions < 1 )
        -:  244:    {
       36:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
       25:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
       32:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
       18:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
        7:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        7:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        7:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
        7:  269:  return 0;
       61:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
       73:  280:  who = state->whoseTurn;
        -:  281:
       73:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
       73:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
       73:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
       73:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
       73:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
       73:  299:    state->coins = (state->coins) - (getCost(supplyPos));
       73:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
       73:  308:  return 0;
       73:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
      536:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
     1128:  316:  int currentPlayer = whoseTurn(state);
     1128:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
    13007:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
     1450:  326:  int count = 0;
        -:  327:
    22082:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    11127:  330:      if (state->deck[player][i] == card) count++;
     9591:  331:    }
        -:  332:
    50914:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    28074:  335:      if (state->hand[player][i] == card) count++;
    24007:  336:    }
        -:  337:
    40532:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    21952:  340:      if (state->discard[player][i] == card) count++;
    18816:  341:    }
        -:  342:
     1450:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
     1875:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
       77:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
      988:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
      417:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      417:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
      417:  359:  }
       77:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
       77:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
       39:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
       39:  365:  }
        -:  366:  else{
       38:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
       77:  370:  state->outpostPlayed = 0;
       77:  371:  state->phase = 0;
       77:  372:  state->numActions = 1;
       77:  373:  state->coins = 0;
       77:  374:  state->numBuys = 1;
       77:  375:  state->playedCardCount = 0;
       77:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
      924:  380:  for (k = 0; k < 5; k++){
      385:  381:    drawCard(state->whoseTurn, state);//Draw a card
      385:  382:  }
        -:  383:
        -:  384:  //Update money
       77:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
       77:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
      933:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
      352:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
      581:  401:  j = 0;
    30212:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    14525:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
     1008:  406:	  j++;
     1008:  407:	}
    14525:  408:    }
      581:  409:  if ( j >= 3)
        -:  410:    {
      168:  411:      return 1;
        -:  412:    }
        -:  413:
      413:  414:  return 0;
      933:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
      274:  420:  int score = 0;
        -:  421:  //score from hand
     7048:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
     3806:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
     3775:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
     3778:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
     3783:  427:      if (state->hand[player][i] == province) { score = score + 6; };
     3786:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
     3790:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     3250:  430:    }
        -:  431:
        -:  432:  //score from discard
     4424:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
     2258:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
     2260:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
     2258:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
     2262:  438:      if (state->discard[player][i] == province) { score = score + 6; };
     2258:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
     2258:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     1938:  441:    }
        -:  442:
        -:  443:  //score from deck
     4424:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
     2258:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
     2261:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
     2258:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
     2260:  449:      if (state->deck[player][i] == province) { score = score + 6; };
     2258:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
     2258:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     1938:  452:    }
        -:  453:
      274:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    50168:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    15092:  533:    for (i = 0; i < state->discardCount[player];i++){
      480:  534:      state->deck[player][i] = state->discard[player][i];
      480:  535:      state->discard[player][i] = -1;
      480:  536:    }
        -:  537:
     7066:  538:    state->deckCount[player] = state->discardCount[player];
     7066:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     7066:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     7066:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     7066:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     7066:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     7066:  559:    if (deckCounter == 0)
     7031:  560:      return -1;
        -:  561:
       35:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       35:  563:    state->deckCount[player]--;
       35:  564:    state->handCount[player]++;//Increment hand count
       35:  565:  }
        -:  566:
        -:  567:  else{
    43102:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    43102:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    43102:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    43102:  576:    state->deckCount[player]--;
    43102:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    43137:  580:  return 0;
    50168:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
      146:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
       32:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
       70:  598:      return 3;
        -:  599:    case gold:
       28:  600:      return 6;
        -:  601:    case adventurer:
        8:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
        8:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
      146:  644:}
        -:  645:
        -:  646://smithy function to introduce a bug
        -:  647:int smithyfun(int currentPlayer, struct gameState *state, int handPos){
        -:  648:  //+3 Cards
        -:  649:  int i;
      728:  650:  for (i = 0; i <= 3; i++)
        -:  651:  {
      291:  652:    drawCard(currentPlayer, state);
      291:  653:  }
        -:  654:      
        -:  655:      //discard card from hand
       73:  656:      discardCard(handPos, currentPlayer, state, 0);
       73:  657:      return 0;
        -:  658:}
        -:  659:
        -:  660://adventurer function to introduce a bug
        -:  661:int adventurerfun(int currentPlayer, struct gameState *state){
        -:  662:    int cardDrawn;
        -:  663:    int temphand[MAX_HAND];
2291246309455167548:  664:    int drawntreasure = 0;
2291246309455167548:  665:    int z = 0;
        -:  666:
10104103169071349760:  667:  while(drawntreasure <= 2){
72057701412116970:  668:      if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
17981541017:  669:          shuffle(currentPlayer, state);
17981541017:  670:      }
7018965447127853809:  671:  drawCard(currentPlayer, state);
7018965447127853809:  672:  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
14469171020717096809:  673:  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    28385:  674:  drawntreasure++;
        -:  675:  else{
     6490:  676:  temphand[z]=cardDrawn;
     6490:  677:  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     6490:  678:  z++;
        -:  679:  }
        -:  680:}
        -:  681:    
    13144:  682:    while(z-1>=0){
     6490:  683:  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     6490:  684:      z=z-1;
        -:  685:    }
       82:  686:    return 0;
        -:  687:}
        -:  688:
        -:  689:int villagefun(int handPos, int currentPlayer, struct gameState *state){
        -:  690:        //+1 Card
        3:  691:        drawCard(currentPlayer, state);
        -:  692:        
        -:  693:        //+2 Actions
        3:  694:        state->numActions = state->numActions + 2;
        -:  695:        
        -:  696:        //discard played card from hand
        -:  697:        //discardCard(handPos, currentPlayer, state, 0);
        3:  698:        return 0;
        -:  699:}
        -:  700:
        -:  701:int great_hallfun(int currentPlayer, struct gameState *state, int handPos){
        -:  702:        //+1 Card
    #####:  703:        drawCard(currentPlayer, state);
        -:  704:        
        -:  705:        //+1 Actions
    #####:  706:        state->numActions++;
        -:  707:        
        -:  708:        //discard card from hand
    #####:  709:        discardCard(handPos, currentPlayer, state, 0);
    #####:  710:        return 0;
        -:  711:}
        -:  712:
        -:  713:int stewardfun(int choice1, int choice2, int choice3, int handPos, int currentPlayer, struct gameState *state){
        -:  714:
      180:  715:  if (choice1 == 1)
        -:  716:	{
        -:  717:	  //+2 cards
       60:  718:	  drawCard(currentPlayer, state);
       60:  719:	  drawCard(currentPlayer, state);
       60:  720:	}
      120:  721:      else if (choice2 == 2)
        -:  722:	{
        -:  723:	  //+2 coins
    #####:  724:	  state->coins = state->coins + 2;
    #####:  725:	}
        -:  726:      else
        -:  727:	{
        -:  728:	  //trash 2 cards in hand
      120:  729:	  discardCard(choice2, currentPlayer, state, 1);
      120:  730:	  discardCard(choice3, currentPlayer, state, 1);
        -:  731:	}
        -:  732:			
        -:  733:      //discard card from hand
      180:  734:      discardCard(handPos, currentPlayer, state, 0);
      180:  735:      return 0;
        -:  736:}
        -:  737:
        -:  738:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  739:{
        -:  740:  int i;
        -:  741:  int j;
        -:  742:  int k;
        -:  743:  int x;
        -:  744:  int index;
       57:  745:  int currentPlayer = whoseTurn(state);
       57:  746:  int nextPlayer = currentPlayer + 1;
        -:  747:
       57:  748:  int tributeRevealedCards[2] = {-1, -1};
        -:  749:  int temphand[MAX_HAND];// moved above the if statement
       57:  750:  if (nextPlayer > (state->numPlayers - 1)){
        4:  751:    nextPlayer = 0;
        4:  752:  }
        -:  753:  
        -:  754:	
        -:  755:  //uses switch to select card and perform actions
       67:  756:  switch( card ) 
        -:  757:    {
        -:  758:    case adventurer:
        4:  759:      adventurerfun(currentPlayer, state);
        -:  760:			
        -:  761:    case council_room:
        -:  762:      //+4 Cards
      540:  763:      for (i = 0; i < 4; i++)
        -:  764:	{
      216:  765:	  drawCard(currentPlayer, state);
      216:  766:	}
        -:  767:			
        -:  768:      //+1 Buy
       54:  769:      state->numBuys++;
        -:  770:			
        -:  771:      //Each other player draws a card
      324:  772:      for (i = 0; i < state->numPlayers; i++)
        -:  773:	{
      108:  774:	  if ( i != currentPlayer )
        -:  775:	    {
       54:  776:	      drawCard(i, state);
       54:  777:	    }
      108:  778:	}
        -:  779:			
        -:  780:      //put played card in played card pile
       54:  781:      discardCard(handPos, currentPlayer, state, 0);
        -:  782:			
       54:  783:      return 0;
        -:  784:			
        -:  785:    case feast:
        -:  786:      //gain card with cost up to 5
        -:  787:      //Backup hand
    #####:  788:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  789:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  790:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  791:      }
        -:  792:      //Backup hand
        -:  793:
        -:  794:      //Update Coins for Buy
    #####:  795:      updateCoins(currentPlayer, state, 5);
    #####:  796:      x = 1;//Condition to loop on
    #####:  797:      while( x == 1) {//Buy one card
    #####:  798:	if (supplyCount(choice1, state) <= 0){
        -:  799:	  if (DEBUG)
        -:  800:	    printf("None of that card left, sorry!\n");
        -:  801:
        -:  802:	  if (DEBUG){
        -:  803:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  804:	  }
    #####:  805:	}
    #####:  806:	else if (state->coins < getCost(choice1)){
    #####:  807:	  printf("That card is too expensive!\n");
        -:  808:
        -:  809:	  if (DEBUG){
        -:  810:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  811:	  }
    #####:  812:	}
        -:  813:	else{
        -:  814:
        -:  815:	  if (DEBUG){
        -:  816:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  817:	  }
        -:  818:
    #####:  819:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  820:	  x = 0;//No more buying cards
        -:  821:
        -:  822:	  if (DEBUG){
        -:  823:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  824:	  }
        -:  825:
        -:  826:	}
        -:  827:      }     
        -:  828:
        -:  829:      //Reset Hand
    #####:  830:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  831:	state->hand[currentPlayer][i] = temphand[i];
    #####:  832:	temphand[i] = -1;
    #####:  833:      }
        -:  834:      //Reset Hand
        -:  835:      			
    #####:  836:      return 0;
        -:  837:			
        -:  838:    case gardens:
    #####:  839:      return -1;
        -:  840:			
        -:  841:    case mine:
    #####:  842:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  843:
    #####:  844:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  845:	{
    #####:  846:	  return -1;
        -:  847:	}
        -:  848:		
    #####:  849:      if (choice2 > treasure_map || choice2 < curse)
        -:  850:	{
    #####:  851:	  return -1;
        -:  852:	}
        -:  853:
    #####:  854:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  855:	{
    #####:  856:	  return -1;
        -:  857:	}
        -:  858:
    #####:  859:      gainCard(choice2, state, 2, currentPlayer);
        -:  860:
        -:  861:      //discard card from hand
    #####:  862:      discardCard(handPos, currentPlayer, state, 0);
        -:  863:
        -:  864:      //discard trashed card
    #####:  865:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  866:	{
    #####:  867:	  if (state->hand[currentPlayer][i] == j)
        -:  868:	    {
    #####:  869:	      discardCard(i, currentPlayer, state, 0);			
    #####:  870:	      break;
        -:  871:	    }
    #####:  872:	}
        -:  873:			
    #####:  874:      return 0;
        -:  875:			
        -:  876:    case remodel:
    #####:  877:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  878:
    #####:  879:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  880:	{
    #####:  881:	  return -1;
        -:  882:	}
        -:  883:
    #####:  884:      gainCard(choice2, state, 0, currentPlayer);
        -:  885:
        -:  886:      //discard card from hand
    #####:  887:      discardCard(handPos, currentPlayer, state, 0);
        -:  888:
        -:  889:      //discard trashed card
    #####:  890:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  891:	{
    #####:  892:	  if (state->hand[currentPlayer][i] == j)
        -:  893:	    {
    #####:  894:	      discardCard(i, currentPlayer, state, 0);			
    #####:  895:	      break;
        -:  896:	    }
    #####:  897:	}
        -:  898:
        -:  899:
    #####:  900:      return 0;
        -:  901:		
        -:  902:    case smithy:
        -:  903:      //+3 Cards
        3:  904:      smithyfun(currentPlayer, state, handPos);
        -:  905:
        -:  906:    case village:
        3:  907:      villagefun(handPos, currentPlayer, state);
        -:  908:		
        -:  909:    case baron:
        3:  910:      state->numBuys++;//Increase buys by 1!
        3:  911:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  912:	int p = 0;//Iterator for hand!
    #####:  913:	int card_not_discarded = 1;//Flag for discard set!
    #####:  914:	while(card_not_discarded){
    #####:  915:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  916:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  917:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  918:	    state->discardCount[currentPlayer]++;
    #####:  919:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  920:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  921:	    }
    #####:  922:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  923:	    state->handCount[currentPlayer]--;
    #####:  924:	    card_not_discarded = 0;//Exit the loop
    #####:  925:	  }
    #####:  926:	  else if (p > state->handCount[currentPlayer]){
        -:  927:	    if(DEBUG) {
        -:  928:	      printf("No estate cards in your hand, invalid choice\n");
        -:  929:	      printf("Must gain an estate if there are any\n");
        -:  930:	    }
    #####:  931:	    if (supplyCount(estate, state) > 0){
    #####:  932:	      gainCard(estate, state, 0, currentPlayer);
    #####:  933:	      state->supplyCount[estate]--;//Decrement estates
    #####:  934:	      if (supplyCount(estate, state) == 0){
    #####:  935:		isGameOver(state);
    #####:  936:	      }
    #####:  937:	    }
    #####:  938:	    card_not_discarded = 0;//Exit the loop
    #####:  939:	  }
        -:  940:			    
        -:  941:	  else{
    #####:  942:	    p++;//Next card
        -:  943:	  }
        -:  944:	}
    #####:  945:      }
        -:  946:			    
        -:  947:      else{
        3:  948:	if (supplyCount(estate, state) > 0){
        3:  949:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
        3:  950:	  state->supplyCount[estate]--;//Decrement Estates
        3:  951:	  if (supplyCount(estate, state) == 0){
    #####:  952:	    isGameOver(state);
    #####:  953:	  }
        3:  954:	}
        -:  955:      }
        -:  956:	    
        -:  957:      
        3:  958:      return 0;
        -:  959:		
        -:  960:    case great_hall:
    #####:  961:      great_hallfun(currentPlayer, state, handPos);
        -:  962:		
        -:  963:    case minion:
        -:  964:      //+1 action
    #####:  965:      state->numActions++;
        -:  966:			
        -:  967:      //discard card from hand
    #####:  968:      discardCard(handPos, currentPlayer, state, 0);
        -:  969:			
    #####:  970:      if (choice1)		//+2 coins
        -:  971:	{
    #####:  972:	  state->coins = state->coins + 2;
    #####:  973:	}
        -:  974:			
    #####:  975:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  976:	{
        -:  977:	  //discard hand
    #####:  978:	  while(numHandCards(state) > 0)
        -:  979:	    {
    #####:  980:	      discardCard(handPos, currentPlayer, state, 0);
        -:  981:	    }
        -:  982:				
        -:  983:	  //draw 4
    #####:  984:	  for (i = 0; i < 4; i++)
        -:  985:	    {
    #####:  986:	      drawCard(currentPlayer, state);
    #####:  987:	    }
        -:  988:				
        -:  989:	  //other players discard hand and redraw if hand size > 4
    #####:  990:	  for (i = 0; i < state->numPlayers; i++)
        -:  991:	    {
    #####:  992:	      if (i != currentPlayer)
        -:  993:		{
    #####:  994:		  if ( state->handCount[i] > 4 )
        -:  995:		    {
        -:  996:		      //discard hand
    #####:  997:		      while( state->handCount[i] > 0 )
        -:  998:			{
    #####:  999:			  discardCard(handPos, i, state, 0);
        -: 1000:			}
        -: 1001:							
        -: 1002:		      //draw 4
    #####: 1003:		      for (j = 0; j < 4; j++)
        -: 1004:			{
    #####: 1005:			  drawCard(i, state);
    #####: 1006:			}
    #####: 1007:		    }
    #####: 1008:		}
    #####: 1009:	    }
        -: 1010:				
    #####: 1011:	}
    #####: 1012:      return 0;
        -: 1013:		
        -: 1014:    case steward:
    #####: 1015:      stewardfun(choice1, choice2, choice3, handPos, currentPlayer, state);
        -: 1016:
        -: 1017:		
        -: 1018:    case tribute:
    #####: 1019:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1020:	if (state->deckCount[nextPlayer] > 0){
    #####: 1021:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1022:	  state->deckCount[nextPlayer]--;
    #####: 1023:	}
    #####: 1024:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1025:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1026:	  state->discardCount[nextPlayer]--;
    #####: 1027:	}
        -: 1028:	else{
        -: 1029:	  //No Card to Reveal
        -: 1030:	  if (DEBUG){
        -: 1031:	    printf("No cards to reveal\n");
        -: 1032:	  }
        -: 1033:	}
    #####: 1034:      }
        -: 1035:	    
        -: 1036:      else{
    #####: 1037:	if (state->deckCount[nextPlayer] == 0){
    #####: 1038:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1039:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1040:	    state->deckCount[nextPlayer]++;
    #####: 1041:	    state->discard[nextPlayer][i] = -1;
    #####: 1042:	    state->discardCount[nextPlayer]--;
    #####: 1043:	  }
        -: 1044:			    
    #####: 1045:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1046:	} 
    #####: 1047:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1048:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1049:	state->deckCount[nextPlayer]--;
    #####: 1050:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1051:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1052:	state->deckCount[nextPlayer]--;
        -: 1053:      }    
        -: 1054:		       
    #####: 1055:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1056:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1057:	state->playedCardCount++;
    #####: 1058:	tributeRevealedCards[1] = -1;
    #####: 1059:      }
        -: 1060:
    #####: 1061:      for (i = 0; i <= 2; i ++){
    #####: 1062:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1063:	  state->coins += 2;
    #####: 1064:	}
        -: 1065:		    
    #####: 1066:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1067:	  drawCard(currentPlayer, state);
    #####: 1068:	  drawCard(currentPlayer, state);
    #####: 1069:	}
        -: 1070:	else{//Action Card
    #####: 1071:	  state->numActions = state->numActions + 2;
        -: 1072:	}
    #####: 1073:      }
        -: 1074:	    
    #####: 1075:      return 0;
        -: 1076:		
        -: 1077:    case ambassador:
    #####: 1078:      j = 0;		//used to check if player has enough cards to discard
        -: 1079:
    #####: 1080:      if (choice2 > 2 || choice2 < 0)
        -: 1081:	{
    #####: 1082:	  return -1;				
        -: 1083:	}
        -: 1084:
    #####: 1085:      if (choice1 == handPos)
        -: 1086:	{
    #####: 1087:	  return -1;
        -: 1088:	}
        -: 1089:
    #####: 1090:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1091:	{
    #####: 1092:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1093:	    {
    #####: 1094:	      j++;
    #####: 1095:	    }
    #####: 1096:	}
    #####: 1097:      if (j < choice2)
        -: 1098:	{
    #####: 1099:	  return -1;				
        -: 1100:	}
        -: 1101:
        -: 1102:      if (DEBUG) 
        -: 1103:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1104:
        -: 1105:      //increase supply count for choosen card by amount being discarded
    #####: 1106:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1107:			
        -: 1108:      //each other player gains a copy of revealed card
    #####: 1109:      for (i = 0; i < state->numPlayers; i++)
        -: 1110:	{
    #####: 1111:	  if (i != currentPlayer)
        -: 1112:	    {
    #####: 1113:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1114:	    }
    #####: 1115:	}
        -: 1116:
        -: 1117:      //discard played card from hand
    #####: 1118:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1119:
        -: 1120:      //trash copies of cards returned to supply
    #####: 1121:      for (j = 0; j < choice2; j++)
        -: 1122:	{
    #####: 1123:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1124:	    {
    #####: 1125:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1126:		{
    #####: 1127:		  discardCard(i, currentPlayer, state, 1);
    #####: 1128:		  break;
        -: 1129:		}
    #####: 1130:	    }
    #####: 1131:	}			
        -: 1132:
    #####: 1133:      return 0;
        -: 1134:		
        -: 1135:    case cutpurse:
        -: 1136:
    #####: 1137:      updateCoins(currentPlayer, state, 2);
    #####: 1138:      for (i = 0; i < state->numPlayers; i++)
        -: 1139:	{
    #####: 1140:	  if (i != currentPlayer)
        -: 1141:	    {
    #####: 1142:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1143:		{
    #####: 1144:		  if (state->hand[i][j] == copper)
        -: 1145:		    {
    #####: 1146:		      discardCard(j, i, state, 0);
    #####: 1147:		      break;
        -: 1148:		    }
    #####: 1149:		  if (j == state->handCount[i])
        -: 1150:		    {
    #####: 1151:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1152:			{
        -: 1153:			  if (DEBUG)
        -: 1154:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1155:			}	
    #####: 1156:		      break;
        -: 1157:		    }		
    #####: 1158:		}
        -: 1159:					
    #####: 1160:	    }
        -: 1161:				
    #####: 1162:	}				
        -: 1163:
        -: 1164:      //discard played card from hand
    #####: 1165:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1166:
    #####: 1167:      return 0;
        -: 1168:
        -: 1169:		
        -: 1170:    case embargo: 
        -: 1171:      //+2 Coins
    #####: 1172:      state->coins = state->coins + 2;
        -: 1173:			
        -: 1174:      //see if selected pile is in play
    #####: 1175:      if ( state->supplyCount[choice1] == -1 )
        -: 1176:	{
    #####: 1177:	  return -1;
        -: 1178:	}
        -: 1179:			
        -: 1180:      //add embargo token to selected supply pile
    #####: 1181:      state->embargoTokens[choice1]++;
        -: 1182:			
        -: 1183:      //trash card
    #####: 1184:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1185:      return 0;
        -: 1186:		
        -: 1187:    case outpost:
        -: 1188:      //set outpost flag
    #####: 1189:      state->outpostPlayed++;
        -: 1190:			
        -: 1191:      //discard card
    #####: 1192:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1193:      return 0;
        -: 1194:		
        -: 1195:    case salvager:
        -: 1196:      //+1 buy
    #####: 1197:      state->numBuys++;
        -: 1198:			
    #####: 1199:      if (choice1)
        -: 1200:	{
        -: 1201:	  //gain coins equal to trashed card
    #####: 1202:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1203:	  //trash card
    #####: 1204:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1205:	}
        -: 1206:			
        -: 1207:      //discard card
    #####: 1208:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1209:      return 0;
        -: 1210:		
        -: 1211:    case sea_hag:
    #####: 1212:      for (i = 0; i < state->numPlayers; i++){
    #####: 1213:	if (i != currentPlayer){
    #####: 1214:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1215:	  state->discardCount[i]++;
    #####: 1216:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1217:	}
    #####: 1218:      }
    #####: 1219:      return 0;
        -: 1220:		
        -: 1221:    case treasure_map:
        -: 1222:      //search hand for another treasure_map
    #####: 1223:      index = -1;
    #####: 1224:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1225:	{
    #####: 1226:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1227:	    {
    #####: 1228:	      index = i;
    #####: 1229:	      break;
        -: 1230:	    }
    #####: 1231:	}
    #####: 1232:      if (index > -1)
        -: 1233:	{
        -: 1234:	  //trash both treasure cards
    #####: 1235:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1236:	  discardCard(index, currentPlayer, state, 1);
        -: 1237:
        -: 1238:	  //gain 4 Gold cards
    #####: 1239:	  for (i = 0; i < 4; i++)
        -: 1240:	    {
    #####: 1241:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1242:	    }
        -: 1243:				
        -: 1244:	  //return success
    #####: 1245:	  return 1;
        -: 1246:	}
        -: 1247:			
        -: 1248:      //no second treasure_map found in hand
    #####: 1249:      return -1;
        -: 1250:    }
        -: 1251:	
    #####: 1252:  return -1;
       57: 1253:}
        -: 1254:
        -: 1255:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1256:{
        -: 1257:	
        -: 1258:  //if card is not trashed, added to Played pile 
     1148: 1259:  if (trashFlag < 1)
        -: 1260:    {
        -: 1261:      //add card to played pile
      608: 1262:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      608: 1263:      state->playedCardCount++;
      608: 1264:    }
        -: 1265:	
        -: 1266:  //set played card to -1
     1148: 1267:  state->hand[currentPlayer][handPos] = -1;
        -: 1268:	
        -: 1269:  //remove card from player's hand
     1148: 1270:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1271:    {
        -: 1272:      //reduce number of cards in hand
      175: 1273:      state->handCount[currentPlayer]--;
      175: 1274:    }
      973: 1275:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1276:    {
        -: 1277:      //reduce number of cards in hand
       96: 1278:      state->handCount[currentPlayer]--;
       96: 1279:    }
        -: 1280:  else 	
        -: 1281:    {
        -: 1282:      //replace discarded card with last card in hand
      877: 1283:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1284:      //set last card to -1
      877: 1285:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1286:      //reduce number of cards in hand
      877: 1287:      state->handCount[currentPlayer]--;
        -: 1288:    }
        -: 1289:	
     1148: 1290:  return 0;
        -: 1291:}
        -: 1292:
        -: 1293:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1294:{
        -: 1295:  //Note: supplyPos is enum of choosen card
        -: 1296:	
        -: 1297:  //check if supply pile is empty (0) or card is not used in game (-1)
     6672: 1298:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1299:    {
      884: 1300:      return -1;
        -: 1301:    }
        -: 1302:	
        -: 1303:  //added card for [whoseTurn] current player:
        -: 1304:  // toFlag = 0 : add to discard
        -: 1305:  // toFlag = 1 : add to deck
        -: 1306:  // toFlag = 2 : add to hand
        -: 1307:
     5788: 1308:  if (toFlag == 1)
        -: 1309:    {
     2142: 1310:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
     2142: 1311:      state->deckCount[player]++;
     2142: 1312:    }
     3646: 1313:  else if (toFlag == 2)
        -: 1314:    {
     1904: 1315:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
     1904: 1316:      state->handCount[player]++;
     1904: 1317:    }
        -: 1318:  else
        -: 1319:    {
     1742: 1320:      state->discard[player][ state->discardCount[player] ] = supplyPos;
     1742: 1321:      state->discardCount[player]++;
        -: 1322:    }
        -: 1323:	
        -: 1324:  //decrease number in supply pile
     5788: 1325:  state->supplyCount[supplyPos]--;
        -: 1326:	 
     5788: 1327:  return 0;
     6672: 1328:}
        -: 1329:
        -: 1330:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1331:{
        -: 1332:  int i;
        -: 1333:	
        -: 1334:  //reset coin count
     8786: 1335:  state->coins = 0;
        -: 1336:
        -: 1337:  //add coins for each Treasure card in player's hand
   104176: 1338:  for (i = 0; i < state->handCount[player]; i++)
        -: 1339:    {
    43302: 1340:      if (state->hand[player][i] == copper)
        -: 1341:	{
    34010: 1342:	  state->coins += 1;
    34010: 1343:	}
     9292: 1344:      else if (state->hand[player][i] == silver)
        -: 1345:	{
      433: 1346:	  state->coins += 2;
      433: 1347:	}
     8859: 1348:      else if (state->hand[player][i] == gold)
        -: 1349:	{
      353: 1350:	  state->coins += 3;
      353: 1351:	}	
    43302: 1352:    }	
        -: 1353:
        -: 1354:  //add bonus
     8786: 1355:  state->coins += bonus;
        -: 1356:
     8786: 1357:  return 0;
        -: 1358:}
        -: 1359:
        -: 1360:
        -: 1361://end of dominion.c
        -: 1362:
TESTING smithyfun():
Playing with player 0, handPos 0
HandCount: 8, Expected: 7
test FAILED
DeckCount: 1, Expected: 2
test FAILED
PlayedCardCount: 1, Expected: 1
test passed
Playing with player 0, handPos 1
HandCount: 8, Expected: 7
test FAILED
DeckCount: 1, Expected: 2
test FAILED
PlayedCardCount: 1, Expected: 1
test passed
Playing with player 0, handPos 2
HandCount: 8, Expected: 7
test FAILED
DeckCount: 1, Expected: 2
test FAILED
PlayedCardCount: 1, Expected: 1
test passed
Playing with player 0, handPos 3
HandCount: 8, Expected: 7
test FAILED
DeckCount: 1, Expected: 2
test FAILED
PlayedCardCount: 1, Expected: 1
test passed
Playing with player 0, handPos 4
HandCount: 8, Expected: 7
test FAILED
DeckCount: 1, Expected: 2
test FAILED
PlayedCardCount: 1, Expected: 1
test passed
Playing with player 1, handPos 0
HandCount: 3, Expected: 2
test FAILED
DeckCount: 6, Expected: 7
test FAILED
PlayedCardCount: 1, Expected: 1
test passed
Playing with player 1, handPos 1
HandCount: 3, Expected: 2
test FAILED
DeckCount: 6, Expected: 7
test FAILED
PlayedCardCount: 1, Expected: 1
test passed
Playing with player 1, handPos 2
HandCount: 3, Expected: 2
test FAILED
DeckCount: 6, Expected: 7
test FAILED
PlayedCardCount: 1, Expected: 1
test passed
Playing with player 1, handPos 3
HandCount: 3, Expected: 2
test FAILED
DeckCount: 6, Expected: 7
test FAILED
PlayedCardCount: 1, Expected: 1
test passed
Playing with player 1, handPos 4
HandCount: 3, Expected: 2
test FAILED
DeckCount: 6, Expected: 7
test FAILED
PlayedCardCount: 1, Expected: 1
test passed
Tests failed.
TESTING stewardfun():
Testing with choice1 = 0, choice2 = 1, choice3 = 1, handPos = 0
Handcount: 2, Expected: 2
test passed
Testing with choice1 = 1, choice2 = 2, choice3 = 2, handPos = 0
Handcount: 6, Expected: 6
test passed
Testing with choice1 = 2, choice2 = 3, choice3 = 3, handPos = 0
Coins: 4, Expected: 6
test FAILED
Handcount: 2, Expected: 4
test FAILED
Testing with choice1 = 0, choice2 = 1, choice3 = 1, handPos = 1
Handcount: 2, Expected: 2
test passed
Testing with choice1 = 1, choice2 = 2, choice3 = 2, handPos = 1
Handcount: 6, Expected: 6
test passed
Testing with choice1 = 2, choice2 = 3, choice3 = 3, handPos = 1
Coins: 4, Expected: 6
test FAILED
Handcount: 2, Expected: 4
test FAILED
Testing with choice1 = 0, choice2 = 1, choice3 = 1, handPos = 2
Handcount: 2, Expected: 2
test passed
Testing with choice1 = 1, choice2 = 2, choice3 = 2, handPos = 2
Handcount: 6, Expected: 6
test passed
Testing with choice1 = 2, choice2 = 3, choice3 = 3, handPos = 2
Coins: 4, Expected: 6
test FAILED
Handcount: 2, Expected: 4
test FAILED
Testing with choice1 = 0, choice2 = 1, choice3 = 1, handPos = 3
Handcount: 2, Expected: 2
test passed
Testing with choice1 = 1, choice2 = 2, choice3 = 2, handPos = 3
Handcount: 6, Expected: 6
test passed
Testing with choice1 = 2, choice2 = 3, choice3 = 3, handPos = 3
Coins: 4, Expected: 6
test FAILED
Handcount: 2, Expected: 4
test FAILED
Testing with choice1 = 0, choice2 = 1, choice3 = 1, handPos = 4
Handcount: 2, Expected: 2
test passed
Testing with choice1 = 1, choice2 = 2, choice3 = 2, handPos = 4
Handcount: 6, Expected: 6
test passed
Testing with choice1 = 2, choice2 = 3, choice3 = 3, handPos = 4
Coins: 4, Expected: 6
test FAILED
Handcount: 2, Expected: 4
test FAILED
Testing with choice1 = 0, choice2 = 1, choice3 = 1, handPos = 0
Handcount: -3, Expected: -3
test passed
Testing with choice1 = 1, choice2 = 2, choice3 = 2, handPos = 0
Handcount: 1, Expected: 1
test passed
Testing with choice1 = 2, choice2 = 3, choice3 = 3, handPos = 0
Coins: 4, Expected: 6
test FAILED
Handcount: -3, Expected: -1
test FAILED
Testing with choice1 = 0, choice2 = 1, choice3 = 1, handPos = 1
Handcount: -3, Expected: -3
test passed
Testing with choice1 = 1, choice2 = 2, choice3 = 2, handPos = 1
Handcount: 1, Expected: 1
test passed
Testing with choice1 = 2, choice2 = 3, choice3 = 3, handPos = 1
Coins: 4, Expected: 6
test FAILED
Handcount: -3, Expected: -1
test FAILED
Testing with choice1 = 0, choice2 = 1, choice3 = 1, handPos = 2
Handcount: -3, Expected: -3
test passed
Testing with choice1 = 1, choice2 = 2, choice3 = 2, handPos = 2
Handcount: 1, Expected: 1
test passed
Testing with choice1 = 2, choice2 = 3, choice3 = 3, handPos = 2
Coins: 4, Expected: 6
test FAILED
Handcount: -3, Expected: -1
test FAILED
Testing with choice1 = 0, choice2 = 1, choice3 = 1, handPos = 3
Handcount: -3, Expected: -3
test passed
Testing with choice1 = 1, choice2 = 2, choice3 = 2, handPos = 3
Handcount: 1, Expected: 1
test passed
Testing with choice1 = 2, choice2 = 3, choice3 = 3, handPos = 3
Coins: 4, Expected: 6
test FAILED
Handcount: -3, Expected: -1
test FAILED
Testing with choice1 = 0, choice2 = 1, choice3 = 1, handPos = 4
Handcount: -3, Expected: -3
test passed
Testing with choice1 = 1, choice2 = 2, choice3 = 2, handPos = 4
Handcount: 1, Expected: 1
test passed
Testing with choice1 = 2, choice2 = 3, choice3 = 3, handPos = 4
Coins: 4, Expected: 6
test FAILED
Handcount: -3, Expected: -1
test FAILED
Tests failed.
TESTING adventurerfun():
Testing with 0 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 387389207
Test failed.
Card at position: 6
Card drawn: 387389207
Test failed.
Testing that 2 cards were drawn. 
HandCount: 5, Expected: 7
test FAILED
Testing with 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 8, Expected: 7
test FAILED
Testing with 10 deckcount.
Testing that treasure cards were drawn. 
Card at position: 5
Card drawn: 4
Test passed.
Card at position: 6
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 8, Expected: 7
test FAILED
Testing with 0 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 387389207
Test failed.
Card at position: 1
Card drawn: 387389207
Test failed.
Testing that 2 cards were drawn. 
HandCount: -495, Expected: 2
test FAILED
Testing with 5 deckCount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 3, Expected: 2
test FAILED
Testing with 10 deckcount.
Testing that treasure cards were drawn. 
Card at position: 0
Card drawn: 4
Test passed.
Card at position: 1
Card drawn: 4
Test passed.
Testing that 2 cards were drawn. 
HandCount: 3, Expected: 2
test FAILED
Tests failed.
TESTING councilRoom card in cardEffect():
Testing with handPos 0
HandCount for current player: 8, Expected: 8
test passed
Buys: 2, Expected: 2
test passed
HandCount for other player: 1, Expected: 1
test passed
Testing with handPos 1
HandCount for current player: 8, Expected: 8
test passed
Buys: 2, Expected: 2
test passed
HandCount for other player: 1, Expected: 1
test passed
Testing with handPos 2
HandCount for current player: 8, Expected: 8
test passed
Buys: 2, Expected: 2
test passed
HandCount for other player: 1, Expected: 1
test passed
Testing with handPos 3
HandCount for current player: 8, Expected: 8
test passed
Buys: 2, Expected: 2
test passed
HandCount for other player: 1, Expected: 1
test passed
Testing with handPos 4
HandCount for current player: 8, Expected: 8
test passed
Buys: 2, Expected: 2
test passed
HandCount for other player: 1, Expected: 1
test passed
All tests passed!
TESTING scoreFor():
Testing with handcount: 0, discardcount: 0, deckCount: 0, and 0 of each card
Score: 0, Expected: 0
test passed
Testing with handcount: 0, discardcount: 0, deckCount: 0, and 0 of each card
Score: 0, Expected: 0
test passed
Testing with handcount: 0, discardcount: 0, deckCount: 0, and 0 of each card
Score: 0, Expected: 0
test passed
Testing with handcount: 6, discardcount: 0, deckCount: 0, and 1 of each card
Score: 10, Expected: 10
test passed
Testing with handcount: 6, discardcount: 6, deckCount: 0, and 1 of each card
Score: 30, Expected: 20
test FAILED
Testing with handcount: 6, discardcount: 6, deckCount: 6, and 1 of each card
Score: 30, Expected: 30
test passed
Testing with handcount: 12, discardcount: 0, deckCount: 0, and 2 of each card
Score: 20, Expected: 20
test passed
Testing with handcount: 12, discardcount: 12, deckCount: 0, and 2 of each card
Score: 60, Expected: 40
test FAILED
Testing with handcount: 12, discardcount: 12, deckCount: 12, and 2 of each card
Score: 60, Expected: 60
test passed
Testing with handcount: 18, discardcount: 0, deckCount: 0, and 3 of each card
Score: 30, Expected: 30
test passed
Testing with handcount: 18, discardcount: 18, deckCount: 0, and 3 of each card
Score: 90, Expected: 60
test FAILED
Testing with handcount: 18, discardcount: 18, deckCount: 18, and 3 of each card
Score: 90, Expected: 90
test passed
Testing with handcount: 24, discardcount: 0, deckCount: 0, and 4 of each card
Score: 40, Expected: 40
test passed
Testing with handcount: 24, discardcount: 24, deckCount: 0, and 4 of each card
Score: 120, Expected: 80
test FAILED
Testing with handcount: 24, discardcount: 24, deckCount: 24, and 4 of each card
Score: 132, Expected: 120
test FAILED
Testing with handcount: 0, discardcount: 0, deckCount: 0, and 0 of each card
Score: 0, Expected: 0
test passed
Testing with handcount: 0, discardcount: 0, deckCount: 0, and 0 of each card
Score: 0, Expected: 0
test passed
Testing with handcount: 0, discardcount: 0, deckCount: 0, and 0 of each card
Score: 0, Expected: 0
test passed
Testing with handcount: 6, discardcount: 0, deckCount: 0, and 1 of each card
Score: 10, Expected: 10
test passed
Testing with handcount: 6, discardcount: 6, deckCount: 0, and 1 of each card
Score: 30, Expected: 20
test FAILED
Testing with handcount: 6, discardcount: 6, deckCount: 6, and 1 of each card
Score: 30, Expected: 30
test passed
Testing with handcount: 12, discardcount: 0, deckCount: 0, and 2 of each card
Score: 20, Expected: 20
test passed
Testing with handcount: 12, discardcount: 12, deckCount: 0, and 2 of each card
Score: 60, Expected: 40
test FAILED
Testing with handcount: 12, discardcount: 12, deckCount: 12, and 2 of each card
Score: 60, Expected: 60
test passed
Testing with handcount: 18, discardcount: 0, deckCount: 0, and 3 of each card
Score: 30, Expected: 30
test passed
Testing with handcount: 18, discardcount: 18, deckCount: 0, and 3 of each card
Score: 90, Expected: 60
test FAILED
Testing with handcount: 18, discardcount: 18, deckCount: 18, and 3 of each card
Score: 90, Expected: 90
test passed
Testing with handcount: 24, discardcount: 0, deckCount: 0, and 4 of each card
Score: 40, Expected: 40
test passed
Testing with handcount: 24, discardcount: 24, deckCount: 0, and 4 of each card
Score: 120, Expected: 80
test FAILED
Testing with handcount: 24, discardcount: 24, deckCount: 24, and 4 of each card
Score: 132, Expected: 120
test FAILED
Tests failed.
TESTING discardCard():
Test player 0 with 1 card(s) and 0 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 0, expected = 0
Test player 0 with 1 card(s) and 0 hand position.
handcount = 0, expected = 0
Test player 0 with 1 card(s) and 1 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 0, expected = 0
Test player 0 with 1 card(s) and 1 hand position.
handcount = 0, expected = 0
Test player 0 with 1 card(s) and 2 hand position.
playedCard = 1, expected = 1
playedCardCount = 1, expected = 1
handcount = 0, expected = 0
Test player 0 with 1 card(s) and 2 hand position.
handcount = 0, expected = 0
Test player 0 with 1 card(s) and 3 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 0, expected = 0
Test player 0 with 1 card(s) and 3 hand position.
handcount = 0, expected = 0
Test player 0 with 1 card(s) and 4 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 0, expected = 0
Test player 0 with 1 card(s) and 4 hand position.
handcount = 0, expected = 0
Test player 0 with 2 card(s) and 0 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 1, expected = 1
Test player 0 with 2 card(s) and 0 hand position.
handcount = 1, expected = 1
Test player 0 with 2 card(s) and 1 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 1, expected = 1
Test player 0 with 2 card(s) and 1 hand position.
handcount = 1, expected = 1
Test player 0 with 2 card(s) and 2 hand position.
playedCard = 1, expected = 1
playedCardCount = 1, expected = 1
handcount = 1, expected = 1
Test player 0 with 2 card(s) and 2 hand position.
handcount = 1, expected = 1
Test player 0 with 2 card(s) and 3 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 1, expected = 1
Test player 0 with 2 card(s) and 3 hand position.
handcount = 1, expected = 1
Test player 0 with 2 card(s) and 4 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 1, expected = 1
Test player 0 with 2 card(s) and 4 hand position.
handcount = 1, expected = 1
Test player 0 with 3 card(s) and 0 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 2, expected = 2
Test player 0 with 3 card(s) and 0 hand position.
handcount = 2, expected = 2
Test player 0 with 3 card(s) and 1 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 2, expected = 2
Test player 0 with 3 card(s) and 1 hand position.
handcount = 2, expected = 2
Test player 0 with 3 card(s) and 2 hand position.
playedCard = 1, expected = 1
playedCardCount = 1, expected = 1
handcount = 2, expected = 2
Test player 0 with 3 card(s) and 2 hand position.
handcount = 2, expected = 2
Test player 0 with 3 card(s) and 3 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 2, expected = 2
Test player 0 with 3 card(s) and 3 hand position.
handcount = 2, expected = 2
Test player 0 with 3 card(s) and 4 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 2, expected = 2
Test player 0 with 3 card(s) and 4 hand position.
handcount = 2, expected = 2
Test player 0 with 4 card(s) and 0 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 3, expected = 3
Test player 0 with 4 card(s) and 0 hand position.
handcount = 3, expected = 3
Test player 0 with 4 card(s) and 1 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 3, expected = 3
Test player 0 with 4 card(s) and 1 hand position.
handcount = 3, expected = 3
Test player 0 with 4 card(s) and 2 hand position.
playedCard = 1, expected = 1
playedCardCount = 1, expected = 1
handcount = 3, expected = 3
Test player 0 with 4 card(s) and 2 hand position.
handcount = 3, expected = 3
Test player 0 with 4 card(s) and 3 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 3, expected = 3
Test player 0 with 4 card(s) and 3 hand position.
handcount = 3, expected = 3
Test player 0 with 4 card(s) and 4 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 3, expected = 3
Test player 0 with 4 card(s) and 4 hand position.
handcount = 3, expected = 3
Test player 0 with 5 card(s) and 0 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 4, expected = 4
Test player 0 with 5 card(s) and 0 hand position.
handcount = 4, expected = 4
Test player 0 with 5 card(s) and 1 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 4, expected = 4
Test player 0 with 5 card(s) and 1 hand position.
handcount = 4, expected = 4
Test player 0 with 5 card(s) and 2 hand position.
playedCard = 1, expected = 1
playedCardCount = 1, expected = 1
handcount = 4, expected = 4
Test player 0 with 5 card(s) and 2 hand position.
handcount = 4, expected = 4
Test player 0 with 5 card(s) and 3 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 4, expected = 4
Test player 0 with 5 card(s) and 3 hand position.
handcount = 4, expected = 4
Test player 0 with 5 card(s) and 4 hand position.
playedCard = 4, expected = 4
playedCardCount = 1, expected = 1
handcount = 4, expected = 4
Test player 0 with 5 card(s) and 4 hand position.
handcount = 4, expected = 4
Test player 1 with 1 card(s) and 0 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 0, expected = 0
Test player 1 with 1 card(s) and 0 hand position.
handcount = 0, expected = 0
Test player 1 with 1 card(s) and 1 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 0, expected = 0
Test player 1 with 1 card(s) and 1 hand position.
handcount = 0, expected = 0
Test player 1 with 1 card(s) and 2 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 0, expected = 0
Test player 1 with 1 card(s) and 2 hand position.
handcount = 0, expected = 0
Test player 1 with 1 card(s) and 3 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 0, expected = 0
Test player 1 with 1 card(s) and 3 hand position.
handcount = 0, expected = 0
Test player 1 with 1 card(s) and 4 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 0, expected = 0
Test player 1 with 1 card(s) and 4 hand position.
handcount = 0, expected = 0
Test player 1 with 2 card(s) and 0 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 1, expected = 1
Test player 1 with 2 card(s) and 0 hand position.
handcount = 1, expected = 1
Test player 1 with 2 card(s) and 1 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 1, expected = 1
Test player 1 with 2 card(s) and 1 hand position.
handcount = 1, expected = 1
Test player 1 with 2 card(s) and 2 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 1, expected = 1
Test player 1 with 2 card(s) and 2 hand position.
handcount = 1, expected = 1
Test player 1 with 2 card(s) and 3 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 1, expected = 1
Test player 1 with 2 card(s) and 3 hand position.
handcount = 1, expected = 1
Test player 1 with 2 card(s) and 4 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 1, expected = 1
Test player 1 with 2 card(s) and 4 hand position.
handcount = 1, expected = 1
Test player 1 with 3 card(s) and 0 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 2, expected = 2
Test player 1 with 3 card(s) and 0 hand position.
handcount = 2, expected = 2
Test player 1 with 3 card(s) and 1 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 2, expected = 2
Test player 1 with 3 card(s) and 1 hand position.
handcount = 2, expected = 2
Test player 1 with 3 card(s) and 2 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 2, expected = 2
Test player 1 with 3 card(s) and 2 hand position.
handcount = 2, expected = 2
Test player 1 with 3 card(s) and 3 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 2, expected = 2
Test player 1 with 3 card(s) and 3 hand position.
handcount = 2, expected = 2
Test player 1 with 3 card(s) and 4 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 2, expected = 2
Test player 1 with 3 card(s) and 4 hand position.
handcount = 2, expected = 2
Test player 1 with 4 card(s) and 0 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 3, expected = 3
Test player 1 with 4 card(s) and 0 hand position.
handcount = 3, expected = 3
Test player 1 with 4 card(s) and 1 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 3, expected = 3
Test player 1 with 4 card(s) and 1 hand position.
handcount = 3, expected = 3
Test player 1 with 4 card(s) and 2 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 3, expected = 3
Test player 1 with 4 card(s) and 2 hand position.
handcount = 3, expected = 3
Test player 1 with 4 card(s) and 3 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 3, expected = 3
Test player 1 with 4 card(s) and 3 hand position.
handcount = 3, expected = 3
Test player 1 with 4 card(s) and 4 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 3, expected = 3
Test player 1 with 4 card(s) and 4 hand position.
handcount = 3, expected = 3
Test player 1 with 5 card(s) and 0 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 4, expected = 4
Test player 1 with 5 card(s) and 0 hand position.
handcount = 4, expected = 4
Test player 1 with 5 card(s) and 1 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 4, expected = 4
Test player 1 with 5 card(s) and 1 hand position.
handcount = 4, expected = 4
Test player 1 with 5 card(s) and 2 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 4, expected = 4
Test player 1 with 5 card(s) and 2 hand position.
handcount = 4, expected = 4
Test player 1 with 5 card(s) and 3 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 4, expected = 4
Test player 1 with 5 card(s) and 3 hand position.
handcount = 4, expected = 4
Test player 1 with 5 card(s) and 4 hand position.
playedCard = 387389207, expected = 387389207
playedCardCount = 1, expected = 1
handcount = 4, expected = 4
Test player 1 with 5 card(s) and 4 hand position.
handcount = 4, expected = 4
All tests passed!
TESTING gainCard():
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 0
Deck Card: 0, Expected: 0
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 0
Deck Card: 0, Expected: 0
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 0
Deck Card: 0, Expected: 0
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 0
Deck Card: 0, Expected: 0
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 0
Deck Card: 0, Expected: 0
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 0
Deck Card: 0, Expected: 0
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 0
Deck Card: 0, Expected: 0
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 0
Hand Card: 0, Expected: 0
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 0
Hand Card: 0, Expected: 0
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 0
Hand Card: 0, Expected: 0
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 0
Hand Card: 0, Expected: 0
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 0
Hand Card: 0, Expected: 0
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 0
Hand Card: 0, Expected: 0
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 0
Hand Card: 0, Expected: 0
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 0
Deck Card: 1, Expected: 1
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 0
Deck Card: 1, Expected: 1
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 0
Deck Card: 1, Expected: 1
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 0
Deck Card: 1, Expected: 1
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 0
Deck Card: 1, Expected: 1
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 0
Deck Card: 1, Expected: 1
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 0
Deck Card: 1, Expected: 1
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 0
Hand Card: 1, Expected: 1
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 0
Hand Card: 1, Expected: 1
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 0
Hand Card: 1, Expected: 1
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 0
Hand Card: 1, Expected: 1
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 0
Hand Card: 1, Expected: 1
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 0
Hand Card: 1, Expected: 1
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 0
Hand Card: 1, Expected: 1
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 0
Deck Card: 2, Expected: 2
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 0
Deck Card: 2, Expected: 2
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 0
Deck Card: 2, Expected: 2
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 0
Deck Card: 2, Expected: 2
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 0
Deck Card: 2, Expected: 2
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 0
Deck Card: 2, Expected: 2
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 0
Deck Card: 2, Expected: 2
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 0
Hand Card: 2, Expected: 2
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 0
Hand Card: 2, Expected: 2
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 0
Hand Card: 2, Expected: 2
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 0
Hand Card: 2, Expected: 2
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 0
Hand Card: 2, Expected: 2
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 0
Hand Card: 2, Expected: 2
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 0
Hand Card: 2, Expected: 2
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 0
Deck Card: 3, Expected: 3
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 0
Deck Card: 3, Expected: 3
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 0
Deck Card: 3, Expected: 3
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 0
Deck Card: 3, Expected: 3
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 0
Deck Card: 3, Expected: 3
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 0
Deck Card: 3, Expected: 3
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 0
Deck Card: 3, Expected: 3
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 0
Hand Card: 3, Expected: 3
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 0
Hand Card: 3, Expected: 3
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 0
Hand Card: 3, Expected: 3
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 0
Hand Card: 3, Expected: 3
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 0
Hand Card: 3, Expected: 3
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 0
Hand Card: 3, Expected: 3
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 0
Hand Card: 3, Expected: 3
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 0
Deck Card: 4, Expected: 4
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 0
Deck Card: 4, Expected: 4
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 0
Deck Card: 4, Expected: 4
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 0
Deck Card: 4, Expected: 4
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 0
Deck Card: 4, Expected: 4
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 0
Deck Card: 4, Expected: 4
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 0
Deck Card: 4, Expected: 4
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 0
Hand Card: 4, Expected: 4
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 0
Hand Card: 4, Expected: 4
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 0
Hand Card: 4, Expected: 4
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 0
Hand Card: 4, Expected: 4
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 0
Hand Card: 4, Expected: 4
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 0
Hand Card: 4, Expected: 4
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 0
Hand Card: 4, Expected: 4
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 0
Deck Card: 5, Expected: 5
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 0
Deck Card: 5, Expected: 5
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 0
Deck Card: 5, Expected: 5
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 0
Deck Card: 5, Expected: 5
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 0
Deck Card: 5, Expected: 5
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 0
Deck Card: 5, Expected: 5
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 0
Deck Card: 5, Expected: 5
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 0
Hand Card: 5, Expected: 5
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 0
Hand Card: 5, Expected: 5
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 0
Hand Card: 5, Expected: 5
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 0
Hand Card: 5, Expected: 5
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 0
Hand Card: 5, Expected: 5
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 0
Hand Card: 5, Expected: 5
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 0
Hand Card: 5, Expected: 5
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 0
Deck Card: 6, Expected: 6
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 0
Deck Card: 6, Expected: 6
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 0
Deck Card: 6, Expected: 6
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 0
Deck Card: 6, Expected: 6
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 0
Deck Card: 6, Expected: 6
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 0
Deck Card: 6, Expected: 6
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 0
Deck Card: 6, Expected: 6
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 0
Hand Card: 6, Expected: 6
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 0
Hand Card: 6, Expected: 6
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 0
Hand Card: 6, Expected: 6
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 0
Hand Card: 6, Expected: 6
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 0
Hand Card: 6, Expected: 6
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 0
Hand Card: 6, Expected: 6
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 0
Hand Card: 6, Expected: 6
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 0
Deck Card: 7, Expected: 7
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 0
Deck Card: 7, Expected: 7
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 0
Deck Card: 7, Expected: 7
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 0
Deck Card: 7, Expected: 7
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 0
Deck Card: 7, Expected: 7
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 0
Deck Card: 7, Expected: 7
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 0
Deck Card: 7, Expected: 7
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 0
Hand Card: 7, Expected: 7
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 0
Hand Card: 7, Expected: 7
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 0
Hand Card: 7, Expected: 7
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 0
Hand Card: 7, Expected: 7
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 0
Hand Card: 7, Expected: 7
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 0
Hand Card: 7, Expected: 7
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 0
Hand Card: 7, Expected: 7
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 0
Deck Card: 8, Expected: 8
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 0
Deck Card: 8, Expected: 8
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 0
Deck Card: 8, Expected: 8
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 0
Deck Card: 8, Expected: 8
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 0
Deck Card: 8, Expected: 8
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 0
Deck Card: 8, Expected: 8
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 0
Deck Card: 8, Expected: 8
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 0
Hand Card: 8, Expected: 8
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 0
Hand Card: 8, Expected: 8
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 0
Hand Card: 8, Expected: 8
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 0
Hand Card: 8, Expected: 8
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 0
Hand Card: 8, Expected: 8
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 0
Hand Card: 8, Expected: 8
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 0
Hand Card: 8, Expected: 8
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 0
Deck Card: 9, Expected: 9
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 0
Deck Card: 9, Expected: 9
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 0
Deck Card: 9, Expected: 9
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 0
Deck Card: 9, Expected: 9
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 0
Deck Card: 9, Expected: 9
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 0
Deck Card: 9, Expected: 9
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 0
Deck Card: 9, Expected: 9
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 0
Hand Card: 9, Expected: 9
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 0
Hand Card: 9, Expected: 9
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 0
Hand Card: 9, Expected: 9
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 0
Hand Card: 9, Expected: 9
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 0
Hand Card: 9, Expected: 9
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 0
Hand Card: 9, Expected: 9
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 0
Hand Card: 9, Expected: 9
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 0
Deck Card: 10, Expected: 10
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 0
Deck Card: 10, Expected: 10
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 0
Deck Card: 10, Expected: 10
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 0
Deck Card: 10, Expected: 10
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 0
Deck Card: 10, Expected: 10
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 0
Deck Card: 10, Expected: 10
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 0
Deck Card: 10, Expected: 10
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 0
Hand Card: 10, Expected: 10
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 0
Hand Card: 10, Expected: 10
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 0
Hand Card: 10, Expected: 10
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 0
Hand Card: 10, Expected: 10
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 0
Hand Card: 10, Expected: 10
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 0
Hand Card: 10, Expected: 10
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 0
Hand Card: 10, Expected: 10
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 0
Deck Card: 11, Expected: 11
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 0
Deck Card: 11, Expected: 11
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 0
Deck Card: 11, Expected: 11
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 0
Deck Card: 11, Expected: 11
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 0
Deck Card: 11, Expected: 11
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 0
Deck Card: 11, Expected: 11
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 0
Deck Card: 11, Expected: 11
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 0
Hand Card: 11, Expected: 11
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 0
Hand Card: 11, Expected: 11
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 0
Hand Card: 11, Expected: 11
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 0
Hand Card: 11, Expected: 11
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 0
Hand Card: 11, Expected: 11
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 0
Hand Card: 11, Expected: 11
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 0
Hand Card: 11, Expected: 11
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 0
Deck Card: 12, Expected: 12
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 0
Deck Card: 12, Expected: 12
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 0
Deck Card: 12, Expected: 12
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 0
Deck Card: 12, Expected: 12
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 0
Deck Card: 12, Expected: 12
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 0
Deck Card: 12, Expected: 12
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 0
Deck Card: 12, Expected: 12
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 0
Hand Card: 12, Expected: 12
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 0
Hand Card: 12, Expected: 12
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 0
Hand Card: 12, Expected: 12
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 0
Hand Card: 12, Expected: 12
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 0
Hand Card: 12, Expected: 12
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 0
Hand Card: 12, Expected: 12
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 0
Hand Card: 12, Expected: 12
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 0
Deck Card: 13, Expected: 13
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 0
Deck Card: 13, Expected: 13
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 0
Deck Card: 13, Expected: 13
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 0
Deck Card: 13, Expected: 13
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 0
Deck Card: 13, Expected: 13
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 0
Deck Card: 13, Expected: 13
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 0
Deck Card: 13, Expected: 13
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 0
Hand Card: 13, Expected: 13
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 0
Hand Card: 13, Expected: 13
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 0
Hand Card: 13, Expected: 13
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 0
Hand Card: 13, Expected: 13
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 0
Hand Card: 13, Expected: 13
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 0
Hand Card: 13, Expected: 13
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 0
Hand Card: 13, Expected: 13
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 0
Deck Card: 14, Expected: 14
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 0
Deck Card: 14, Expected: 14
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 0
Deck Card: 14, Expected: 14
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 0
Deck Card: 14, Expected: 14
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 0
Deck Card: 14, Expected: 14
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 0
Deck Card: 14, Expected: 14
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 0
Deck Card: 14, Expected: 14
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 0
Hand Card: 14, Expected: 14
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 0
Hand Card: 14, Expected: 14
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 0
Hand Card: 14, Expected: 14
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 0
Hand Card: 14, Expected: 14
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 0
Hand Card: 14, Expected: 14
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 0
Hand Card: 14, Expected: 14
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 0
Hand Card: 14, Expected: 14
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 0
Deck Card: 15, Expected: 15
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 0
Deck Card: 15, Expected: 15
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 0
Deck Card: 15, Expected: 15
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 0
Deck Card: 15, Expected: 15
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 0
Deck Card: 15, Expected: 15
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 0
Deck Card: 15, Expected: 15
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 0
Deck Card: 15, Expected: 15
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 0
Hand Card: 15, Expected: 15
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 0
Hand Card: 15, Expected: 15
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 0
Hand Card: 15, Expected: 15
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 0
Hand Card: 15, Expected: 15
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 0
Hand Card: 15, Expected: 15
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 0
Hand Card: 15, Expected: 15
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 0
Hand Card: 15, Expected: 15
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 0
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 0
Deck Card: 16, Expected: 16
Deck Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 0
Deck Card: 16, Expected: 16
Deck Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 0
Deck Card: 16, Expected: 16
Deck Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 0
Deck Card: 16, Expected: 16
Deck Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 0
Deck Card: 16, Expected: 16
Deck Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 0
Deck Card: 16, Expected: 16
Deck Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 0
Deck Card: 16, Expected: 16
Deck Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 0
Hand Card: 16, Expected: 16
Hand Count: 6, Expected: 6
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 0
Hand Card: 16, Expected: 16
Hand Count: 6, Expected: 6
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 0
Hand Card: 16, Expected: 16
Hand Count: 6, Expected: 6
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 0
Hand Card: 16, Expected: 16
Hand Count: 6, Expected: 6
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 0
Hand Card: 16, Expected: 16
Hand Count: 6, Expected: 6
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 0
Hand Card: 16, Expected: 16
Hand Count: 6, Expected: 6
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 0
Hand Card: 16, Expected: 16
Hand Count: 6, Expected: 6
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 0, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 0, Expected: 0
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 1
Deck Card: 0, Expected: 0
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 1
Deck Card: 0, Expected: 0
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 1
Deck Card: 0, Expected: 0
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 1
Deck Card: 0, Expected: 0
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 1
Deck Card: 0, Expected: 0
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 1
Deck Card: 0, Expected: 0
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 0, Flag is: 1, player is: 1
Deck Card: 0, Expected: 0
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 1
Hand Card: 0, Expected: 0
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 1
Hand Card: 0, Expected: 0
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 1
Hand Card: 0, Expected: 0
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 1
Hand Card: 0, Expected: 0
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 1
Hand Card: 0, Expected: 0
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 1
Hand Card: 0, Expected: 0
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 0, Flag is: 2, player is: 1
Hand Card: 0, Expected: 0
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 1, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 1, Expected: 1
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 1
Deck Card: 1, Expected: 1
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 1
Deck Card: 1, Expected: 1
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 1
Deck Card: 1, Expected: 1
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 1
Deck Card: 1, Expected: 1
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 1
Deck Card: 1, Expected: 1
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 1
Deck Card: 1, Expected: 1
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 1, Flag is: 1, player is: 1
Deck Card: 1, Expected: 1
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 1
Hand Card: 1, Expected: 1
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 1
Hand Card: 1, Expected: 1
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 1
Hand Card: 1, Expected: 1
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 1
Hand Card: 1, Expected: 1
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 1
Hand Card: 1, Expected: 1
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 1
Hand Card: 1, Expected: 1
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 1, Flag is: 2, player is: 1
Hand Card: 1, Expected: 1
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 2, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 2, Expected: 2
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 1
Deck Card: 2, Expected: 2
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 1
Deck Card: 2, Expected: 2
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 1
Deck Card: 2, Expected: 2
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 1
Deck Card: 2, Expected: 2
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 1
Deck Card: 2, Expected: 2
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 1
Deck Card: 2, Expected: 2
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 2, Flag is: 1, player is: 1
Deck Card: 2, Expected: 2
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 1
Hand Card: 2, Expected: 2
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 1
Hand Card: 2, Expected: 2
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 1
Hand Card: 2, Expected: 2
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 1
Hand Card: 2, Expected: 2
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 1
Hand Card: 2, Expected: 2
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 1
Hand Card: 2, Expected: 2
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 2, Flag is: 2, player is: 1
Hand Card: 2, Expected: 2
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 3, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 3, Expected: 3
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 1
Deck Card: 3, Expected: 3
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 1
Deck Card: 3, Expected: 3
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 1
Deck Card: 3, Expected: 3
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 1
Deck Card: 3, Expected: 3
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 1
Deck Card: 3, Expected: 3
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 1
Deck Card: 3, Expected: 3
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 3, Flag is: 1, player is: 1
Deck Card: 3, Expected: 3
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 1
Hand Card: 3, Expected: 3
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 1
Hand Card: 3, Expected: 3
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 1
Hand Card: 3, Expected: 3
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 1
Hand Card: 3, Expected: 3
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 1
Hand Card: 3, Expected: 3
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 1
Hand Card: 3, Expected: 3
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 3, Flag is: 2, player is: 1
Hand Card: 3, Expected: 3
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 4, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 4, Expected: 4
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 1
Deck Card: 4, Expected: 4
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 1
Deck Card: 4, Expected: 4
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 1
Deck Card: 4, Expected: 4
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 1
Deck Card: 4, Expected: 4
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 1
Deck Card: 4, Expected: 4
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 1
Deck Card: 4, Expected: 4
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 4, Flag is: 1, player is: 1
Deck Card: 4, Expected: 4
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 1
Hand Card: 4, Expected: 4
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 1
Hand Card: 4, Expected: 4
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 1
Hand Card: 4, Expected: 4
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 1
Hand Card: 4, Expected: 4
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 1
Hand Card: 4, Expected: 4
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 1
Hand Card: 4, Expected: 4
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 4, Flag is: 2, player is: 1
Hand Card: 4, Expected: 4
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 5, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 5, Expected: 5
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 1
Deck Card: 5, Expected: 5
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 1
Deck Card: 5, Expected: 5
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 1
Deck Card: 5, Expected: 5
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 1
Deck Card: 5, Expected: 5
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 1
Deck Card: 5, Expected: 5
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 1
Deck Card: 5, Expected: 5
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 5, Flag is: 1, player is: 1
Deck Card: 5, Expected: 5
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 1
Hand Card: 5, Expected: 5
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 1
Hand Card: 5, Expected: 5
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 1
Hand Card: 5, Expected: 5
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 1
Hand Card: 5, Expected: 5
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 1
Hand Card: 5, Expected: 5
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 1
Hand Card: 5, Expected: 5
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 5, Flag is: 2, player is: 1
Hand Card: 5, Expected: 5
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 6, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 6, Expected: 6
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 1
Deck Card: 6, Expected: 6
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 1
Deck Card: 6, Expected: 6
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 1
Deck Card: 6, Expected: 6
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 1
Deck Card: 6, Expected: 6
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 1
Deck Card: 6, Expected: 6
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 1
Deck Card: 6, Expected: 6
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 6, Flag is: 1, player is: 1
Deck Card: 6, Expected: 6
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 1
Hand Card: 6, Expected: 6
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 1
Hand Card: 6, Expected: 6
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 1
Hand Card: 6, Expected: 6
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 1
Hand Card: 6, Expected: 6
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 1
Hand Card: 6, Expected: 6
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 1
Hand Card: 6, Expected: 6
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 6, Flag is: 2, player is: 1
Hand Card: 6, Expected: 6
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 7, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 7, Expected: 7
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 1
Deck Card: 7, Expected: 7
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 1
Deck Card: 7, Expected: 7
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 1
Deck Card: 7, Expected: 7
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 1
Deck Card: 7, Expected: 7
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 1
Deck Card: 7, Expected: 7
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 1
Deck Card: 7, Expected: 7
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 7, Flag is: 1, player is: 1
Deck Card: 7, Expected: 7
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 1
Hand Card: 7, Expected: 7
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 1
Hand Card: 7, Expected: 7
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 1
Hand Card: 7, Expected: 7
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 1
Hand Card: 7, Expected: 7
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 1
Hand Card: 7, Expected: 7
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 1
Hand Card: 7, Expected: 7
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 7, Flag is: 2, player is: 1
Hand Card: 7, Expected: 7
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 8, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 8, Expected: 8
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 1
Deck Card: 8, Expected: 8
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 1
Deck Card: 8, Expected: 8
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 1
Deck Card: 8, Expected: 8
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 1
Deck Card: 8, Expected: 8
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 1
Deck Card: 8, Expected: 8
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 1
Deck Card: 8, Expected: 8
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 8, Flag is: 1, player is: 1
Deck Card: 8, Expected: 8
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 1
Hand Card: 8, Expected: 8
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 1
Hand Card: 8, Expected: 8
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 1
Hand Card: 8, Expected: 8
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 1
Hand Card: 8, Expected: 8
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 1
Hand Card: 8, Expected: 8
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 1
Hand Card: 8, Expected: 8
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 8, Flag is: 2, player is: 1
Hand Card: 8, Expected: 8
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 9, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 9, Expected: 9
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 1
Deck Card: 9, Expected: 9
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 1
Deck Card: 9, Expected: 9
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 1
Deck Card: 9, Expected: 9
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 1
Deck Card: 9, Expected: 9
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 1
Deck Card: 9, Expected: 9
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 1
Deck Card: 9, Expected: 9
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 9, Flag is: 1, player is: 1
Deck Card: 9, Expected: 9
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 1
Hand Card: 9, Expected: 9
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 1
Hand Card: 9, Expected: 9
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 1
Hand Card: 9, Expected: 9
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 1
Hand Card: 9, Expected: 9
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 1
Hand Card: 9, Expected: 9
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 1
Hand Card: 9, Expected: 9
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 9, Flag is: 2, player is: 1
Hand Card: 9, Expected: 9
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 10, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 10, Expected: 10
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 1
Deck Card: 10, Expected: 10
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 1
Deck Card: 10, Expected: 10
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 1
Deck Card: 10, Expected: 10
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 1
Deck Card: 10, Expected: 10
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 1
Deck Card: 10, Expected: 10
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 1
Deck Card: 10, Expected: 10
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 10, Flag is: 1, player is: 1
Deck Card: 10, Expected: 10
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 1
Hand Card: 10, Expected: 10
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 1
Hand Card: 10, Expected: 10
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 1
Hand Card: 10, Expected: 10
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 1
Hand Card: 10, Expected: 10
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 1
Hand Card: 10, Expected: 10
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 1
Hand Card: 10, Expected: 10
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 10, Flag is: 2, player is: 1
Hand Card: 10, Expected: 10
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 11, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 11, Expected: 11
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 1
Deck Card: 11, Expected: 11
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 1
Deck Card: 11, Expected: 11
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 1
Deck Card: 11, Expected: 11
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 1
Deck Card: 11, Expected: 11
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 1
Deck Card: 11, Expected: 11
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 1
Deck Card: 11, Expected: 11
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 11, Flag is: 1, player is: 1
Deck Card: 11, Expected: 11
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 1
Hand Card: 11, Expected: 11
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 1
Hand Card: 11, Expected: 11
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 1
Hand Card: 11, Expected: 11
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 1
Hand Card: 11, Expected: 11
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 1
Hand Card: 11, Expected: 11
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 1
Hand Card: 11, Expected: 11
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 11, Flag is: 2, player is: 1
Hand Card: 11, Expected: 11
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 12, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 12, Expected: 12
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 1
Deck Card: 12, Expected: 12
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 1
Deck Card: 12, Expected: 12
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 1
Deck Card: 12, Expected: 12
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 1
Deck Card: 12, Expected: 12
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 1
Deck Card: 12, Expected: 12
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 1
Deck Card: 12, Expected: 12
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 12, Flag is: 1, player is: 1
Deck Card: 12, Expected: 12
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 1
Hand Card: 12, Expected: 12
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 1
Hand Card: 12, Expected: 12
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 1
Hand Card: 12, Expected: 12
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 1
Hand Card: 12, Expected: 12
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 1
Hand Card: 12, Expected: 12
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 1
Hand Card: 12, Expected: 12
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 12, Flag is: 2, player is: 1
Hand Card: 12, Expected: 12
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 13, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 13, Expected: 13
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 1
Deck Card: 13, Expected: 13
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 1
Deck Card: 13, Expected: 13
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 1
Deck Card: 13, Expected: 13
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 1
Deck Card: 13, Expected: 13
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 1
Deck Card: 13, Expected: 13
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 1
Deck Card: 13, Expected: 13
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 13, Flag is: 1, player is: 1
Deck Card: 13, Expected: 13
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 1
Hand Card: 13, Expected: 13
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 1
Hand Card: 13, Expected: 13
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 1
Hand Card: 13, Expected: 13
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 1
Hand Card: 13, Expected: 13
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 1
Hand Card: 13, Expected: 13
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 1
Hand Card: 13, Expected: 13
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 13, Flag is: 2, player is: 1
Hand Card: 13, Expected: 13
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 14, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 14, Expected: 14
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 1
Deck Card: 14, Expected: 14
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 1
Deck Card: 14, Expected: 14
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 1
Deck Card: 14, Expected: 14
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 1
Deck Card: 14, Expected: 14
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 1
Deck Card: 14, Expected: 14
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 1
Deck Card: 14, Expected: 14
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 14, Flag is: 1, player is: 1
Deck Card: 14, Expected: 14
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 1
Hand Card: 14, Expected: 14
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 1
Hand Card: 14, Expected: 14
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 1
Hand Card: 14, Expected: 14
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 1
Hand Card: 14, Expected: 14
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 1
Hand Card: 14, Expected: 14
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 1
Hand Card: 14, Expected: 14
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 14, Flag is: 2, player is: 1
Hand Card: 14, Expected: 14
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 15, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 15, Expected: 15
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 1
Deck Card: 15, Expected: 15
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 1
Deck Card: 15, Expected: 15
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 1
Deck Card: 15, Expected: 15
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 1
Deck Card: 15, Expected: 15
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 1
Deck Card: 15, Expected: 15
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 1
Deck Card: 15, Expected: 15
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 15, Flag is: 1, player is: 1
Deck Card: 15, Expected: 15
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 1
Hand Card: 15, Expected: 15
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 1
Hand Card: 15, Expected: 15
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 1
Hand Card: 15, Expected: 15
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 1
Hand Card: 15, Expected: 15
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 1
Hand Card: 15, Expected: 15
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 1
Hand Card: 15, Expected: 15
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 15, Flag is: 2, player is: 1
Hand Card: 15, Expected: 15
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to discard. supplyPos is: 16, Flag is: 0, player is: 1
Current discardCount: 0
Discard Card: 16, Expected: 16
Discard Count: 1, Expected: 1
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 1
Deck Card: 16, Expected: 16
Deck Count: 11, Expected: 11
Supply Count: 0, Expected: 0
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 1
Deck Card: 16, Expected: 16
Deck Count: 11, Expected: 11
Supply Count: 1, Expected: 1
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 1
Deck Card: 16, Expected: 16
Deck Count: 11, Expected: 11
Supply Count: 2, Expected: 2
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 1
Deck Card: 16, Expected: 16
Deck Count: 11, Expected: 11
Supply Count: 3, Expected: 3
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 1
Deck Card: 16, Expected: 16
Deck Count: 11, Expected: 11
Supply Count: 4, Expected: 4
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 1
Deck Card: 16, Expected: 16
Deck Count: 11, Expected: 11
Supply Count: 5, Expected: 5
Testing add to deck. supplyPos is: 16, Flag is: 1, player is: 1
Deck Card: 16, Expected: 16
Deck Count: 11, Expected: 11
Supply Count: 6, Expected: 6
Testing pull from 0 supply pile.
Return value: -1, Expected: -1
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 1
Hand Card: 16, Expected: 16
Hand Count: 1, Expected: 1
Supply Count: 0, Expected: 0
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 1
Hand Card: 16, Expected: 16
Hand Count: 1, Expected: 1
Supply Count: 1, Expected: 1
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 1
Hand Card: 16, Expected: 16
Hand Count: 1, Expected: 1
Supply Count: 2, Expected: 2
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 1
Hand Card: 16, Expected: 16
Hand Count: 1, Expected: 1
Supply Count: 3, Expected: 3
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 1
Hand Card: 16, Expected: 16
Hand Count: 1, Expected: 1
Supply Count: 4, Expected: 4
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 1
Hand Card: 16, Expected: 16
Hand Count: 1, Expected: 1
Supply Count: 5, Expected: 5
Testing add to hand. supplyPos is: 16, Flag is: 2, player is: 1
Hand Card: 16, Expected: 16
Hand Count: 1, Expected: 1
Supply Count: 6, Expected: 6
All tests passed!
TESTING isGameOver():
Testing game with 0 province cards.
return value: 1, Expected: 1 
Testing game with 1 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 2 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 3 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 4 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 5 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 6 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 7 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 8 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 9 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 10 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 11 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 12 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 0 province cards.
return value: 1, Expected: 1 
Testing game with 1 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 2 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 3 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 4 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 5 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 6 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 7 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 8 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 9 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 10 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 11 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with 12 province cards.
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with <3 zero-count supply cards
return value: 0, Expected: 0
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
Testing game with >3 zero-count supply cards
return value: 1, Expected: 1
All tests passed!
Function 'compare'
Lines executed:100.00% of 6

Function 'newGame'
Lines executed:0.00% of 2

Function 'kingdomCards'
Lines executed:0.00% of 12

Function 'initializeGame'
Lines executed:85.90% of 78

Function 'shuffle'
Lines executed:100.00% of 18

Function 'playCard'
Lines executed:85.71% of 14

Function 'buyCard'
Lines executed:76.92% of 13

Function 'numHandCards'
Lines executed:100.00% of 1

Function 'handCard'
Lines executed:100.00% of 2

Function 'supplyCount'
Lines executed:100.00% of 1

Function 'fullDeckCount'
Lines executed:100.00% of 11

Function 'whoseTurn'
Lines executed:100.00% of 1

Function 'endTurn'
Lines executed:100.00% of 22

Function 'isGameOver'
Lines executed:100.00% of 12

Function 'scoreFor'
Lines executed:100.00% of 26

Function 'getWinners'
Lines executed:0.00% of 33

Function 'drawCard'
Lines executed:100.00% of 24

Function 'getCost'
Lines executed:23.33% of 30

Function 'smithyfun'
Lines executed:100.00% of 5

Function 'adventurerfun'
Lines executed:100.00% of 17

Function 'villagefun'
Lines executed:100.00% of 3

Function 'great_hallfun'
Lines executed:0.00% of 4

Function 'stewardfun'
Lines executed:81.82% of 11

Function 'cardEffect'
Lines executed:11.86% of 253

Function 'discardCard'
Lines executed:100.00% of 15

Function 'gainCard'
Lines executed:100.00% of 15

Function 'updateCoins'
Lines executed:100.00% of 14

File 'dominion.c'
Lines executed:51.01% of 643
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:78
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
   263383:    9:  if (*(int*)a > *(int*)b)
      336:   10:    return 1;
   263047:   11:  if (*(int*)a < *(int*)b)
    94054:   12:    return -1;
   168993:   13:  return 0;
   263383:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     9367:   44:  SelectStream(1);
     9367:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
    18734:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     9367:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   206074:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
  2060740:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
  1779730:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
   936700:   65:        }
    93670:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     9367:   73:  if (numPlayers == 2)
        -:   74:    {
     9367:   75:      state->supplyCount[curse] = 10;
     9367:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     9367:   87:  if (numPlayers == 2)
        -:   88:    {
     9367:   89:      state->supplyCount[estate] = 8;
     9367:   90:      state->supplyCount[duchy] = 8;
     9367:   91:      state->supplyCount[province] = 8;
     9367:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     9367:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     9367:  102:  state->supplyCount[silver] = 40;
     9367:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   393414:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
  3091110:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
  1451885:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
   177975:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    18732:  115:		  if (numPlayers == 2){ 
    18732:  116:		    state->supplyCount[i] = 8; 
    18732:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
    18732:  119:		}
        -:  120:	      else
        -:  121:		{
    74938:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    93670:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
  1358215:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
  1358215:  130:	}
        -:  131:
   187340:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    56202:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
    18734:  140:      state->deckCount[i] = 0;
   149872:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    56202:  143:	  state->deck[i][j] = estate;
    56202:  144:	  state->deckCount[i]++;
    56202:  145:	}
   299744:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
   131138:  148:	  state->deck[i][j] = copper;
   131138:  149:	  state->deckCount[i]++;		
   131138:  150:	}
    18734:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    56202:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
    18734:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
    18734:  160:    }
        -:  161:
        -:  162:  //draw player hands
    56202:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    18734:  166:      state->handCount[i] = 0;
    18734:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
    18734:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
   524552:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
   252909:  178:      state->embargoTokens[i] = 0;
   252909:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     9367:  182:  state->outpostPlayed = 0;
     9367:  183:  state->phase = 0;
     9367:  184:  state->numActions = 1;
     9367:  185:  state->numBuys = 1;
     9367:  186:  state->playedCardCount = 0;
     9367:  187:  state->whoseTurn = 0;
     9367:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
   112404:  192:  for (it = 0; it < 5; it++){
    46835:  193:    drawCard(state->whoseTurn, state);
    46835:  194:  }
        -:  195:
     9367:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     9367:  198:  return 0;
     9367:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    33333:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    33333:  209:  if (state->deckCount[player] < 1)
    14564:  210:    return -1;
    18769:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   413178:  214:  while (state->deckCount[player] > 0) {
   187820:  215:    card = floor(Random() * state->deckCount[player]);
   187820:  216:    newDeck[newDeckPos] = state->deck[player][card];
   187820:  217:    newDeckPos++;
  1315744:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   470052:  219:      state->deck[player][i] = state->deck[player][i+1];
   470052:  220:    }
   187820:  221:    state->deckCount[player]--;
        -:  222:  }
   413178:  223:  for (i = 0; i < newDeckPos; i++) {
   187820:  224:    state->deck[player][i] = newDeck[i];
   187820:  225:    state->deckCount[player]++;
   187820:  226:  }
        -:  227:
    18769:  228:  return 0;
    33333:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
       61:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       61:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
       61:  243:  if ( state->numActions < 1 )
        -:  244:    {
       36:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
       25:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
       32:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
       18:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
        7:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        7:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        7:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
        7:  269:  return 0;
       61:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
       73:  280:  who = state->whoseTurn;
        -:  281:
       73:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
       73:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
       73:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
       73:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
       73:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
       73:  299:    state->coins = (state->coins) - (getCost(supplyPos));
       73:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
       73:  308:  return 0;
       73:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
      536:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
     1128:  316:  int currentPlayer = whoseTurn(state);
     1128:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
    14639:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
     1620:  326:  int count = 0;
        -:  327:
    24756:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    12486:  330:      if (state->deck[player][i] == card) count++;
    10758:  331:    }
        -:  332:
    56928:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    31384:  335:      if (state->hand[player][i] == card) count++;
    26844:  336:    }
        -:  337:
    45576:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    24696:  340:      if (state->discard[player][i] == card) count++;
    21168:  341:    }
        -:  342:
     1620:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
     1880:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
       77:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
      988:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
      417:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      417:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
      417:  359:  }
       77:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
       77:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
       39:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
       39:  365:  }
        -:  366:  else{
       38:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
       77:  370:  state->outpostPlayed = 0;
       77:  371:  state->phase = 0;
       77:  372:  state->numActions = 1;
       77:  373:  state->coins = 0;
       77:  374:  state->numBuys = 1;
       77:  375:  state->playedCardCount = 0;
       77:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
      924:  380:  for (k = 0; k < 5; k++){
      385:  381:    drawCard(state->whoseTurn, state);//Draw a card
      385:  382:  }
        -:  383:
        -:  384:  //Update money
       77:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
       77:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
     1055:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
      402:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
      653:  401:  j = 0;
    33956:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    16325:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
     1152:  406:	  j++;
     1152:  407:	}
    16325:  408:    }
      653:  409:  if ( j >= 3)
        -:  410:    {
      192:  411:      return 1;
        -:  412:    }
        -:  413:
      461:  414:  return 0;
     1055:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
      304:  420:  int score = 0;
        -:  421:  //score from hand
     7828:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
     4226:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
     4195:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
     4198:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
     4203:  427:      if (state->hand[player][i] == province) { score = score + 6; };
     4206:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
     4210:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     3610:  430:    }
        -:  431:
        -:  432:  //score from discard
     4964:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
     2538:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
     2540:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
     2538:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
     2542:  438:      if (state->discard[player][i] == province) { score = score + 6; };
     2538:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
     2538:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     2178:  441:    }
        -:  442:
        -:  443:  //score from deck
     4964:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
     2538:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
     2541:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
     2538:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
     2540:  449:      if (state->deck[player][i] == province) { score = score + 6; };
     2538:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
     2538:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     2178:  452:    }
        -:  453:
      304:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    55745:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    16094:  533:    for (i = 0; i < state->discardCount[player];i++){
      480:  534:      state->deck[player][i] = state->discard[player][i];
      480:  535:      state->discard[player][i] = -1;
      480:  536:    }
        -:  537:
     7567:  538:    state->deckCount[player] = state->discardCount[player];
     7567:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     7567:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     7567:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     7567:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     7567:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     7567:  559:    if (deckCounter == 0)
     7532:  560:      return -1;
        -:  561:
       35:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       35:  563:    state->deckCount[player]--;
       35:  564:    state->handCount[player]++;//Increment hand count
       35:  565:  }
        -:  566:
        -:  567:  else{
    48178:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    48178:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    48178:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    48178:  576:    state->deckCount[player]--;
    48178:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    48213:  580:  return 0;
    55745:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
      146:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
       32:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
       70:  598:      return 3;
        -:  599:    case gold:
       28:  600:      return 6;
        -:  601:    case adventurer:
        8:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
        8:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
      146:  644:}
        -:  645:
        -:  646://smithy function to introduce a bug
        -:  647:int smithyfun(int currentPlayer, struct gameState *state, int handPos){
        -:  648:  //+3 Cards
        -:  649:  int i;
      828:  650:  for (i = 0; i <= 3; i++)
        -:  651:  {
      331:  652:    drawCard(currentPlayer, state);
      331:  653:  }
        -:  654:      
        -:  655:      //discard card from hand
       83:  656:      discardCard(handPos, currentPlayer, state, 0);
       83:  657:      return 0;
        -:  658:}
        -:  659:
        -:  660://adventurer function to introduce a bug
        -:  661:int adventurerfun(int currentPlayer, struct gameState *state){
        -:  662:    int cardDrawn;
        -:  663:    int temphand[MAX_HAND];
2291246309455167554:  664:    int drawntreasure = 0;
2291246309455167554:  665:    int z = 0;
        -:  666:
10104103169071350806:  667:  while(drawntreasure <= 2){
72057701412117487:  668:      if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
17981541518:  669:          shuffle(currentPlayer, state);
17981541518:  670:      }
7018965447127854326:  671:  drawCard(currentPlayer, state);
7018965447127854326:  672:  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
14469171020717098324:  673:  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    28403:  674:  drawntreasure++;
        -:  675:  else{
     6989:  676:  temphand[z]=cardDrawn;
     6989:  677:  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     6989:  678:  z++;
        -:  679:  }
        -:  680:}
        -:  681:    
    14154:  682:    while(z-1>=0){
     6989:  683:  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     6989:  684:      z=z-1;
        -:  685:    }
       88:  686:    return 0;
        -:  687:}
        -:  688:
        -:  689:int villagefun(int handPos, int currentPlayer, struct gameState *state){
        -:  690:        //+1 Card
        3:  691:        drawCard(currentPlayer, state);
        -:  692:        
        -:  693:        //+2 Actions
        3:  694:        state->numActions = state->numActions + 2;
        -:  695:        
        -:  696:        //discard played card from hand
        -:  697:        //discardCard(handPos, currentPlayer, state, 0);
        3:  698:        return 0;
        -:  699:}
        -:  700:
        -:  701:int great_hallfun(int currentPlayer, struct gameState *state, int handPos){
        -:  702:        //+1 Card
    #####:  703:        drawCard(currentPlayer, state);
        -:  704:        
        -:  705:        //+1 Actions
    #####:  706:        state->numActions++;
        -:  707:        
        -:  708:        //discard card from hand
    #####:  709:        discardCard(handPos, currentPlayer, state, 0);
    #####:  710:        return 0;
        -:  711:}
        -:  712:
        -:  713:int stewardfun(int choice1, int choice2, int choice3, int handPos, int currentPlayer, struct gameState *state){
        -:  714:
      210:  715:  if (choice1 == 1)
        -:  716:	{
        -:  717:	  //+2 cards
       70:  718:	  drawCard(currentPlayer, state);
       70:  719:	  drawCard(currentPlayer, state);
       70:  720:	}
      140:  721:      else if (choice2 == 2)
        -:  722:	{
        -:  723:	  //+2 coins
    #####:  724:	  state->coins = state->coins + 2;
    #####:  725:	}
        -:  726:      else
        -:  727:	{
        -:  728:	  //trash 2 cards in hand
      140:  729:	  discardCard(choice2, currentPlayer, state, 1);
      140:  730:	  discardCard(choice3, currentPlayer, state, 1);
        -:  731:	}
        -:  732:			
        -:  733:      //discard card from hand
      210:  734:      discardCard(handPos, currentPlayer, state, 0);
      210:  735:      return 0;
        -:  736:}
        -:  737:
        -:  738:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  739:{
        -:  740:  int i;
        -:  741:  int j;
        -:  742:  int k;
        -:  743:  int x;
        -:  744:  int index;
       62:  745:  int currentPlayer = whoseTurn(state);
       62:  746:  int nextPlayer = currentPlayer + 1;
        -:  747:
       62:  748:  int tributeRevealedCards[2] = {-1, -1};
        -:  749:  int temphand[MAX_HAND];// moved above the if statement
       62:  750:  if (nextPlayer > (state->numPlayers - 1)){
        4:  751:    nextPlayer = 0;
        4:  752:  }
        -:  753:  
        -:  754:	
        -:  755:  //uses switch to select card and perform actions
       72:  756:  switch( card ) 
        -:  757:    {
        -:  758:    case adventurer:
        4:  759:      adventurerfun(currentPlayer, state);
        -:  760:			
        -:  761:    case council_room:
        -:  762:      //+4 Cards
      590:  763:      for (i = 0; i < 4; i++)
        -:  764:	{
      236:  765:	  drawCard(currentPlayer, state);
      236:  766:	}
        -:  767:			
        -:  768:      //+1 Buy
       59:  769:      state->numBuys++;
        -:  770:			
        -:  771:      //Each other player draws a card
      354:  772:      for (i = 0; i < state->numPlayers; i++)
        -:  773:	{
      118:  774:	  if ( i != currentPlayer )
        -:  775:	    {
       59:  776:	      drawCard(i, state);
       59:  777:	    }
      118:  778:	}
        -:  779:			
        -:  780:      //put played card in played card pile
       59:  781:      discardCard(handPos, currentPlayer, state, 0);
        -:  782:			
       59:  783:      return 0;
        -:  784:			
        -:  785:    case feast:
        -:  786:      //gain card with cost up to 5
        -:  787:      //Backup hand
    #####:  788:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  789:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  790:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  791:      }
        -:  792:      //Backup hand
        -:  793:
        -:  794:      //Update Coins for Buy
    #####:  795:      updateCoins(currentPlayer, state, 5);
    #####:  796:      x = 1;//Condition to loop on
    #####:  797:      while( x == 1) {//Buy one card
    #####:  798:	if (supplyCount(choice1, state) <= 0){
        -:  799:	  if (DEBUG)
        -:  800:	    printf("None of that card left, sorry!\n");
        -:  801:
        -:  802:	  if (DEBUG){
        -:  803:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  804:	  }
    #####:  805:	}
    #####:  806:	else if (state->coins < getCost(choice1)){
    #####:  807:	  printf("That card is too expensive!\n");
        -:  808:
        -:  809:	  if (DEBUG){
        -:  810:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  811:	  }
    #####:  812:	}
        -:  813:	else{
        -:  814:
        -:  815:	  if (DEBUG){
        -:  816:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  817:	  }
        -:  818:
    #####:  819:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  820:	  x = 0;//No more buying cards
        -:  821:
        -:  822:	  if (DEBUG){
        -:  823:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  824:	  }
        -:  825:
        -:  826:	}
        -:  827:      }     
        -:  828:
        -:  829:      //Reset Hand
    #####:  830:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  831:	state->hand[currentPlayer][i] = temphand[i];
    #####:  832:	temphand[i] = -1;
    #####:  833:      }
        -:  834:      //Reset Hand
        -:  835:      			
    #####:  836:      return 0;
        -:  837:			
        -:  838:    case gardens:
    #####:  839:      return -1;
        -:  840:			
        -:  841:    case mine:
    #####:  842:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  843:
    #####:  844:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  845:	{
    #####:  846:	  return -1;
        -:  847:	}
        -:  848:		
    #####:  849:      if (choice2 > treasure_map || choice2 < curse)
        -:  850:	{
    #####:  851:	  return -1;
        -:  852:	}
        -:  853:
    #####:  854:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  855:	{
    #####:  856:	  return -1;
        -:  857:	}
        -:  858:
    #####:  859:      gainCard(choice2, state, 2, currentPlayer);
        -:  860:
        -:  861:      //discard card from hand
    #####:  862:      discardCard(handPos, currentPlayer, state, 0);
        -:  863:
        -:  864:      //discard trashed card
    #####:  865:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  866:	{
    #####:  867:	  if (state->hand[currentPlayer][i] == j)
        -:  868:	    {
    #####:  869:	      discardCard(i, currentPlayer, state, 0);			
    #####:  870:	      break;
        -:  871:	    }
    #####:  872:	}
        -:  873:			
    #####:  874:      return 0;
        -:  875:			
        -:  876:    case remodel:
    #####:  877:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  878:
    #####:  879:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  880:	{
    #####:  881:	  return -1;
        -:  882:	}
        -:  883:
    #####:  884:      gainCard(choice2, state, 0, currentPlayer);
        -:  885:
        -:  886:      //discard card from hand
    #####:  887:      discardCard(handPos, currentPlayer, state, 0);
        -:  888:
        -:  889:      //discard trashed card
    #####:  890:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  891:	{
    #####:  892:	  if (state->hand[currentPlayer][i] == j)
        -:  893:	    {
    #####:  894:	      discardCard(i, currentPlayer, state, 0);			
    #####:  895:	      break;
        -:  896:	    }
    #####:  897:	}
        -:  898:
        -:  899:
    #####:  900:      return 0;
        -:  901:		
        -:  902:    case smithy:
        -:  903:      //+3 Cards
        3:  904:      smithyfun(currentPlayer, state, handPos);
        -:  905:
        -:  906:    case village:
        3:  907:      villagefun(handPos, currentPlayer, state);
        -:  908:		
        -:  909:    case baron:
        3:  910:      state->numBuys++;//Increase buys by 1!
        3:  911:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  912:	int p = 0;//Iterator for hand!
    #####:  913:	int card_not_discarded = 1;//Flag for discard set!
    #####:  914:	while(card_not_discarded){
    #####:  915:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  916:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  917:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  918:	    state->discardCount[currentPlayer]++;
    #####:  919:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  920:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  921:	    }
    #####:  922:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  923:	    state->handCount[currentPlayer]--;
    #####:  924:	    card_not_discarded = 0;//Exit the loop
    #####:  925:	  }
    #####:  926:	  else if (p > state->handCount[currentPlayer]){
        -:  927:	    if(DEBUG) {
        -:  928:	      printf("No estate cards in your hand, invalid choice\n");
        -:  929:	      printf("Must gain an estate if there are any\n");
        -:  930:	    }
    #####:  931:	    if (supplyCount(estate, state) > 0){
    #####:  932:	      gainCard(estate, state, 0, currentPlayer);
    #####:  933:	      state->supplyCount[estate]--;//Decrement estates
    #####:  934:	      if (supplyCount(estate, state) == 0){
    #####:  935:		isGameOver(state);
    #####:  936:	      }
    #####:  937:	    }
    #####:  938:	    card_not_discarded = 0;//Exit the loop
    #####:  939:	  }
        -:  940:			    
        -:  941:	  else{
    #####:  942:	    p++;//Next card
        -:  943:	  }
        -:  944:	}
    #####:  945:      }
        -:  946:			    
        -:  947:      else{
        3:  948:	if (supplyCount(estate, state) > 0){
        3:  949:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
        3:  950:	  state->supplyCount[estate]--;//Decrement Estates
        3:  951:	  if (supplyCount(estate, state) == 0){
    #####:  952:	    isGameOver(state);
    #####:  953:	  }
        3:  954:	}
        -:  955:      }
        -:  956:	    
        -:  957:      
        3:  958:      return 0;
        -:  959:		
        -:  960:    case great_hall:
    #####:  961:      great_hallfun(currentPlayer, state, handPos);
        -:  962:		
        -:  963:    case minion:
        -:  964:      //+1 action
    #####:  965:      state->numActions++;
        -:  966:			
        -:  967:      //discard card from hand
    #####:  968:      discardCard(handPos, currentPlayer, state, 0);
        -:  969:			
    #####:  970:      if (choice1)		//+2 coins
        -:  971:	{
    #####:  972:	  state->coins = state->coins + 2;
    #####:  973:	}
        -:  974:			
    #####:  975:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  976:	{
        -:  977:	  //discard hand
    #####:  978:	  while(numHandCards(state) > 0)
        -:  979:	    {
    #####:  980:	      discardCard(handPos, currentPlayer, state, 0);
        -:  981:	    }
        -:  982:				
        -:  983:	  //draw 4
    #####:  984:	  for (i = 0; i < 4; i++)
        -:  985:	    {
    #####:  986:	      drawCard(currentPlayer, state);
    #####:  987:	    }
        -:  988:				
        -:  989:	  //other players discard hand and redraw if hand size > 4
    #####:  990:	  for (i = 0; i < state->numPlayers; i++)
        -:  991:	    {
    #####:  992:	      if (i != currentPlayer)
        -:  993:		{
    #####:  994:		  if ( state->handCount[i] > 4 )
        -:  995:		    {
        -:  996:		      //discard hand
    #####:  997:		      while( state->handCount[i] > 0 )
        -:  998:			{
    #####:  999:			  discardCard(handPos, i, state, 0);
        -: 1000:			}
        -: 1001:							
        -: 1002:		      //draw 4
    #####: 1003:		      for (j = 0; j < 4; j++)
        -: 1004:			{
    #####: 1005:			  drawCard(i, state);
    #####: 1006:			}
    #####: 1007:		    }
    #####: 1008:		}
    #####: 1009:	    }
        -: 1010:				
    #####: 1011:	}
    #####: 1012:      return 0;
        -: 1013:		
        -: 1014:    case steward:
    #####: 1015:      stewardfun(choice1, choice2, choice3, handPos, currentPlayer, state);
        -: 1016:
        -: 1017:		
        -: 1018:    case tribute:
    #####: 1019:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1020:	if (state->deckCount[nextPlayer] > 0){
    #####: 1021:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1022:	  state->deckCount[nextPlayer]--;
    #####: 1023:	}
    #####: 1024:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1025:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1026:	  state->discardCount[nextPlayer]--;
    #####: 1027:	}
        -: 1028:	else{
        -: 1029:	  //No Card to Reveal
        -: 1030:	  if (DEBUG){
        -: 1031:	    printf("No cards to reveal\n");
        -: 1032:	  }
        -: 1033:	}
    #####: 1034:      }
        -: 1035:	    
        -: 1036:      else{
    #####: 1037:	if (state->deckCount[nextPlayer] == 0){
    #####: 1038:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1039:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1040:	    state->deckCount[nextPlayer]++;
    #####: 1041:	    state->discard[nextPlayer][i] = -1;
    #####: 1042:	    state->discardCount[nextPlayer]--;
    #####: 1043:	  }
        -: 1044:			    
    #####: 1045:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1046:	} 
    #####: 1047:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1048:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1049:	state->deckCount[nextPlayer]--;
    #####: 1050:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1051:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1052:	state->deckCount[nextPlayer]--;
        -: 1053:      }    
        -: 1054:		       
    #####: 1055:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1056:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1057:	state->playedCardCount++;
    #####: 1058:	tributeRevealedCards[1] = -1;
    #####: 1059:      }
        -: 1060:
    #####: 1061:      for (i = 0; i <= 2; i ++){
    #####: 1062:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1063:	  state->coins += 2;
    #####: 1064:	}
        -: 1065:		    
    #####: 1066:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1067:	  drawCard(currentPlayer, state);
    #####: 1068:	  drawCard(currentPlayer, state);
    #####: 1069:	}
        -: 1070:	else{//Action Card
    #####: 1071:	  state->numActions = state->numActions + 2;
        -: 1072:	}
    #####: 1073:      }
        -: 1074:	    
    #####: 1075:      return 0;
        -: 1076:		
        -: 1077:    case ambassador:
    #####: 1078:      j = 0;		//used to check if player has enough cards to discard
        -: 1079:
    #####: 1080:      if (choice2 > 2 || choice2 < 0)
        -: 1081:	{
    #####: 1082:	  return -1;				
        -: 1083:	}
        -: 1084:
    #####: 1085:      if (choice1 == handPos)
        -: 1086:	{
    #####: 1087:	  return -1;
        -: 1088:	}
        -: 1089:
    #####: 1090:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1091:	{
    #####: 1092:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1093:	    {
    #####: 1094:	      j++;
    #####: 1095:	    }
    #####: 1096:	}
    #####: 1097:      if (j < choice2)
        -: 1098:	{
    #####: 1099:	  return -1;				
        -: 1100:	}
        -: 1101:
        -: 1102:      if (DEBUG) 
        -: 1103:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1104:
        -: 1105:      //increase supply count for choosen card by amount being discarded
    #####: 1106:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1107:			
        -: 1108:      //each other player gains a copy of revealed card
    #####: 1109:      for (i = 0; i < state->numPlayers; i++)
        -: 1110:	{
    #####: 1111:	  if (i != currentPlayer)
        -: 1112:	    {
    #####: 1113:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1114:	    }
    #####: 1115:	}
        -: 1116:
        -: 1117:      //discard played card from hand
    #####: 1118:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1119:
        -: 1120:      //trash copies of cards returned to supply
    #####: 1121:      for (j = 0; j < choice2; j++)
        -: 1122:	{
    #####: 1123:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1124:	    {
    #####: 1125:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1126:		{
    #####: 1127:		  discardCard(i, currentPlayer, state, 1);
    #####: 1128:		  break;
        -: 1129:		}
    #####: 1130:	    }
    #####: 1131:	}			
        -: 1132:
    #####: 1133:      return 0;
        -: 1134:		
        -: 1135:    case cutpurse:
        -: 1136:
    #####: 1137:      updateCoins(currentPlayer, state, 2);
    #####: 1138:      for (i = 0; i < state->numPlayers; i++)
        -: 1139:	{
    #####: 1140:	  if (i != currentPlayer)
        -: 1141:	    {
    #####: 1142:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1143:		{
    #####: 1144:		  if (state->hand[i][j] == copper)
        -: 1145:		    {
    #####: 1146:		      discardCard(j, i, state, 0);
    #####: 1147:		      break;
        -: 1148:		    }
    #####: 1149:		  if (j == state->handCount[i])
        -: 1150:		    {
    #####: 1151:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1152:			{
        -: 1153:			  if (DEBUG)
        -: 1154:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1155:			}	
    #####: 1156:		      break;
        -: 1157:		    }		
    #####: 1158:		}
        -: 1159:					
    #####: 1160:	    }
        -: 1161:				
    #####: 1162:	}				
        -: 1163:
        -: 1164:      //discard played card from hand
    #####: 1165:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1166:
    #####: 1167:      return 0;
        -: 1168:
        -: 1169:		
        -: 1170:    case embargo: 
        -: 1171:      //+2 Coins
    #####: 1172:      state->coins = state->coins + 2;
        -: 1173:			
        -: 1174:      //see if selected pile is in play
    #####: 1175:      if ( state->supplyCount[choice1] == -1 )
        -: 1176:	{
    #####: 1177:	  return -1;
        -: 1178:	}
        -: 1179:			
        -: 1180:      //add embargo token to selected supply pile
    #####: 1181:      state->embargoTokens[choice1]++;
        -: 1182:			
        -: 1183:      //trash card
    #####: 1184:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1185:      return 0;
        -: 1186:		
        -: 1187:    case outpost:
        -: 1188:      //set outpost flag
    #####: 1189:      state->outpostPlayed++;
        -: 1190:			
        -: 1191:      //discard card
    #####: 1192:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1193:      return 0;
        -: 1194:		
        -: 1195:    case salvager:
        -: 1196:      //+1 buy
    #####: 1197:      state->numBuys++;
        -: 1198:			
    #####: 1199:      if (choice1)
        -: 1200:	{
        -: 1201:	  //gain coins equal to trashed card
    #####: 1202:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1203:	  //trash card
    #####: 1204:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1205:	}
        -: 1206:			
        -: 1207:      //discard card
    #####: 1208:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1209:      return 0;
        -: 1210:		
        -: 1211:    case sea_hag:
    #####: 1212:      for (i = 0; i < state->numPlayers; i++){
    #####: 1213:	if (i != currentPlayer){
    #####: 1214:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1215:	  state->discardCount[i]++;
    #####: 1216:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1217:	}
    #####: 1218:      }
    #####: 1219:      return 0;
        -: 1220:		
        -: 1221:    case treasure_map:
        -: 1222:      //search hand for another treasure_map
    #####: 1223:      index = -1;
    #####: 1224:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1225:	{
    #####: 1226:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1227:	    {
    #####: 1228:	      index = i;
    #####: 1229:	      break;
        -: 1230:	    }
    #####: 1231:	}
    #####: 1232:      if (index > -1)
        -: 1233:	{
        -: 1234:	  //trash both treasure cards
    #####: 1235:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1236:	  discardCard(index, currentPlayer, state, 1);
        -: 1237:
        -: 1238:	  //gain 4 Gold cards
    #####: 1239:	  for (i = 0; i < 4; i++)
        -: 1240:	    {
    #####: 1241:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1242:	    }
        -: 1243:				
        -: 1244:	  //return success
    #####: 1245:	  return 1;
        -: 1246:	}
        -: 1247:			
        -: 1248:      //no second treasure_map found in hand
    #####: 1249:      return -1;
        -: 1250:    }
        -: 1251:	
    #####: 1252:  return -1;
       62: 1253:}
        -: 1254:
        -: 1255:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1256:{
        -: 1257:	
        -: 1258:  //if card is not trashed, added to Played pile 
     1333: 1259:  if (trashFlag < 1)
        -: 1260:    {
        -: 1261:      //add card to played pile
      703: 1262:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      703: 1263:      state->playedCardCount++;
      703: 1264:    }
        -: 1265:	
        -: 1266:  //set played card to -1
     1333: 1267:  state->hand[currentPlayer][handPos] = -1;
        -: 1268:	
        -: 1269:  //remove card from player's hand
     1333: 1270:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1271:    {
        -: 1272:      //reduce number of cards in hand
      204: 1273:      state->handCount[currentPlayer]--;
      204: 1274:    }
     1129: 1275:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1276:    {
        -: 1277:      //reduce number of cards in hand
      112: 1278:      state->handCount[currentPlayer]--;
      112: 1279:    }
        -: 1280:  else 	
        -: 1281:    {
        -: 1282:      //replace discarded card with last card in hand
     1017: 1283:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1284:      //set last card to -1
     1017: 1285:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1286:      //reduce number of cards in hand
     1017: 1287:      state->handCount[currentPlayer]--;
        -: 1288:    }
        -: 1289:	
     1333: 1290:  return 0;
        -: 1291:}
        -: 1292:
        -: 1293:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1294:{
        -: 1295:  //Note: supplyPos is enum of choosen card
        -: 1296:	
        -: 1297:  //check if supply pile is empty (0) or card is not used in game (-1)
     7488: 1298:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1299:    {
      986: 1300:      return -1;
        -: 1301:    }
        -: 1302:	
        -: 1303:  //added card for [whoseTurn] current player:
        -: 1304:  // toFlag = 0 : add to discard
        -: 1305:  // toFlag = 1 : add to deck
        -: 1306:  // toFlag = 2 : add to hand
        -: 1307:
     6502: 1308:  if (toFlag == 1)
        -: 1309:    {
     2380: 1310:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
     2380: 1311:      state->deckCount[player]++;
     2380: 1312:    }
     4122: 1313:  else if (toFlag == 2)
        -: 1314:    {
     2142: 1315:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
     2142: 1316:      state->handCount[player]++;
     2142: 1317:    }
        -: 1318:  else
        -: 1319:    {
     1980: 1320:      state->discard[player][ state->discardCount[player] ] = supplyPos;
     1980: 1321:      state->discardCount[player]++;
        -: 1322:    }
        -: 1323:	
        -: 1324:  //decrease number in supply pile
     6502: 1325:  state->supplyCount[supplyPos]--;
        -: 1326:	 
     6502: 1327:  return 0;
     7488: 1328:}
        -: 1329:
        -: 1330:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1331:{
        -: 1332:  int i;
        -: 1333:	
        -: 1334:  //reset coin count
     9781: 1335:  state->coins = 0;
        -: 1336:
        -: 1337:  //add coins for each Treasure card in player's hand
   116116: 1338:  for (i = 0; i < state->handCount[player]; i++)
        -: 1339:    {
    48277: 1340:      if (state->hand[player][i] == copper)
        -: 1341:	{
    37990: 1342:	  state->coins += 1;
    37990: 1343:	}
    10287: 1344:      else if (state->hand[player][i] == silver)
        -: 1345:	{
      433: 1346:	  state->coins += 2;
      433: 1347:	}
     9854: 1348:      else if (state->hand[player][i] == gold)
        -: 1349:	{
      353: 1350:	  state->coins += 3;
      353: 1351:	}	
    48277: 1352:    }	
        -: 1353:
        -: 1354:  //add bonus
     9781: 1355:  state->coins += bonus;
        -: 1356:
     9781: 1357:  return 0;
        -: 1358:}
        -: 1359:
        -: 1360:
        -: 1361://end of dominion.c
        -: 1362:
